{"ast":{"type":"Document","children":[{"type":"Yaml","value":"title: '内存的基本概念'\ntags: ['操作系统','内存']","loc":{"start":{"line":1,"column":0},"end":{"line":4,"column":3}},"range":[0,44],"raw":"---\ntitle: '内存的基本概念'\ntags: ['操作系统','内存']\n---"},{"type":"Header","depth":1,"children":[{"type":"Str","value":"内存的基本概念","loc":{"start":{"line":5,"column":2},"end":{"line":5,"column":9}},"range":[47,54],"raw":"内存的基本概念"}],"loc":{"start":{"line":5,"column":0},"end":{"line":5,"column":9}},"range":[45,54],"raw":"# 内存的基本概念"},{"type":"Paragraph","children":[{"type":"Str","value":"内存是用于存放数据的硬件，程序执行前需要先放到内存里，才能被CPU处理。","loc":{"start":{"line":7,"column":0},"end":{"line":7,"column":36}},"range":[56,92],"raw":"内存是用于存放数据的硬件，程序执行前需要先放到内存里，才能被CPU处理。"}],"loc":{"start":{"line":7,"column":0},"end":{"line":7,"column":36}},"range":[56,92],"raw":"内存是用于存放数据的硬件，程序执行前需要先放到内存里，才能被CPU处理。"},{"type":"Paragraph","children":[{"type":"Str","value":"内存存储单元编址：","loc":{"start":{"line":11,"column":0},"end":{"line":11,"column":9}},"range":[96,105],"raw":"内存存储单元编址："}],"loc":{"start":{"line":11,"column":0},"end":{"line":11,"column":9}},"range":[96,105],"raw":"内存存储单元编址："},{"type":"Paragraph","children":[{"type":"Str","value":"按字节编址：每个存储单元大小为1字节","loc":{"start":{"line":13,"column":0},"end":{"line":13,"column":18}},"range":[107,125],"raw":"按字节编址：每个存储单元大小为1字节"}],"loc":{"start":{"line":13,"column":0},"end":{"line":13,"column":18}},"range":[107,125],"raw":"按字节编址：每个存储单元大小为1字节"},{"type":"Paragraph","children":[{"type":"Str","value":"按字编址：每个存储单元的大小为一个字，根据计算机不同，字的大小也不同","loc":{"start":{"line":15,"column":0},"end":{"line":15,"column":34}},"range":[127,161],"raw":"按字编址：每个存储单元的大小为一个字，根据计算机不同，字的大小也不同"}],"loc":{"start":{"line":15,"column":0},"end":{"line":15,"column":34}},"range":[127,161],"raw":"按字编址：每个存储单元的大小为一个字，根据计算机不同，字的大小也不同"},{"type":"Header","depth":2,"children":[{"type":"Str","value":"相对地址和绝对地址","loc":{"start":{"line":19,"column":3},"end":{"line":19,"column":12}},"range":[168,177],"raw":"相对地址和绝对地址"}],"loc":{"start":{"line":19,"column":0},"end":{"line":19,"column":12}},"range":[165,177],"raw":"## 相对地址和绝对地址"},{"type":"Paragraph","children":[{"type":"Str","value":"相对地址：又称为逻辑地址，编译后，目标模块都是从0号单元开始编址，称为该目的模块的相对地址","loc":{"start":{"line":21,"column":0},"end":{"line":21,"column":45}},"range":[179,224],"raw":"相对地址：又称为逻辑地址，编译后，目标模块都是从0号单元开始编址，称为该目的模块的相对地址"}],"loc":{"start":{"line":21,"column":0},"end":{"line":21,"column":45}},"range":[179,224],"raw":"相对地址：又称为逻辑地址，编译后，目标模块都是从0号单元开始编址，称为该目的模块的相对地址"},{"type":"Paragraph","children":[{"type":"Str","value":"绝对地址：又称为物理地址，指内存中物理存储单元的地址","loc":{"start":{"line":23,"column":0},"end":{"line":23,"column":26}},"range":[226,252],"raw":"绝对地址：又称为物理地址，指内存中物理存储单元的地址"}],"loc":{"start":{"line":23,"column":0},"end":{"line":23,"column":26}},"range":[226,252],"raw":"绝对地址：又称为物理地址，指内存中物理存储单元的地址"},{"type":"HorizontalRule","loc":{"start":{"line":25,"column":0},"end":{"line":25,"column":5}},"range":[254,259],"raw":"*****"},{"type":"Header","depth":2,"children":[{"type":"Str","value":"写程序到程序运行","loc":{"start":{"line":27,"column":3},"end":{"line":27,"column":11}},"range":[264,272],"raw":"写程序到程序运行"}],"loc":{"start":{"line":27,"column":0},"end":{"line":27,"column":11}},"range":[261,272],"raw":"## 写程序到程序运行"},{"type":"List","ordered":true,"start":1,"spread":false,"children":[{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"编译：将用户的源代码编译成若干个目标模块，把高级语言翻译成机器语言","loc":{"start":{"line":29,"column":3},"end":{"line":29,"column":36}},"range":[277,310],"raw":"编译：将用户的源代码编译成若干个目标模块，把高级语言翻译成机器语言"}],"loc":{"start":{"line":29,"column":3},"end":{"line":29,"column":36}},"range":[277,310],"raw":"编译：将用户的源代码编译成若干个目标模块，把高级语言翻译成机器语言"}],"loc":{"start":{"line":29,"column":0},"end":{"line":29,"column":36}},"range":[274,310],"raw":"1. 编译：将用户的源代码编译成若干个目标模块，把高级语言翻译成机器语言"},{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"链接：由链接程序把编译后的目标模块以及所需要的库函数链接在一起，形成一个完整的","loc":{"start":{"line":30,"column":3},"end":{"line":30,"column":42}},"range":[314,353],"raw":"链接：由链接程序把编译后的目标模块以及所需要的库函数链接在一起，形成一个完整的"},{"type":"Strong","children":[{"type":"Str","value":"装入模块","loc":{"start":{"line":30,"column":44},"end":{"line":30,"column":48}},"range":[355,359],"raw":"装入模块"}],"loc":{"start":{"line":30,"column":42},"end":{"line":30,"column":50}},"range":[353,361],"raw":"**装入模块**"},{"type":"Str","value":"（例如windows中的.exe）","loc":{"start":{"line":30,"column":50},"end":{"line":30,"column":67}},"range":[361,378],"raw":"（例如windows中的.exe）"}],"loc":{"start":{"line":30,"column":3},"end":{"line":30,"column":67}},"range":[314,378],"raw":"链接：由链接程序把编译后的目标模块以及所需要的库函数链接在一起，形成一个完整的**装入模块**（例如windows中的.exe）"}],"loc":{"start":{"line":30,"column":0},"end":{"line":30,"column":67}},"range":[311,378],"raw":"2. 链接：由链接程序把编译后的目标模块以及所需要的库函数链接在一起，形成一个完整的**装入模块**（例如windows中的.exe）"},{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"装入：由装入程序把装入模块装入内存运行（逻辑地址 $\\rightarrow$ 物理地址）","loc":{"start":{"line":31,"column":3},"end":{"line":31,"column":47}},"range":[382,426],"raw":"装入：由装入程序把装入模块装入内存运行（逻辑地址 $\\rightarrow$ 物理地址）"}],"loc":{"start":{"line":31,"column":3},"end":{"line":31,"column":47}},"range":[382,426],"raw":"装入：由装入程序把装入模块装入内存运行（逻辑地址 $\\rightarrow$ 物理地址）"}],"loc":{"start":{"line":31,"column":0},"end":{"line":31,"column":47}},"range":[379,426],"raw":"3. 装入：由装入程序把装入模块装入内存运行（逻辑地址 $\\rightarrow$ 物理地址）"}],"loc":{"start":{"line":29,"column":0},"end":{"line":31,"column":47}},"range":[274,426],"raw":"1. 编译：将用户的源代码编译成若干个目标模块，把高级语言翻译成机器语言\n2. 链接：由链接程序把编译后的目标模块以及所需要的库函数链接在一起，形成一个完整的**装入模块**（例如windows中的.exe）\n3. 装入：由装入程序把装入模块装入内存运行（逻辑地址 $\\rightarrow$ 物理地址）"},{"type":"Header","depth":3,"children":[{"type":"Str","value":"链接方式","loc":{"start":{"line":33,"column":4},"end":{"line":33,"column":8}},"range":[432,436],"raw":"链接方式"}],"loc":{"start":{"line":33,"column":0},"end":{"line":33,"column":8}},"range":[428,436],"raw":"### 链接方式"},{"type":"Header","depth":4,"children":[{"type":"Str","value":"静态链接","loc":{"start":{"line":35,"column":5},"end":{"line":35,"column":9}},"range":[443,447],"raw":"静态链接"}],"loc":{"start":{"line":35,"column":0},"end":{"line":35,"column":9}},"range":[438,447],"raw":"#### 静态链接"},{"type":"Paragraph","children":[{"type":"Str","value":"在程序运行之前，把各个模块需要的库函数链接成一个完整的可执行文件，之后不能再拆开","loc":{"start":{"line":37,"column":0},"end":{"line":37,"column":40}},"range":[449,489],"raw":"在程序运行之前，把各个模块需要的库函数链接成一个完整的可执行文件，之后不能再拆开"}],"loc":{"start":{"line":37,"column":0},"end":{"line":37,"column":40}},"range":[449,489],"raw":"在程序运行之前，把各个模块需要的库函数链接成一个完整的可执行文件，之后不能再拆开"},{"type":"Header","depth":4,"children":[{"type":"Str","value":"动态链接","loc":{"start":{"line":39,"column":5},"end":{"line":39,"column":9}},"range":[496,500],"raw":"动态链接"}],"loc":{"start":{"line":39,"column":0},"end":{"line":39,"column":9}},"range":[491,500],"raw":"#### 动态链接"},{"type":"Paragraph","children":[{"type":"Str","value":"装入的时候，边装入边链接模块需要的库函数","loc":{"start":{"line":41,"column":0},"end":{"line":41,"column":20}},"range":[502,522],"raw":"装入的时候，边装入边链接模块需要的库函数"}],"loc":{"start":{"line":41,"column":0},"end":{"line":41,"column":20}},"range":[502,522],"raw":"装入的时候，边装入边链接模块需要的库函数"},{"type":"Header","depth":3,"children":[{"type":"Str","value":"运行时动态链接","loc":{"start":{"line":43,"column":4},"end":{"line":43,"column":11}},"range":[528,535],"raw":"运行时动态链接"}],"loc":{"start":{"line":43,"column":0},"end":{"line":43,"column":11}},"range":[524,535],"raw":"### 运行时动态链接"},{"type":"Paragraph","children":[{"type":"Str","value":"在程序执行的过程中需要目标模块的时候，才对其进行链接，方便修改和更新，便于实现对目标模块的共享","loc":{"start":{"line":45,"column":0},"end":{"line":45,"column":47}},"range":[537,584],"raw":"在程序执行的过程中需要目标模块的时候，才对其进行链接，方便修改和更新，便于实现对目标模块的共享"}],"loc":{"start":{"line":45,"column":0},"end":{"line":45,"column":47}},"range":[537,584],"raw":"在程序执行的过程中需要目标模块的时候，才对其进行链接，方便修改和更新，便于实现对目标模块的共享"},{"type":"Header","depth":3,"children":[{"type":"Str","value":"装入方式","loc":{"start":{"line":47,"column":4},"end":{"line":47,"column":8}},"range":[590,594],"raw":"装入方式"}],"loc":{"start":{"line":47,"column":0},"end":{"line":47,"column":8}},"range":[586,594],"raw":"### 装入方式"},{"type":"Header","depth":4,"children":[{"type":"Str","value":"绝对装入","loc":{"start":{"line":49,"column":5},"end":{"line":49,"column":9}},"range":[601,605],"raw":"绝对装入"}],"loc":{"start":{"line":49,"column":0},"end":{"line":49,"column":9}},"range":[596,605],"raw":"#### 绝对装入"},{"type":"Paragraph","children":[{"type":"Str","value":"如果在编译的时候就知道程序会被放到内存的那个位置，编译的时候将产生绝对地址的目标代码，装入程序将按照装入模块中的地址，将程序装入内存。","loc":{"start":{"line":51,"column":1},"end":{"line":51,"column":68}},"range":[608,675],"raw":"如果在编译的时候就知道程序会被放到内存的那个位置，编译的时候将产生绝对地址的目标代码，装入程序将按照装入模块中的地址，将程序装入内存。"}],"loc":{"start":{"line":51,"column":1},"end":{"line":51,"column":68}},"range":[608,675],"raw":"如果在编译的时候就知道程序会被放到内存的那个位置，编译的时候将产生绝对地址的目标代码，装入程序将按照装入模块中的地址，将程序装入内存。"},{"type":"Paragraph","children":[{"type":"Str","value":"缺点：灵活性低，只适用于单道程序环境","loc":{"start":{"line":53,"column":0},"end":{"line":53,"column":18}},"range":[677,695],"raw":"缺点：灵活性低，只适用于单道程序环境"}],"loc":{"start":{"line":53,"column":0},"end":{"line":53,"column":18}},"range":[677,695],"raw":"缺点：灵活性低，只适用于单道程序环境"},{"type":"Header","depth":4,"children":[{"type":"Str","value":"静态重定位","loc":{"start":{"line":55,"column":5},"end":{"line":55,"column":10}},"range":[702,707],"raw":"静态重定位"}],"loc":{"start":{"line":55,"column":0},"end":{"line":55,"column":10}},"range":[697,707],"raw":"#### 静态重定位"},{"type":"Paragraph","children":[{"type":"Str","value":"静态重定位：又称为可重定位装入。编译、链接后的装入模块的地址都是从0开始的，指令中使用的地址、数据存放的地址都是相对于起始地址的逻辑地址，可以根据内存的使用情况，将装入模块装入到合适的位置，装入时对地址进行“重定位”，在装入时将逻辑地址变换为物理地址、","loc":{"start":{"line":57,"column":0},"end":{"line":57,"column":126}},"range":[709,835],"raw":"静态重定位：又称为可重定位装入。编译、链接后的装入模块的地址都是从0开始的，指令中使用的地址、数据存放的地址都是相对于起始地址的逻辑地址，可以根据内存的使用情况，将装入模块装入到合适的位置，装入时对地址进行“重定位”，在装入时将逻辑地址变换为物理地址、"}],"loc":{"start":{"line":57,"column":0},"end":{"line":57,"column":126}},"range":[709,835],"raw":"静态重定位：又称为可重定位装入。编译、链接后的装入模块的地址都是从0开始的，指令中使用的地址、数据存放的地址都是相对于起始地址的逻辑地址，可以根据内存的使用情况，将装入模块装入到合适的位置，装入时对地址进行“重定位”，在装入时将逻辑地址变换为物理地址、"},{"type":"Paragraph","children":[{"type":"Str","value":"特点：作业装入的时候，必须分配装入模块要求的全部内存空间，如果没有足够的内存空间，就不能装入该作业。作业一旦进入内存之后，运行期间就不可以移动，也不能再申请内存空间。","loc":{"start":{"line":59,"column":0},"end":{"line":59,"column":83}},"range":[837,920],"raw":"特点：作业装入的时候，必须分配装入模块要求的全部内存空间，如果没有足够的内存空间，就不能装入该作业。作业一旦进入内存之后，运行期间就不可以移动，也不能再申请内存空间。"}],"loc":{"start":{"line":59,"column":0},"end":{"line":59,"column":83}},"range":[837,920],"raw":"特点：作业装入的时候，必须分配装入模块要求的全部内存空间，如果没有足够的内存空间，就不能装入该作业。作业一旦进入内存之后，运行期间就不可以移动，也不能再申请内存空间。"},{"type":"Header","depth":4,"children":[{"type":"Str","value":"动态重定位","loc":{"start":{"line":61,"column":5},"end":{"line":61,"column":10}},"range":[927,932],"raw":"动态重定位"}],"loc":{"start":{"line":61,"column":0},"end":{"line":61,"column":10}},"range":[922,932],"raw":"#### 动态重定位"},{"type":"Paragraph","children":[{"type":"Str","value":"动态运行时装入。编译、链接后的装入模块的地址都是从0开始的。装入程序的时候把装入模块转入内存后，并不会立即把逻辑地址转换为物理地址，而是把地址转换推迟到需要执行的时候才进行，因此装入内存后的所有地址仍然是逻辑地址。这种装入方式需要一个","loc":{"start":{"line":63,"column":0},"end":{"line":63,"column":117}},"range":[934,1051],"raw":"动态运行时装入。编译、链接后的装入模块的地址都是从0开始的。装入程序的时候把装入模块转入内存后，并不会立即把逻辑地址转换为物理地址，而是把地址转换推迟到需要执行的时候才进行，因此装入内存后的所有地址仍然是逻辑地址。这种装入方式需要一个"},{"type":"Strong","children":[{"type":"Str","value":"重定位寄存器","loc":{"start":{"line":63,"column":119},"end":{"line":63,"column":125}},"range":[1053,1059],"raw":"重定位寄存器"}],"loc":{"start":{"line":63,"column":117},"end":{"line":63,"column":127}},"range":[1051,1061],"raw":"**重定位寄存器**"},{"type":"Str","value":"（存放模块再内存中的起始位置）的支持。","loc":{"start":{"line":63,"column":127},"end":{"line":63,"column":146}},"range":[1061,1080],"raw":"（存放模块再内存中的起始位置）的支持。"}],"loc":{"start":{"line":63,"column":0},"end":{"line":63,"column":146}},"range":[934,1080],"raw":"动态运行时装入。编译、链接后的装入模块的地址都是从0开始的。装入程序的时候把装入模块转入内存后，并不会立即把逻辑地址转换为物理地址，而是把地址转换推迟到需要执行的时候才进行，因此装入内存后的所有地址仍然是逻辑地址。这种装入方式需要一个**重定位寄存器**（存放模块再内存中的起始位置）的支持。"},{"type":"Paragraph","children":[{"type":"Str","value":"特点：","loc":{"start":{"line":65,"column":0},"end":{"line":65,"column":3}},"range":[1082,1085],"raw":"特点："}],"loc":{"start":{"line":65,"column":0},"end":{"line":65,"column":3}},"range":[1082,1085],"raw":"特点："},{"type":"List","ordered":false,"start":null,"spread":true,"children":[{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"允许程序再内存中发生移动。","loc":{"start":{"line":67,"column":2},"end":{"line":67,"column":15}},"range":[1089,1102],"raw":"允许程序再内存中发生移动。"}],"loc":{"start":{"line":67,"column":2},"end":{"line":67,"column":15}},"range":[1089,1102],"raw":"允许程序再内存中发生移动。"}],"loc":{"start":{"line":67,"column":0},"end":{"line":67,"column":15}},"range":[1087,1102],"raw":"- 允许程序再内存中发生移动。"},{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"可以把程序分配到不连续的存储区","loc":{"start":{"line":69,"column":2},"end":{"line":69,"column":17}},"range":[1106,1121],"raw":"可以把程序分配到不连续的存储区"}],"loc":{"start":{"line":69,"column":2},"end":{"line":69,"column":17}},"range":[1106,1121],"raw":"可以把程序分配到不连续的存储区"}],"loc":{"start":{"line":69,"column":0},"end":{"line":69,"column":17}},"range":[1104,1121],"raw":"- 可以把程序分配到不连续的存储区"},{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"程序运行时可以指装入一部分代码","loc":{"start":{"line":70,"column":2},"end":{"line":70,"column":17}},"range":[1124,1139],"raw":"程序运行时可以指装入一部分代码"}],"loc":{"start":{"line":70,"column":2},"end":{"line":70,"column":17}},"range":[1124,1139],"raw":"程序运行时可以指装入一部分代码"}],"loc":{"start":{"line":70,"column":0},"end":{"line":70,"column":17}},"range":[1122,1139],"raw":"- 程序运行时可以指装入一部分代码"},{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"可以在运行期间动态申请内存","loc":{"start":{"line":71,"column":2},"end":{"line":71,"column":15}},"range":[1142,1155],"raw":"可以在运行期间动态申请内存"}],"loc":{"start":{"line":71,"column":2},"end":{"line":71,"column":15}},"range":[1142,1155],"raw":"可以在运行期间动态申请内存"}],"loc":{"start":{"line":71,"column":0},"end":{"line":71,"column":15}},"range":[1140,1155],"raw":"- 可以在运行期间动态申请内存"},{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"便于程序段共享","loc":{"start":{"line":72,"column":2},"end":{"line":72,"column":9}},"range":[1158,1165],"raw":"便于程序段共享"}],"loc":{"start":{"line":72,"column":2},"end":{"line":72,"column":9}},"range":[1158,1165],"raw":"便于程序段共享"}],"loc":{"start":{"line":72,"column":0},"end":{"line":72,"column":9}},"range":[1156,1165],"raw":"- 便于程序段共享"},{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"可以向用户提供一个比存储空间大得多的地址空间","loc":{"start":{"line":73,"column":2},"end":{"line":73,"column":24}},"range":[1168,1190],"raw":"可以向用户提供一个比存储空间大得多的地址空间"}],"loc":{"start":{"line":73,"column":2},"end":{"line":73,"column":24}},"range":[1168,1190],"raw":"可以向用户提供一个比存储空间大得多的地址空间"}],"loc":{"start":{"line":73,"column":0},"end":{"line":73,"column":24}},"range":[1166,1190],"raw":"- 可以向用户提供一个比存储空间大得多的地址空间"}],"loc":{"start":{"line":67,"column":0},"end":{"line":73,"column":24}},"range":[1087,1190],"raw":"- 允许程序再内存中发生移动。\n\n- 可以把程序分配到不连续的存储区\n- 程序运行时可以指装入一部分代码\n- 可以在运行期间动态申请内存\n- 便于程序段共享\n- 可以向用户提供一个比存储空间大得多的地址空间"}],"loc":{"start":{"line":1,"column":0},"end":{"line":74,"column":0}},"range":[0,1191],"raw":"---\ntitle: '内存的基本概念'\ntags: ['操作系统','内存']\n---\n# 内存的基本概念\n\n内存是用于存放数据的硬件，程序执行前需要先放到内存里，才能被CPU处理。\n\n\n\n内存存储单元编址：\n\n按字节编址：每个存储单元大小为1字节\n\n按字编址：每个存储单元的大小为一个字，根据计算机不同，字的大小也不同\n\n\n\n## 相对地址和绝对地址\n\n相对地址：又称为逻辑地址，编译后，目标模块都是从0号单元开始编址，称为该目的模块的相对地址\n\n绝对地址：又称为物理地址，指内存中物理存储单元的地址\n\n*****\n\n## 写程序到程序运行\n\n1. 编译：将用户的源代码编译成若干个目标模块，把高级语言翻译成机器语言\n2. 链接：由链接程序把编译后的目标模块以及所需要的库函数链接在一起，形成一个完整的**装入模块**（例如windows中的.exe）\n3. 装入：由装入程序把装入模块装入内存运行（逻辑地址 $\\rightarrow$ 物理地址）\n\n### 链接方式\n\n#### 静态链接\n\n在程序运行之前，把各个模块需要的库函数链接成一个完整的可执行文件，之后不能再拆开\n\n#### 动态链接\n\n装入的时候，边装入边链接模块需要的库函数\n\n### 运行时动态链接\n\n在程序执行的过程中需要目标模块的时候，才对其进行链接，方便修改和更新，便于实现对目标模块的共享\n\n### 装入方式\n\n#### 绝对装入\n\n 如果在编译的时候就知道程序会被放到内存的那个位置，编译的时候将产生绝对地址的目标代码，装入程序将按照装入模块中的地址，将程序装入内存。\n\n缺点：灵活性低，只适用于单道程序环境\n\n#### 静态重定位\n\n静态重定位：又称为可重定位装入。编译、链接后的装入模块的地址都是从0开始的，指令中使用的地址、数据存放的地址都是相对于起始地址的逻辑地址，可以根据内存的使用情况，将装入模块装入到合适的位置，装入时对地址进行“重定位”，在装入时将逻辑地址变换为物理地址、\n\n特点：作业装入的时候，必须分配装入模块要求的全部内存空间，如果没有足够的内存空间，就不能装入该作业。作业一旦进入内存之后，运行期间就不可以移动，也不能再申请内存空间。\n\n#### 动态重定位\n\n动态运行时装入。编译、链接后的装入模块的地址都是从0开始的。装入程序的时候把装入模块转入内存后，并不会立即把逻辑地址转换为物理地址，而是把地址转换推迟到需要执行的时候才进行，因此装入内存后的所有地址仍然是逻辑地址。这种装入方式需要一个**重定位寄存器**（存放模块再内存中的起始位置）的支持。\n\n特点：\n\n- 允许程序再内存中发生移动。\n\n- 可以把程序分配到不连续的存储区\n- 程序运行时可以指装入一部分代码\n- 可以在运行期间动态申请内存\n- 便于程序段共享\n- 可以向用户提供一个比存储空间大得多的地址空间\n"},"catalogue":{"title":"内存的基本概念","json-path":"2020-08-16-内存管理.json","mdate":"2022-08-30T14:19:31.454Z","tags":["操作系统","内存"]}}