{"ast":{"type":"Document","children":[{"type":"Yaml","value":"title: 'TypeScript：tsconfig.json配置'\ntags: ['TypeScript', 'tsconfig', '前端']","loc":{"start":{"line":1,"column":0},"end":{"line":4,"column":3}},"range":[0,82],"raw":"---\ntitle: 'TypeScript：tsconfig.json配置'\ntags: ['TypeScript', 'tsconfig', '前端']\n---"},{"type":"Header","depth":1,"children":[{"type":"Str","value":"TypeScript配置文件tsconfig.json","loc":{"start":{"line":6,"column":2},"end":{"line":6,"column":29}},"range":[86,113],"raw":"TypeScript配置文件tsconfig.json"}],"loc":{"start":{"line":6,"column":0},"end":{"line":6,"column":29}},"range":[84,113],"raw":"# TypeScript配置文件tsconfig.json"},{"type":"Paragraph","children":[{"type":"Str","value":"tsconfig.json文件是typescript项目根目录中，配置编译选项和根文件的配置文件。","loc":{"start":{"line":8,"column":0},"end":{"line":8,"column":49}},"range":[115,164],"raw":"tsconfig.json文件是typescript项目根目录中，配置编译选项和根文件的配置文件。"}],"loc":{"start":{"line":8,"column":0},"end":{"line":8,"column":49}},"range":[115,164],"raw":"tsconfig.json文件是typescript项目根目录中，配置编译选项和根文件的配置文件。"},{"type":"Paragraph","children":[{"type":"Str","value":"如果在不指定编译配置文件的情况下直接调用","loc":{"start":{"line":10,"column":0},"end":{"line":10,"column":20}},"range":[166,186],"raw":"如果在不指定编译配置文件的情况下直接调用"},{"type":"Strong","children":[{"type":"Str","value":"tsc","loc":{"start":{"line":10,"column":22},"end":{"line":10,"column":25}},"range":[188,191],"raw":"tsc"}],"loc":{"start":{"line":10,"column":20},"end":{"line":10,"column":27}},"range":[186,193],"raw":"**tsc**"},{"type":"Str","value":"命令：","loc":{"start":{"line":10,"column":27},"end":{"line":10,"column":30}},"range":[193,196],"raw":"命令："}],"loc":{"start":{"line":10,"column":0},"end":{"line":10,"column":30}},"range":[166,196],"raw":"如果在不指定编译配置文件的情况下直接调用**tsc**命令："},{"type":"List","ordered":false,"start":null,"spread":false,"children":[{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"使用命令行参数“--project”指定一个包含tsconfig.json文件的项目目录","loc":{"start":{"line":12,"column":2},"end":{"line":12,"column":46}},"range":[200,244],"raw":"使用命令行参数“--project”指定一个包含tsconfig.json文件的项目目录"}],"loc":{"start":{"line":12,"column":2},"end":{"line":12,"column":46}},"range":[200,244],"raw":"使用命令行参数“--project”指定一个包含tsconfig.json文件的项目目录"}],"loc":{"start":{"line":12,"column":0},"end":{"line":12,"column":46}},"range":[198,244],"raw":"- 使用命令行参数“--project”指定一个包含tsconfig.json文件的项目目录"},{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"不适用上面的参数，也不指定配置文件时，tsc命令会逐层查找父级目录，直到查找到tsconfig.json文件","loc":{"start":{"line":13,"column":2},"end":{"line":13,"column":56}},"range":[247,301],"raw":"不适用上面的参数，也不指定配置文件时，tsc命令会逐层查找父级目录，直到查找到tsconfig.json文件"}],"loc":{"start":{"line":13,"column":2},"end":{"line":13,"column":56}},"range":[247,301],"raw":"不适用上面的参数，也不指定配置文件时，tsc命令会逐层查找父级目录，直到查找到tsconfig.json文件"}],"loc":{"start":{"line":13,"column":0},"end":{"line":13,"column":56}},"range":[245,301],"raw":"- 不适用上面的参数，也不指定配置文件时，tsc命令会逐层查找父级目录，直到查找到tsconfig.json文件"}],"loc":{"start":{"line":12,"column":0},"end":{"line":13,"column":56}},"range":[198,301],"raw":"- 使用命令行参数“--project”指定一个包含tsconfig.json文件的项目目录\n- 不适用上面的参数，也不指定配置文件时，tsc命令会逐层查找父级目录，直到查找到tsconfig.json文件"},{"type":"HorizontalRule","loc":{"start":{"line":15,"column":0},"end":{"line":15,"column":6}},"range":[303,309],"raw":"------"},{"type":"Header","depth":2,"children":[{"type":"Str","value":"编译器选项(CompilerOptions)","loc":{"start":{"line":17,"column":3},"end":{"line":17,"column":25}},"range":[314,336],"raw":"编译器选项(CompilerOptions)"}],"loc":{"start":{"line":17,"column":0},"end":{"line":17,"column":25}},"range":[311,336],"raw":"## 编译器选项(CompilerOptions)"},{"type":"Paragraph","children":[{"type":"Str","value":"文档地址：","loc":{"start":{"line":19,"column":0},"end":{"line":19,"column":5}},"range":[338,343],"raw":"文档地址："},{"type":"Link","title":null,"url":"https://www.tslang.cn/docs/handbook/compiler-options.html","children":[{"type":"Str","value":"编译选项","loc":{"start":{"line":19,"column":6},"end":{"line":19,"column":10}},"range":[344,348],"raw":"编译选项"}],"loc":{"start":{"line":19,"column":5},"end":{"line":19,"column":70}},"range":[343,408],"raw":"[编译选项](https://www.tslang.cn/docs/handbook/compiler-options.html)"}],"loc":{"start":{"line":19,"column":0},"end":{"line":19,"column":70}},"range":[338,408],"raw":"文档地址：[编译选项](https://www.tslang.cn/docs/handbook/compiler-options.html)"},{"type":"Html","value":"<div class=\"table-responsive\"><table class=\"table\"><thead><tr><th>选项</th><th>类型</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td><code>--allowJs</code></td><td><code>boolean</code></td><td><code>false</code></td><td>允许编译javascript文件。</td></tr><tr><td><code>--allowSyntheticDefaultImports</code></td><td><code>boolean</code></td><td><code>module === \"system\"</code>                                    或设置了<code>--esModuleInterop</code>                                    且<code>module</code>                                    不为<code>es2015</code>                                    /<code>esnext</code></td><td>允许从没有设置默认导出的模块中默认导入。这并不影响代码的输出，仅为了类型检查。</td></tr><tr><td><code>--allowUnreachableCode</code></td><td><code>boolean</code></td><td><code>false</code></td><td>不报告执行不到的代码错误。</td></tr><tr><td><code>--allowUnusedLabels</code></td><td><code>boolean</code></td><td><code>false</code></td><td>不报告未使用的标签错误。</td></tr><tr><td><code>--alwaysStrict</code></td><td><code>boolean</code></td><td><code>false</code></td><td>以严格模式解析并为每个源文件生成<code>\"use strict\"</code>语句</td></tr><tr><td><code>--baseUrl</code></td><td><code>string</code></td><td></td><td>解析非相对模块名的基准目录。查看<a href=\"./module-resolution.html#base-url\">模块解析文档</a>了解详情。</td></tr><tr><td><code>--charset</code></td><td><code>string</code></td><td><code>\"utf8\"</code></td><td>输入文件的字符集。</td></tr><tr><td><code>--checkJs</code></td><td><code>boolean</code></td><td><code>false</code></td><td>在<code>.js</code>文件中报告错误。与<code>--allowJs</code>配合使用。</td></tr><tr><td><code>--declaration</code><br><code>-d</code></td><td><code>boolean</code></td><td><code>false</code></td><td>生成相应的<code>.d.ts</code>文件。</td></tr><tr><td><code>--declarationDir</code></td><td><code>string</code></td><td></td><td>生成声明文件的输出路径。</td></tr><tr><td><code>--diagnostics</code></td><td><code>boolean</code></td><td><code>false</code></td><td>显示诊断信息。</td></tr><tr><td><code>--disableSizeLimit</code></td><td><code>boolean</code></td><td><code>false</code></td><td>禁用JavaScript工程体积大小的限制</td></tr><tr><td><code>--emitBOM</code></td><td><code>boolean</code></td><td><code>false</code></td><td>在输出文件的开头加入BOM头（UTF-8 Byte Order Mark）。</td></tr><tr><td><code>--emitDecoratorMetadata</code><sup>[1]</sup></td><td><code>boolean</code></td><td><code>false</code></td><td>给源码里的装饰器声明加上设计类型元数据。查看<a href=\"https://github.com/Microsoft/TypeScript/issues/2577\">issue #2577</a>了解更多信息。</td></tr><tr><td><code>--experimentalDecorators</code><sup>[1]</sup></td><td><code>boolean</code></td><td><code>false</code></td><td>启用实验性的ES装饰器。</td></tr><tr><td><code>--extendedDiagnostics</code></td><td><code>boolean</code></td><td><code>false</code></td><td>显示详细的诊段信息。</td></tr><tr><td><code>--forceConsistentCasingInFileNames</code></td><td><code>boolean</code></td><td><code>false</code></td><td>禁止对同一个文件的不一致的引用。</td></tr><tr><td><code>--help</code><br><code>-h</code></td><td></td><td></td><td>打印帮助信息。</td></tr><tr><td><code>--importHelpers</code></td><td><code>string</code></td><td></td><td>从<a href=\"https://www.npmjs.com/package/tslib\"><code>tslib</code></a>导入辅助工具函数（比如<code>__extends</code>，<code>__rest</code>等）</td></tr><tr><td><code>--inlineSourceMap</code></td><td><code>boolean</code></td><td><code>false</code></td><td>生成单个sourcemaps文件，而不是将每sourcemaps生成不同的文件。</td></tr><tr><td><code>--inlineSources</code></td><td><code>boolean</code></td><td><code>false</code></td><td>将代码与sourcemaps生成到一个文件中，要求同时设置了<code>--inlineSourceMap</code>或<code>--sourceMap</code>属性。</td></tr><tr><td><code>--init</code></td><td></td><td></td><td>初始化TypeScript项目并创建一个<code>tsconfig.json</code>文件。</td></tr><tr><td><code>--isolatedModules</code></td><td><code>boolean</code></td><td><code>false</code></td><td>将每个文件作为单独的模块（与“ts.transpileModule”类似）。</td></tr><tr><td><code>--jsx</code></td><td><code>string</code></td><td><code>\"Preserve\"</code></td><td>在<code>.tsx</code>文件里支持JSX：<code>\"React\"</code>或<code>\"Preserve\"</code>。查看<a href=\"./jsx.html\">JSX</a>。</td></tr><tr><td><code>--jsxFactory</code></td><td><code>string</code></td><td><code>\"React.createElement\"</code></td><td>指定生成目标为react JSX时，使用的JSX工厂函数，比如<code>React.createElement</code>或<code>h</code>。</td></tr><tr><td><code>--lib</code></td><td><code>string[]</code></td><td></td><td>编译过程中需要引入的库文件的列表。<br>可能的值为：<br>►<code>ES5</code><br>►<code>ES6</code><br>►<code>ES2015</code><br>►<code>ES7</code><br>►<code>ES2016</code><br>►<code>ES2017</code><br>►<code>ES2018</code><br>►<code>ESNext</code><br>►<code>DOM</code><br>►<code>DOM.Iterable</code><br>►<code>WebWorker</code><br>►<code>ScriptHost</code><br>►<code>ES2015.Core</code><br>►<code>ES2015.Collection</code><br>►<code>ES2015.Generator</code><br>►<code>ES2015.Iterable</code><br>►<code>ES2015.Promise</code><br>►<code>ES2015.Proxy</code><br>►<code>ES2015.Reflect</code><br>►<code>ES2015.Symbol</code><br>►<code>ES2015.Symbol.WellKnown</code><br>►<code>ES2016.Array.Include</code><br>►<code>ES2017.object</code><br>►<code>ES2017.Intl</code><br>►<code>ES2017.SharedMemory</code><br>►<code>ES2017.String</code><br>►<code>ES2017.TypedArrays</code><br>►<code>ES2018.Intl</code><br>►<code>ES2018.Promise</code><br>►<code>ES2018.RegExp</code><br>►<code>ESNext.AsyncIterable</code><br>►<code>ESNext.Array</code><br>►<code>ESNext.Intl</code><br>►<code>ESNext.Symbol</code><br><br> 注意：如果<code>--lib</code>没有指定默认注入的库的列表。默认注入的库为：<br>                                    ► 针对于<code>--target ES5</code>：<code>DOM，ES5，ScriptHost</code><br> ► 针对于<code>--target ES6</code>：<code>DOM，ES6，DOM.Iterable，ScriptHost</code></td></tr><tr><td><code>--listEmittedFiles</code></td><td><code>boolean</code></td><td><code>false</code></td><td>打印出编译后生成文件的名字。</td></tr><tr><td><code>--listFiles</code></td><td><code>boolean</code></td><td><code>false</code></td><td>编译过程中打印文件名。</td></tr><tr><td><code>--locale</code></td><td><code>string</code></td><td><em>(platform specific)</em></td><td>显示错误信息时使用的语言，比如：en-us。</td></tr><tr><td><code>--mapRoot</code></td><td><code>string</code></td><td></td><td>为调试器指定指定sourcemap文件的路径，而不是使用生成时的路径。当<code>.map</code>文件是在运行时指定的，并不同于<code>js</code>文件的地址时使用这个标记。指定的路径会嵌入到<code>sourceMap</code>里告诉调试器到哪里去找它们。</td></tr><tr><td><code>--maxNodeModuleJsDepth</code></td><td><code>number</code></td><td><code>0</code></td><td>node_modules依赖的最大搜索深度并加载JavaScript文件。仅适用于<code>--allowJs</code>。</td></tr><tr><td><code>--module</code><br><code>-m</code></td><td><code>string</code></td><td><code>target === \"ES6\" ? \"ES6\" : \"commonjs\"</code></td><td style=\"word-break: break-word;\">指定生成哪个模块系统代码：<code>\"None\"</code>，<code>\"CommonJS\"</code>，<code>\"AMD\"</code>，<code>\"System\"</code>，<code>\"UMD\"</code>，<code>\"ES6\"</code>或<code>\"ES2015\"</code>。<br>► 只有<code>\"AMD\"</code>和<code>\"System\"</code>能和<code>--outFile</code>一起使用。<br>►<code>\"ES6\"</code>和<code>\"ES2015\"</code>可使用在目标输出为<code>\"ES5\"</code>或更低的情况下。</td></tr><tr><td><code>--moduleResolution</code></td><td><code>string</code></td><td><code>module === \"AMD\" or \"System\" or \"ES6\" ? \"Classic\" : \"Node\"</code></td><td>                                    决定如何处理模块。或者是<code>\"Node\"</code>对于Node.js/io.js，或者是<code>\"Classic\"</code>（默认）。查看<a href=\"./module-resolution.html\">模块解析</a>了解详情。</td></tr><tr><td><code>--newLine</code></td><td><code>string</code></td><td><em>(platform specific)</em></td><td>当生成文件时指定行结束符：<code>\"crlf\"</code>（windows）或<code>\"lf\"</code>（unix）。</td></tr><tr><td><code>--noEmit</code></td><td><code>boolean</code></td><td><code>false</code></td><td>不生成输出文件。</td></tr><tr><td><code>--noEmitHelpers</code></td><td><code>boolean</code></td><td><code>false</code></td><td>不在输出文件中生成用户自定义的帮助函数代码，如<code>__extends</code>。</td></tr><tr><td><code>--noEmitOnError</code></td><td><code>boolean</code></td><td><code>false</code></td><td>报错时不生成输出文件。</td></tr><tr><td><code>--noErrorTruncation</code></td><td><code>boolean</code></td><td><code>false</code></td><td>不截短错误消息。</td></tr><tr><td><code>--noFallthroughCasesInSwitch</code></td><td><code>boolean</code></td><td><code>false</code></td><td>报告switch语句的fallthrough错误。（即，不允许switch的case语句贯穿）</td></tr><tr><td><code>--noImplicitAny</code></td><td><code>boolean</code></td><td><code>false</code></td><td>在表达式和声明上有隐含的<code>any</code>类型时报错。</td></tr><tr><td><code>--noImplicitReturns</code></td><td><code>boolean</code></td><td><code>false</code></td><td>不是函数的所有返回路径都有返回值时报错。</td></tr><tr><td><code>--noImplicitThis</code></td><td><code>boolean</code></td><td><code>false</code></td><td>当<code>this</code>表达式的值为<code>any</code>类型的时候，生成一个错误。</td></tr><tr><td><code>--noImplicitUseStrict</code></td><td><code>boolean</code></td><td><code>false</code></td><td>模块输出中不包含<code>\"use strict\"</code>指令。</td></tr><tr><td><code>--noLib</code></td><td><code>boolean</code></td><td><code>false</code></td><td>不包含默认的库文件（<code>lib.d.ts</code>）。</td></tr><tr><td><code>--noResolve</code></td><td><code>boolean</code></td><td><code>false</code></td><td>不把<code>/// &lt;reference``&gt;</code>或模块导入的文件加到编译文件列表。</td></tr><tr><td><code>--noStrictGenericChecks</code></td><td><code>boolean</code></td><td><code>false</code></td><td>禁用在函数类型里对泛型签名进行严格检查。</td></tr><tr><td><code>--noUnusedLocals</code></td><td><code>boolean</code></td><td><code>false</code></td><td>若有未使用的局部变量则抛错。</td></tr><tr><td><code>--noUnusedParameters</code></td><td><code>boolean</code></td><td><code>false</code></td><td>若有未使用的参数则抛错。</td></tr><tr><td><s><code>--out</code></s></td><td><code>string</code></td><td></td><td>弃用。使用<code>--outFile</code> 代替。</td></tr><tr><td><code>--outDir</code></td><td><code>string</code></td><td></td><td>重定向输出目录。</td></tr><tr><td><code>--outFile</code></td><td><code>string</code></td><td></td><td>将输出文件合并为一个文件。合并的顺序是根据传入编译器的文件顺序和<code>///&lt;reference``&gt;</code>和<code>import</code>的文件顺序决定的。查看输出文件顺序文件了解详情。</td></tr><tr><td><code>paths</code><sup>[2]</sup></td><td><code>Object</code></td><td></td><td>模块名到基于<code>baseUrl</code>的路径映射的列表。查看<a href=\"./module-resolution.html#path-mapping\">模块解析文档</a>了解详情。</td></tr><tr><td><code>--preserveConstEnums</code></td><td><code>boolean</code></td><td><code>false</code></td><td>保留<code>const</code>和<code>enum</code>声明。查看<a href=\"https://github.com/Microsoft/TypeScript/blob/master/doc/spec.md#94-constant-enum-declarations\">const enums documentation</a>了解详情。</td></tr><tr><td><code>--preserveSymlinks</code></td><td><code>boolean</code></td><td><code>false</code></td><td>不把符号链接解析为其真实路径；将符号链接文件视为真正的文件。</td></tr><tr><td><code>--preserveWatchOutput</code></td><td><code>boolean</code></td><td><code>false</code></td><td>保留watch模式下过时的控制台输出。</td></tr><tr><td><code>--pretty</code><sup>[1]</sup></td><td><code>boolean</code></td><td><code>false</code></td><td>给错误和消息设置样式，使用颜色和上下文。</td></tr><tr><td><code>--project</code><br><code>-p</code></td><td><code>string</code></td><td></td><td>编译指定目录下的项目。这个目录应该包含一个<code>tsconfig.json</code>文件来管理编译。查看<a href=\"./tsconfig-json.html\">tsconfig.json</a>文档了解更多信息。</td></tr><tr><td><code>--reactNamespace</code></td><td><code>string</code></td><td><code>\"React\"</code></td><td>当目标为生成<code>\"react\"</code> JSX时，指定<code>createElement</code>和<code>__spread</code>的调用对象</td></tr><tr><td><code>--removeComments</code></td><td><code>boolean</code></td><td><code>false</code></td><td>删除所有注释，除了以<code>/!*</code>开头的版权信息。</td></tr><tr><td><code>--rootDir</code></td><td><code>string</code></td><td><em>(common root directory is computed from the list of input files)</em></td><td>仅用来控制输出的目录结构<code>--outDir</code>。</td></tr><tr><td><code>rootDirs</code><sup>[2]</sup></td><td><code>string[]</code></td><td></td><td><i>根（root）</i>文件夹列表，表示运行时组合工程结构的内容。查看<a href=\"./module-resolution.html#virtual-directories-with-rootdirs\">模块解析文档</a>了解详情。</td></tr><tr><td><code>--skipDefaultLibCheck</code></td><td><code>boolean</code></td><td><code>false</code></td><td>忽略<a href=\"./triple-slash-directives.html#-reference-no-default-libtrue\">库的默认声明文件</a>的类型检查。</td></tr><tr><td><code>--skipLibCheck</code></td><td><code>boolean</code></td><td><code>false</code></td><td>忽略所有的声明文件（<code>*.d.ts</code>）的类型检查。</td></tr><tr><td><code>--sourceMap</code></td><td><code>boolean</code></td><td><code>false</code></td><td>生成相应的<code>.map</code>文件。</td></tr><tr><td><code>--sourceRoot</code></td><td><code>string</code></td><td></td><td>指定TypeScript源文件的路径，以便调试器定位。当TypeScript文件的位置是在运行时指定时使用此标记。路径信息会被加到<code>sourceMap</code>里。</td></tr><tr><td><code>--strict</code></td><td><code>boolean</code></td><td><code>false</code></td><td>启用所有严格类型检查选项。<br>启用<code>--strict</code>相当于启用<code>--noImplicitAny</code>,<code>--noImplicitThis</code>,<code>--alwaysStrict</code>，<code>--strictNullChecks</code>和<code>--strictFunctionTypes</code>和<code>--strictPropertyInitialization</code>。</td></tr><tr><td><code>--strictFunctionTypes</code></td><td><code>boolean</code></td><td><code>false</code></td><td>禁用函数参数双向协变检查。</td></tr><tr><td><code>--strictPropertyInitialization</code></td><td><code>boolean</code></td><td><code>false</code></td><td>确保类的非<code>undefined</code>属性已经在构造函数里初始化。若要令此选项生效，需要同时启用<code>--strictNullChecks</code>。</td></tr><tr><td><code>--strictNullChecks</code></td><td><code>boolean</code></td><td><code>false</code></td><td>在严格的<code>null</code>检查模式下，<code>null</code>和<code>undefined</code>值不包含在任何类型里，只允许用它们自己和<code>any</code>来赋值（有个例外，<code>undefined</code>可以赋值到<code>void</code>）。</td></tr><tr><td><code>--stripInternal</code><sup>[1]</sup></td><td><code>boolean</code></td><td><code>false</code></td><td>不对具有<code></code> JSDoc注解的代码生成代码。</td></tr><tr><td><code>--suppressExcessPropertyErrors</code><sup>[1]</sup></td><td><code>boolean</code></td><td><code>false</code></td><td>阻止对对象字面量的额外属性检查。</td></tr><tr><td><code>--suppressImplicitAnyIndexErrors</code></td><td><code>boolean</code></td><td><code>false</code></td><td>阻止<code>--noImplicitAny</code>对缺少索引签名的索引对象报错。查看<a href=\"https://github.com/Microsoft/TypeScript/issues/1232#issuecomment-64510362\">issue #1232</a>了解详情。</td></tr><tr><td><code>--target</code><br><code>-t</code></td><td><code>string</code></td><td><code>\"ES3\"</code></td><td style=\"word-break: break-word;\">指定ECMAScript目标版本<code>\"ES3\"</code>（默认），<code>\"ES5\"</code>，<code>\"ES6\"</code>/<code>\"ES2015\"</code>，<code>\"ES2016\"</code>，<code>\"ES2017\"</code>或<code>\"ESNext\"</code>。<br><br> 注意：<code>\"ESNext\"</code>最新的生成目标列表为<a href=\"https://github.com/tc39/proposals\">ES proposed features</a></td></tr><tr><td><code>--traceResolution</code></td><td><code>boolean</code></td><td><code>false</code></td><td>生成模块解析日志信息</td></tr><tr><td><code>--types</code></td><td><code>string[]</code></td><td></td><td>要包含的类型声明文件名列表。查看<a href=\"./tsconfig-json.html#types-typeroots-and-types\">@types，--typeRoots和--types</a>章节了解详细信息。</td></tr><tr><td><code>--typeRoots</code></td><td><code>string[]</code></td><td></td><td>要包含的类型声明文件路径列表。查看<a href=\"./tsconfig-json.html#types-typeroots-and-types\">@types，--typeRoots和--types</a>章节了解详细信息。</td></tr><tr><td><code>--version</code><br><code>-v</code></td><td></td><td></td><td>打印编译器版本号。</td></tr><tr><td><code>--watch</code><br><code>-w</code></td><td></td><td></td><td>在监视模式下运行编译器。会监视输出文件，在它们改变时重新编译。监视文件和目录的具体实现可以通过环境变量进行配置。详情请看<a href=\"./configuring-watch.html\">配置 Watch</a>。</td></tr></tbody></table></div>","loc":{"start":{"line":21,"column":0},"end":{"line":21,"column":15062}},"range":[410,15472],"raw":"<div class=\"table-responsive\"><table class=\"table\"><thead><tr><th>选项</th><th>类型</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td><code>--allowJs</code></td><td><code>boolean</code></td><td><code>false</code></td><td>允许编译javascript文件。</td></tr><tr><td><code>--allowSyntheticDefaultImports</code></td><td><code>boolean</code></td><td><code>module === \"system\"</code>                                    或设置了<code>--esModuleInterop</code>                                    且<code>module</code>                                    不为<code>es2015</code>                                    /<code>esnext</code></td><td>允许从没有设置默认导出的模块中默认导入。这并不影响代码的输出，仅为了类型检查。</td></tr><tr><td><code>--allowUnreachableCode</code></td><td><code>boolean</code></td><td><code>false</code></td><td>不报告执行不到的代码错误。</td></tr><tr><td><code>--allowUnusedLabels</code></td><td><code>boolean</code></td><td><code>false</code></td><td>不报告未使用的标签错误。</td></tr><tr><td><code>--alwaysStrict</code></td><td><code>boolean</code></td><td><code>false</code></td><td>以严格模式解析并为每个源文件生成<code>\"use strict\"</code>语句</td></tr><tr><td><code>--baseUrl</code></td><td><code>string</code></td><td></td><td>解析非相对模块名的基准目录。查看<a href=\"./module-resolution.html#base-url\">模块解析文档</a>了解详情。</td></tr><tr><td><code>--charset</code></td><td><code>string</code></td><td><code>\"utf8\"</code></td><td>输入文件的字符集。</td></tr><tr><td><code>--checkJs</code></td><td><code>boolean</code></td><td><code>false</code></td><td>在<code>.js</code>文件中报告错误。与<code>--allowJs</code>配合使用。</td></tr><tr><td><code>--declaration</code><br><code>-d</code></td><td><code>boolean</code></td><td><code>false</code></td><td>生成相应的<code>.d.ts</code>文件。</td></tr><tr><td><code>--declarationDir</code></td><td><code>string</code></td><td></td><td>生成声明文件的输出路径。</td></tr><tr><td><code>--diagnostics</code></td><td><code>boolean</code></td><td><code>false</code></td><td>显示诊断信息。</td></tr><tr><td><code>--disableSizeLimit</code></td><td><code>boolean</code></td><td><code>false</code></td><td>禁用JavaScript工程体积大小的限制</td></tr><tr><td><code>--emitBOM</code></td><td><code>boolean</code></td><td><code>false</code></td><td>在输出文件的开头加入BOM头（UTF-8 Byte Order Mark）。</td></tr><tr><td><code>--emitDecoratorMetadata</code><sup>[1]</sup></td><td><code>boolean</code></td><td><code>false</code></td><td>给源码里的装饰器声明加上设计类型元数据。查看<a href=\"https://github.com/Microsoft/TypeScript/issues/2577\">issue #2577</a>了解更多信息。</td></tr><tr><td><code>--experimentalDecorators</code><sup>[1]</sup></td><td><code>boolean</code></td><td><code>false</code></td><td>启用实验性的ES装饰器。</td></tr><tr><td><code>--extendedDiagnostics</code></td><td><code>boolean</code></td><td><code>false</code></td><td>显示详细的诊段信息。</td></tr><tr><td><code>--forceConsistentCasingInFileNames</code></td><td><code>boolean</code></td><td><code>false</code></td><td>禁止对同一个文件的不一致的引用。</td></tr><tr><td><code>--help</code><br><code>-h</code></td><td></td><td></td><td>打印帮助信息。</td></tr><tr><td><code>--importHelpers</code></td><td><code>string</code></td><td></td><td>从<a href=\"https://www.npmjs.com/package/tslib\"><code>tslib</code></a>导入辅助工具函数（比如<code>__extends</code>，<code>__rest</code>等）</td></tr><tr><td><code>--inlineSourceMap</code></td><td><code>boolean</code></td><td><code>false</code></td><td>生成单个sourcemaps文件，而不是将每sourcemaps生成不同的文件。</td></tr><tr><td><code>--inlineSources</code></td><td><code>boolean</code></td><td><code>false</code></td><td>将代码与sourcemaps生成到一个文件中，要求同时设置了<code>--inlineSourceMap</code>或<code>--sourceMap</code>属性。</td></tr><tr><td><code>--init</code></td><td></td><td></td><td>初始化TypeScript项目并创建一个<code>tsconfig.json</code>文件。</td></tr><tr><td><code>--isolatedModules</code></td><td><code>boolean</code></td><td><code>false</code></td><td>将每个文件作为单独的模块（与“ts.transpileModule”类似）。</td></tr><tr><td><code>--jsx</code></td><td><code>string</code></td><td><code>\"Preserve\"</code></td><td>在<code>.tsx</code>文件里支持JSX：<code>\"React\"</code>或<code>\"Preserve\"</code>。查看<a href=\"./jsx.html\">JSX</a>。</td></tr><tr><td><code>--jsxFactory</code></td><td><code>string</code></td><td><code>\"React.createElement\"</code></td><td>指定生成目标为react JSX时，使用的JSX工厂函数，比如<code>React.createElement</code>或<code>h</code>。</td></tr><tr><td><code>--lib</code></td><td><code>string[]</code></td><td></td><td>编译过程中需要引入的库文件的列表。<br>可能的值为：<br>►<code>ES5</code><br>►<code>ES6</code><br>►<code>ES2015</code><br>►<code>ES7</code><br>►<code>ES2016</code><br>►<code>ES2017</code><br>►<code>ES2018</code><br>►<code>ESNext</code><br>►<code>DOM</code><br>►<code>DOM.Iterable</code><br>►<code>WebWorker</code><br>►<code>ScriptHost</code><br>►<code>ES2015.Core</code><br>►<code>ES2015.Collection</code><br>►<code>ES2015.Generator</code><br>►<code>ES2015.Iterable</code><br>►<code>ES2015.Promise</code><br>►<code>ES2015.Proxy</code><br>►<code>ES2015.Reflect</code><br>►<code>ES2015.Symbol</code><br>►<code>ES2015.Symbol.WellKnown</code><br>►<code>ES2016.Array.Include</code><br>►<code>ES2017.object</code><br>►<code>ES2017.Intl</code><br>►<code>ES2017.SharedMemory</code><br>►<code>ES2017.String</code><br>►<code>ES2017.TypedArrays</code><br>►<code>ES2018.Intl</code><br>►<code>ES2018.Promise</code><br>►<code>ES2018.RegExp</code><br>►<code>ESNext.AsyncIterable</code><br>►<code>ESNext.Array</code><br>►<code>ESNext.Intl</code><br>►<code>ESNext.Symbol</code><br><br> 注意：如果<code>--lib</code>没有指定默认注入的库的列表。默认注入的库为：<br>                                    ► 针对于<code>--target ES5</code>：<code>DOM，ES5，ScriptHost</code><br> ► 针对于<code>--target ES6</code>：<code>DOM，ES6，DOM.Iterable，ScriptHost</code></td></tr><tr><td><code>--listEmittedFiles</code></td><td><code>boolean</code></td><td><code>false</code></td><td>打印出编译后生成文件的名字。</td></tr><tr><td><code>--listFiles</code></td><td><code>boolean</code></td><td><code>false</code></td><td>编译过程中打印文件名。</td></tr><tr><td><code>--locale</code></td><td><code>string</code></td><td><em>(platform specific)</em></td><td>显示错误信息时使用的语言，比如：en-us。</td></tr><tr><td><code>--mapRoot</code></td><td><code>string</code></td><td></td><td>为调试器指定指定sourcemap文件的路径，而不是使用生成时的路径。当<code>.map</code>文件是在运行时指定的，并不同于<code>js</code>文件的地址时使用这个标记。指定的路径会嵌入到<code>sourceMap</code>里告诉调试器到哪里去找它们。</td></tr><tr><td><code>--maxNodeModuleJsDepth</code></td><td><code>number</code></td><td><code>0</code></td><td>node_modules依赖的最大搜索深度并加载JavaScript文件。仅适用于<code>--allowJs</code>。</td></tr><tr><td><code>--module</code><br><code>-m</code></td><td><code>string</code></td><td><code>target === \"ES6\" ? \"ES6\" : \"commonjs\"</code></td><td style=\"word-break: break-word;\">指定生成哪个模块系统代码：<code>\"None\"</code>，<code>\"CommonJS\"</code>，<code>\"AMD\"</code>，<code>\"System\"</code>，<code>\"UMD\"</code>，<code>\"ES6\"</code>或<code>\"ES2015\"</code>。<br>► 只有<code>\"AMD\"</code>和<code>\"System\"</code>能和<code>--outFile</code>一起使用。<br>►<code>\"ES6\"</code>和<code>\"ES2015\"</code>可使用在目标输出为<code>\"ES5\"</code>或更低的情况下。</td></tr><tr><td><code>--moduleResolution</code></td><td><code>string</code></td><td><code>module === \"AMD\" or \"System\" or \"ES6\" ? \"Classic\" : \"Node\"</code></td><td>                                    决定如何处理模块。或者是<code>\"Node\"</code>对于Node.js/io.js，或者是<code>\"Classic\"</code>（默认）。查看<a href=\"./module-resolution.html\">模块解析</a>了解详情。</td></tr><tr><td><code>--newLine</code></td><td><code>string</code></td><td><em>(platform specific)</em></td><td>当生成文件时指定行结束符：<code>\"crlf\"</code>（windows）或<code>\"lf\"</code>（unix）。</td></tr><tr><td><code>--noEmit</code></td><td><code>boolean</code></td><td><code>false</code></td><td>不生成输出文件。</td></tr><tr><td><code>--noEmitHelpers</code></td><td><code>boolean</code></td><td><code>false</code></td><td>不在输出文件中生成用户自定义的帮助函数代码，如<code>__extends</code>。</td></tr><tr><td><code>--noEmitOnError</code></td><td><code>boolean</code></td><td><code>false</code></td><td>报错时不生成输出文件。</td></tr><tr><td><code>--noErrorTruncation</code></td><td><code>boolean</code></td><td><code>false</code></td><td>不截短错误消息。</td></tr><tr><td><code>--noFallthroughCasesInSwitch</code></td><td><code>boolean</code></td><td><code>false</code></td><td>报告switch语句的fallthrough错误。（即，不允许switch的case语句贯穿）</td></tr><tr><td><code>--noImplicitAny</code></td><td><code>boolean</code></td><td><code>false</code></td><td>在表达式和声明上有隐含的<code>any</code>类型时报错。</td></tr><tr><td><code>--noImplicitReturns</code></td><td><code>boolean</code></td><td><code>false</code></td><td>不是函数的所有返回路径都有返回值时报错。</td></tr><tr><td><code>--noImplicitThis</code></td><td><code>boolean</code></td><td><code>false</code></td><td>当<code>this</code>表达式的值为<code>any</code>类型的时候，生成一个错误。</td></tr><tr><td><code>--noImplicitUseStrict</code></td><td><code>boolean</code></td><td><code>false</code></td><td>模块输出中不包含<code>\"use strict\"</code>指令。</td></tr><tr><td><code>--noLib</code></td><td><code>boolean</code></td><td><code>false</code></td><td>不包含默认的库文件（<code>lib.d.ts</code>）。</td></tr><tr><td><code>--noResolve</code></td><td><code>boolean</code></td><td><code>false</code></td><td>不把<code>/// &lt;reference``&gt;</code>或模块导入的文件加到编译文件列表。</td></tr><tr><td><code>--noStrictGenericChecks</code></td><td><code>boolean</code></td><td><code>false</code></td><td>禁用在函数类型里对泛型签名进行严格检查。</td></tr><tr><td><code>--noUnusedLocals</code></td><td><code>boolean</code></td><td><code>false</code></td><td>若有未使用的局部变量则抛错。</td></tr><tr><td><code>--noUnusedParameters</code></td><td><code>boolean</code></td><td><code>false</code></td><td>若有未使用的参数则抛错。</td></tr><tr><td><s><code>--out</code></s></td><td><code>string</code></td><td></td><td>弃用。使用<code>--outFile</code> 代替。</td></tr><tr><td><code>--outDir</code></td><td><code>string</code></td><td></td><td>重定向输出目录。</td></tr><tr><td><code>--outFile</code></td><td><code>string</code></td><td></td><td>将输出文件合并为一个文件。合并的顺序是根据传入编译器的文件顺序和<code>///&lt;reference``&gt;</code>和<code>import</code>的文件顺序决定的。查看输出文件顺序文件了解详情。</td></tr><tr><td><code>paths</code><sup>[2]</sup></td><td><code>Object</code></td><td></td><td>模块名到基于<code>baseUrl</code>的路径映射的列表。查看<a href=\"./module-resolution.html#path-mapping\">模块解析文档</a>了解详情。</td></tr><tr><td><code>--preserveConstEnums</code></td><td><code>boolean</code></td><td><code>false</code></td><td>保留<code>const</code>和<code>enum</code>声明。查看<a href=\"https://github.com/Microsoft/TypeScript/blob/master/doc/spec.md#94-constant-enum-declarations\">const enums documentation</a>了解详情。</td></tr><tr><td><code>--preserveSymlinks</code></td><td><code>boolean</code></td><td><code>false</code></td><td>不把符号链接解析为其真实路径；将符号链接文件视为真正的文件。</td></tr><tr><td><code>--preserveWatchOutput</code></td><td><code>boolean</code></td><td><code>false</code></td><td>保留watch模式下过时的控制台输出。</td></tr><tr><td><code>--pretty</code><sup>[1]</sup></td><td><code>boolean</code></td><td><code>false</code></td><td>给错误和消息设置样式，使用颜色和上下文。</td></tr><tr><td><code>--project</code><br><code>-p</code></td><td><code>string</code></td><td></td><td>编译指定目录下的项目。这个目录应该包含一个<code>tsconfig.json</code>文件来管理编译。查看<a href=\"./tsconfig-json.html\">tsconfig.json</a>文档了解更多信息。</td></tr><tr><td><code>--reactNamespace</code></td><td><code>string</code></td><td><code>\"React\"</code></td><td>当目标为生成<code>\"react\"</code> JSX时，指定<code>createElement</code>和<code>__spread</code>的调用对象</td></tr><tr><td><code>--removeComments</code></td><td><code>boolean</code></td><td><code>false</code></td><td>删除所有注释，除了以<code>/!*</code>开头的版权信息。</td></tr><tr><td><code>--rootDir</code></td><td><code>string</code></td><td><em>(common root directory is computed from the list of input files)</em></td><td>仅用来控制输出的目录结构<code>--outDir</code>。</td></tr><tr><td><code>rootDirs</code><sup>[2]</sup></td><td><code>string[]</code></td><td></td><td><i>根（root）</i>文件夹列表，表示运行时组合工程结构的内容。查看<a href=\"./module-resolution.html#virtual-directories-with-rootdirs\">模块解析文档</a>了解详情。</td></tr><tr><td><code>--skipDefaultLibCheck</code></td><td><code>boolean</code></td><td><code>false</code></td><td>忽略<a href=\"./triple-slash-directives.html#-reference-no-default-libtrue\">库的默认声明文件</a>的类型检查。</td></tr><tr><td><code>--skipLibCheck</code></td><td><code>boolean</code></td><td><code>false</code></td><td>忽略所有的声明文件（<code>*.d.ts</code>）的类型检查。</td></tr><tr><td><code>--sourceMap</code></td><td><code>boolean</code></td><td><code>false</code></td><td>生成相应的<code>.map</code>文件。</td></tr><tr><td><code>--sourceRoot</code></td><td><code>string</code></td><td></td><td>指定TypeScript源文件的路径，以便调试器定位。当TypeScript文件的位置是在运行时指定时使用此标记。路径信息会被加到<code>sourceMap</code>里。</td></tr><tr><td><code>--strict</code></td><td><code>boolean</code></td><td><code>false</code></td><td>启用所有严格类型检查选项。<br>启用<code>--strict</code>相当于启用<code>--noImplicitAny</code>,<code>--noImplicitThis</code>,<code>--alwaysStrict</code>，<code>--strictNullChecks</code>和<code>--strictFunctionTypes</code>和<code>--strictPropertyInitialization</code>。</td></tr><tr><td><code>--strictFunctionTypes</code></td><td><code>boolean</code></td><td><code>false</code></td><td>禁用函数参数双向协变检查。</td></tr><tr><td><code>--strictPropertyInitialization</code></td><td><code>boolean</code></td><td><code>false</code></td><td>确保类的非<code>undefined</code>属性已经在构造函数里初始化。若要令此选项生效，需要同时启用<code>--strictNullChecks</code>。</td></tr><tr><td><code>--strictNullChecks</code></td><td><code>boolean</code></td><td><code>false</code></td><td>在严格的<code>null</code>检查模式下，<code>null</code>和<code>undefined</code>值不包含在任何类型里，只允许用它们自己和<code>any</code>来赋值（有个例外，<code>undefined</code>可以赋值到<code>void</code>）。</td></tr><tr><td><code>--stripInternal</code><sup>[1]</sup></td><td><code>boolean</code></td><td><code>false</code></td><td>不对具有<code></code> JSDoc注解的代码生成代码。</td></tr><tr><td><code>--suppressExcessPropertyErrors</code><sup>[1]</sup></td><td><code>boolean</code></td><td><code>false</code></td><td>阻止对对象字面量的额外属性检查。</td></tr><tr><td><code>--suppressImplicitAnyIndexErrors</code></td><td><code>boolean</code></td><td><code>false</code></td><td>阻止<code>--noImplicitAny</code>对缺少索引签名的索引对象报错。查看<a href=\"https://github.com/Microsoft/TypeScript/issues/1232#issuecomment-64510362\">issue #1232</a>了解详情。</td></tr><tr><td><code>--target</code><br><code>-t</code></td><td><code>string</code></td><td><code>\"ES3\"</code></td><td style=\"word-break: break-word;\">指定ECMAScript目标版本<code>\"ES3\"</code>（默认），<code>\"ES5\"</code>，<code>\"ES6\"</code>/<code>\"ES2015\"</code>，<code>\"ES2016\"</code>，<code>\"ES2017\"</code>或<code>\"ESNext\"</code>。<br><br> 注意：<code>\"ESNext\"</code>最新的生成目标列表为<a href=\"https://github.com/tc39/proposals\">ES proposed features</a></td></tr><tr><td><code>--traceResolution</code></td><td><code>boolean</code></td><td><code>false</code></td><td>生成模块解析日志信息</td></tr><tr><td><code>--types</code></td><td><code>string[]</code></td><td></td><td>要包含的类型声明文件名列表。查看<a href=\"./tsconfig-json.html#types-typeroots-and-types\">@types，--typeRoots和--types</a>章节了解详细信息。</td></tr><tr><td><code>--typeRoots</code></td><td><code>string[]</code></td><td></td><td>要包含的类型声明文件路径列表。查看<a href=\"./tsconfig-json.html#types-typeroots-and-types\">@types，--typeRoots和--types</a>章节了解详细信息。</td></tr><tr><td><code>--version</code><br><code>-v</code></td><td></td><td></td><td>打印编译器版本号。</td></tr><tr><td><code>--watch</code><br><code>-w</code></td><td></td><td></td><td>在监视模式下运行编译器。会监视输出文件，在它们改变时重新编译。监视文件和目录的具体实现可以通过环境变量进行配置。详情请看<a href=\"./configuring-watch.html\">配置 Watch</a>。</td></tr></tbody></table></div>"},{"type":"List","ordered":false,"start":null,"spread":false,"children":[{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"[1]的option是实验性的","loc":{"start":{"line":23,"column":2},"end":{"line":23,"column":17}},"range":[15476,15491],"raw":"[1]的option是实验性的"}],"loc":{"start":{"line":23,"column":2},"end":{"line":23,"column":17}},"range":[15476,15491],"raw":"[1]的option是实验性的"}],"loc":{"start":{"line":23,"column":0},"end":{"line":23,"column":17}},"range":[15474,15491],"raw":"- [1]的option是实验性的"},{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"[2]的option只能使用在tsconfig.json文件中","loc":{"start":{"line":24,"column":2},"end":{"line":24,"column":33}},"range":[15494,15525],"raw":"[2]的option只能使用在tsconfig.json文件中"}],"loc":{"start":{"line":24,"column":2},"end":{"line":24,"column":33}},"range":[15494,15525],"raw":"[2]的option只能使用在tsconfig.json文件中"}],"loc":{"start":{"line":24,"column":0},"end":{"line":24,"column":33}},"range":[15492,15525],"raw":"- [2]的option只能使用在tsconfig.json文件中"}],"loc":{"start":{"line":23,"column":0},"end":{"line":24,"column":33}},"range":[15474,15525],"raw":"- [1]的option是实验性的\n- [2]的option只能使用在tsconfig.json文件中"},{"type":"HorizontalRule","loc":{"start":{"line":26,"column":0},"end":{"line":26,"column":4}},"range":[15527,15531],"raw":"----"},{"type":"Header","depth":2,"children":[{"type":"Str","value":"编译文件列表files","loc":{"start":{"line":28,"column":3},"end":{"line":28,"column":14}},"range":[15536,15547],"raw":"编译文件列表files"}],"loc":{"start":{"line":28,"column":0},"end":{"line":28,"column":14}},"range":[15533,15547],"raw":"## 编译文件列表files"},{"type":"Paragraph","children":[{"type":"Str","value":"files字段用来表示一个编译文件列表，列表元素可以是等待编译的typescript文件的相对或者绝对地址，可以配合\"include\"和\"exclude\"两个字段包含或者排除glob匹配模式的列表：","loc":{"start":{"line":30,"column":0},"end":{"line":30,"column":99}},"range":[15549,15648],"raw":"files字段用来表示一个编译文件列表，列表元素可以是等待编译的typescript文件的相对或者绝对地址，可以配合\"include\"和\"exclude\"两个字段包含或者排除glob匹配模式的列表："}],"loc":{"start":{"line":30,"column":0},"end":{"line":30,"column":99}},"range":[15549,15648],"raw":"files字段用来表示一个编译文件列表，列表元素可以是等待编译的typescript文件的相对或者绝对地址，可以配合\"include\"和\"exclude\"两个字段包含或者排除glob匹配模式的列表："},{"type":"List","ordered":false,"start":null,"spread":false,"children":[{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"*: 匹配0个或者多个字符","loc":{"start":{"line":32,"column":2},"end":{"line":32,"column":15}},"range":[15652,15665],"raw":"*: 匹配0个或者多个字符"}],"loc":{"start":{"line":32,"column":2},"end":{"line":32,"column":15}},"range":[15652,15665],"raw":"*: 匹配0个或者多个字符"}],"loc":{"start":{"line":32,"column":0},"end":{"line":32,"column":15}},"range":[15650,15665],"raw":"- *: 匹配0个或者多个字符"},{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"?: 匹配任意一个字符","loc":{"start":{"line":33,"column":2},"end":{"line":33,"column":13}},"range":[15668,15679],"raw":"?: 匹配任意一个字符"}],"loc":{"start":{"line":33,"column":2},"end":{"line":33,"column":13}},"range":[15668,15679],"raw":"?: 匹配任意一个字符"}],"loc":{"start":{"line":33,"column":0},"end":{"line":33,"column":13}},"range":[15666,15679],"raw":"- ?: 匹配任意一个字符"},{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"/**: 递归匹配任意子目录","loc":{"start":{"line":34,"column":2},"end":{"line":34,"column":16}},"range":[15682,15696],"raw":"/**: 递归匹配任意子目录"}],"loc":{"start":{"line":34,"column":2},"end":{"line":34,"column":16}},"range":[15682,15696],"raw":"/**: 递归匹配任意子目录"}],"loc":{"start":{"line":34,"column":0},"end":{"line":34,"column":16}},"range":[15680,15696],"raw":"- /**: 递归匹配任意子目录"}],"loc":{"start":{"line":32,"column":0},"end":{"line":34,"column":16}},"range":[15650,15696],"raw":"- *: 匹配0个或者多个字符\n- ?: 匹配任意一个字符\n- /**: 递归匹配任意子目录"},{"type":"List","ordered":true,"start":1,"spread":true,"children":[{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"在\"files\"和\"include\"均未指定的情况下，tsc默认编译文件夹及子文件夹内所有的typescript文件，包含ts、tsx、d.ts等，如果allowJS配置为true时还会包含js和jsx。","loc":{"start":{"line":38,"column":3},"end":{"line":38,"column":105}},"range":[15703,15805],"raw":"在\"files\"和\"include\"均未指定的情况下，tsc默认编译文件夹及子文件夹内所有的typescript文件，包含ts、tsx、d.ts等，如果allowJS配置为true时还会包含js和jsx。"}],"loc":{"start":{"line":38,"column":3},"end":{"line":38,"column":105}},"range":[15703,15805],"raw":"在\"files\"和\"include\"均未指定的情况下，tsc默认编译文件夹及子文件夹内所有的typescript文件，包含ts、tsx、d.ts等，如果allowJS配置为true时还会包含js和jsx。"}],"loc":{"start":{"line":38,"column":0},"end":{"line":38,"column":105}},"range":[15700,15805],"raw":"1. 在\"files\"和\"include\"均未指定的情况下，tsc默认编译文件夹及子文件夹内所有的typescript文件，包含ts、tsx、d.ts等，如果allowJS配置为true时还会包含js和jsx。"},{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"\"exclude\"不能排除\"files\"属性包含的文件以及被包含文件引用的文件，会默认排除","loc":{"start":{"line":40,"column":3},"end":{"line":40,"column":48}},"range":[15810,15855],"raw":"\"exclude\"不能排除\"files\"属性包含的文件以及被包含文件引用的文件，会默认排除"},{"type":"Code","value":"node_modules","loc":{"start":{"line":40,"column":48},"end":{"line":40,"column":62}},"range":[15855,15869],"raw":"`node_modules`"},{"type":"Str","value":"，","loc":{"start":{"line":40,"column":62},"end":{"line":40,"column":63}},"range":[15869,15870],"raw":"，"},{"type":"Code","value":"bower_components","loc":{"start":{"line":40,"column":63},"end":{"line":40,"column":81}},"range":[15870,15888],"raw":"`bower_components`"},{"type":"Str","value":"，","loc":{"start":{"line":40,"column":81},"end":{"line":40,"column":82}},"range":[15888,15889],"raw":"，"},{"type":"Code","value":"jspm_packages","loc":{"start":{"line":40,"column":82},"end":{"line":40,"column":97}},"range":[15889,15904],"raw":"`jspm_packages`"},{"type":"Str","value":"和","loc":{"start":{"line":40,"column":97},"end":{"line":40,"column":98}},"range":[15904,15905],"raw":"和"},{"type":"Code","value":"<outDir>","loc":{"start":{"line":40,"column":98},"end":{"line":40,"column":108}},"range":[15905,15915],"raw":"`<outDir>`"},{"type":"Str","value":"目录","loc":{"start":{"line":40,"column":108},"end":{"line":40,"column":110}},"range":[15915,15917],"raw":"目录"}],"loc":{"start":{"line":40,"column":3},"end":{"line":40,"column":110}},"range":[15810,15917],"raw":"\"exclude\"不能排除\"files\"属性包含的文件以及被包含文件引用的文件，会默认排除`node_modules`，`bower_components`，`jspm_packages`和`<outDir>`目录"}],"loc":{"start":{"line":40,"column":0},"end":{"line":40,"column":110}},"range":[15807,15917],"raw":"2. \"exclude\"不能排除\"files\"属性包含的文件以及被包含文件引用的文件，会默认排除`node_modules`，`bower_components`，`jspm_packages`和`<outDir>`目录"},{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"tsc会自动排除可能是输出文件的文件，如果包含了index.ts，那么index.d.ts和index.js会被排除","loc":{"start":{"line":41,"column":3},"end":{"line":41,"column":61}},"range":[15921,15979],"raw":"tsc会自动排除可能是输出文件的文件，如果包含了index.ts，那么index.d.ts和index.js会被排除"}],"loc":{"start":{"line":41,"column":3},"end":{"line":41,"column":61}},"range":[15921,15979],"raw":"tsc会自动排除可能是输出文件的文件，如果包含了index.ts，那么index.d.ts和index.js会被排除"}],"loc":{"start":{"line":41,"column":0},"end":{"line":41,"column":61}},"range":[15918,15979],"raw":"3. tsc会自动排除可能是输出文件的文件，如果包含了index.ts，那么index.d.ts和index.js会被排除"}],"loc":{"start":{"line":38,"column":0},"end":{"line":41,"column":61}},"range":[15700,15979],"raw":"1. 在\"files\"和\"include\"均未指定的情况下，tsc默认编译文件夹及子文件夹内所有的typescript文件，包含ts、tsx、d.ts等，如果allowJS配置为true时还会包含js和jsx。\n\n2. \"exclude\"不能排除\"files\"属性包含的文件以及被包含文件引用的文件，会默认排除`node_modules`，`bower_components`，`jspm_packages`和`<outDir>`目录\n3. tsc会自动排除可能是输出文件的文件，如果包含了index.ts，那么index.d.ts和index.js会被排除"},{"type":"HorizontalRule","loc":{"start":{"line":43,"column":0},"end":{"line":43,"column":5}},"range":[15981,15986],"raw":"-----"},{"type":"Header","depth":2,"children":[{"type":"Str","value":"使用extends继承配置","loc":{"start":{"line":45,"column":3},"end":{"line":45,"column":16}},"range":[15991,16004],"raw":"使用extends继承配置"}],"loc":{"start":{"line":45,"column":0},"end":{"line":45,"column":16}},"range":[15988,16004],"raw":"## 使用extends继承配置"},{"type":"Paragraph","children":[{"type":"Str","value":"tsconfig.json可以使用extends字段从其他的配置文件中继承配置，其值是一个字符串，是要继承的文件的路径。","loc":{"start":{"line":47,"column":0},"end":{"line":47,"column":60}},"range":[16006,16066],"raw":"tsconfig.json可以使用extends字段从其他的配置文件中继承配置，其值是一个字符串，是要继承的文件的路径。"}],"loc":{"start":{"line":47,"column":0},"end":{"line":47,"column":60}},"range":[16006,16066],"raw":"tsconfig.json可以使用extends字段从其他的配置文件中继承配置，其值是一个字符串，是要继承的文件的路径。"},{"type":"CodeBlock","lang":"javascript","meta":null,"value":"{\n  \"extends\":\"path/to/parent/tsconfig\" // .json文件后缀名可以不带\n}","loc":{"start":{"line":49,"column":0},"end":{"line":53,"column":3}},"range":[16068,16145],"raw":"```javascript\n{\n  \"extends\":\"path/to/parent/tsconfig\" // .json文件后缀名可以不带\n}\n```"},{"type":"Paragraph","children":[{"type":"Str","value":"被继承的配置文件先被加载，然后被重写，如果有","loc":{"start":{"line":55,"column":0},"end":{"line":55,"column":22}},"range":[16147,16169],"raw":"被继承的配置文件先被加载，然后被重写，如果有"},{"type":"Strong","children":[{"type":"Str","value":"存在循环引用的情况，会发生报错","loc":{"start":{"line":55,"column":24},"end":{"line":55,"column":39}},"range":[16171,16186],"raw":"存在循环引用的情况，会发生报错"}],"loc":{"start":{"line":55,"column":22},"end":{"line":55,"column":41}},"range":[16169,16188],"raw":"**存在循环引用的情况，会发生报错**"},{"type":"Str","value":"。","loc":{"start":{"line":55,"column":41},"end":{"line":55,"column":42}},"range":[16188,16189],"raw":"。"}],"loc":{"start":{"line":55,"column":0},"end":{"line":55,"column":42}},"range":[16147,16189],"raw":"被继承的配置文件先被加载，然后被重写，如果有**存在循环引用的情况，会发生报错**。"}],"loc":{"start":{"line":1,"column":0},"end":{"line":55,"column":42}},"range":[0,16189],"raw":"---\ntitle: 'TypeScript：tsconfig.json配置'\ntags: ['TypeScript', 'tsconfig', '前端']\n---\n\n# TypeScript配置文件tsconfig.json\n\ntsconfig.json文件是typescript项目根目录中，配置编译选项和根文件的配置文件。\n\n如果在不指定编译配置文件的情况下直接调用**tsc**命令：\n\n- 使用命令行参数“--project”指定一个包含tsconfig.json文件的项目目录\n- 不适用上面的参数，也不指定配置文件时，tsc命令会逐层查找父级目录，直到查找到tsconfig.json文件\n\n------\n\n## 编译器选项(CompilerOptions)\n\n文档地址：[编译选项](https://www.tslang.cn/docs/handbook/compiler-options.html)\n\n<div class=\"table-responsive\"><table class=\"table\"><thead><tr><th>选项</th><th>类型</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td><code>--allowJs</code></td><td><code>boolean</code></td><td><code>false</code></td><td>允许编译javascript文件。</td></tr><tr><td><code>--allowSyntheticDefaultImports</code></td><td><code>boolean</code></td><td><code>module === \"system\"</code>                                    或设置了<code>--esModuleInterop</code>                                    且<code>module</code>                                    不为<code>es2015</code>                                    /<code>esnext</code></td><td>允许从没有设置默认导出的模块中默认导入。这并不影响代码的输出，仅为了类型检查。</td></tr><tr><td><code>--allowUnreachableCode</code></td><td><code>boolean</code></td><td><code>false</code></td><td>不报告执行不到的代码错误。</td></tr><tr><td><code>--allowUnusedLabels</code></td><td><code>boolean</code></td><td><code>false</code></td><td>不报告未使用的标签错误。</td></tr><tr><td><code>--alwaysStrict</code></td><td><code>boolean</code></td><td><code>false</code></td><td>以严格模式解析并为每个源文件生成<code>\"use strict\"</code>语句</td></tr><tr><td><code>--baseUrl</code></td><td><code>string</code></td><td></td><td>解析非相对模块名的基准目录。查看<a href=\"./module-resolution.html#base-url\">模块解析文档</a>了解详情。</td></tr><tr><td><code>--charset</code></td><td><code>string</code></td><td><code>\"utf8\"</code></td><td>输入文件的字符集。</td></tr><tr><td><code>--checkJs</code></td><td><code>boolean</code></td><td><code>false</code></td><td>在<code>.js</code>文件中报告错误。与<code>--allowJs</code>配合使用。</td></tr><tr><td><code>--declaration</code><br><code>-d</code></td><td><code>boolean</code></td><td><code>false</code></td><td>生成相应的<code>.d.ts</code>文件。</td></tr><tr><td><code>--declarationDir</code></td><td><code>string</code></td><td></td><td>生成声明文件的输出路径。</td></tr><tr><td><code>--diagnostics</code></td><td><code>boolean</code></td><td><code>false</code></td><td>显示诊断信息。</td></tr><tr><td><code>--disableSizeLimit</code></td><td><code>boolean</code></td><td><code>false</code></td><td>禁用JavaScript工程体积大小的限制</td></tr><tr><td><code>--emitBOM</code></td><td><code>boolean</code></td><td><code>false</code></td><td>在输出文件的开头加入BOM头（UTF-8 Byte Order Mark）。</td></tr><tr><td><code>--emitDecoratorMetadata</code><sup>[1]</sup></td><td><code>boolean</code></td><td><code>false</code></td><td>给源码里的装饰器声明加上设计类型元数据。查看<a href=\"https://github.com/Microsoft/TypeScript/issues/2577\">issue #2577</a>了解更多信息。</td></tr><tr><td><code>--experimentalDecorators</code><sup>[1]</sup></td><td><code>boolean</code></td><td><code>false</code></td><td>启用实验性的ES装饰器。</td></tr><tr><td><code>--extendedDiagnostics</code></td><td><code>boolean</code></td><td><code>false</code></td><td>显示详细的诊段信息。</td></tr><tr><td><code>--forceConsistentCasingInFileNames</code></td><td><code>boolean</code></td><td><code>false</code></td><td>禁止对同一个文件的不一致的引用。</td></tr><tr><td><code>--help</code><br><code>-h</code></td><td></td><td></td><td>打印帮助信息。</td></tr><tr><td><code>--importHelpers</code></td><td><code>string</code></td><td></td><td>从<a href=\"https://www.npmjs.com/package/tslib\"><code>tslib</code></a>导入辅助工具函数（比如<code>__extends</code>，<code>__rest</code>等）</td></tr><tr><td><code>--inlineSourceMap</code></td><td><code>boolean</code></td><td><code>false</code></td><td>生成单个sourcemaps文件，而不是将每sourcemaps生成不同的文件。</td></tr><tr><td><code>--inlineSources</code></td><td><code>boolean</code></td><td><code>false</code></td><td>将代码与sourcemaps生成到一个文件中，要求同时设置了<code>--inlineSourceMap</code>或<code>--sourceMap</code>属性。</td></tr><tr><td><code>--init</code></td><td></td><td></td><td>初始化TypeScript项目并创建一个<code>tsconfig.json</code>文件。</td></tr><tr><td><code>--isolatedModules</code></td><td><code>boolean</code></td><td><code>false</code></td><td>将每个文件作为单独的模块（与“ts.transpileModule”类似）。</td></tr><tr><td><code>--jsx</code></td><td><code>string</code></td><td><code>\"Preserve\"</code></td><td>在<code>.tsx</code>文件里支持JSX：<code>\"React\"</code>或<code>\"Preserve\"</code>。查看<a href=\"./jsx.html\">JSX</a>。</td></tr><tr><td><code>--jsxFactory</code></td><td><code>string</code></td><td><code>\"React.createElement\"</code></td><td>指定生成目标为react JSX时，使用的JSX工厂函数，比如<code>React.createElement</code>或<code>h</code>。</td></tr><tr><td><code>--lib</code></td><td><code>string[]</code></td><td></td><td>编译过程中需要引入的库文件的列表。<br>可能的值为：<br>►<code>ES5</code><br>►<code>ES6</code><br>►<code>ES2015</code><br>►<code>ES7</code><br>►<code>ES2016</code><br>►<code>ES2017</code><br>►<code>ES2018</code><br>►<code>ESNext</code><br>►<code>DOM</code><br>►<code>DOM.Iterable</code><br>►<code>WebWorker</code><br>►<code>ScriptHost</code><br>►<code>ES2015.Core</code><br>►<code>ES2015.Collection</code><br>►<code>ES2015.Generator</code><br>►<code>ES2015.Iterable</code><br>►<code>ES2015.Promise</code><br>►<code>ES2015.Proxy</code><br>►<code>ES2015.Reflect</code><br>►<code>ES2015.Symbol</code><br>►<code>ES2015.Symbol.WellKnown</code><br>►<code>ES2016.Array.Include</code><br>►<code>ES2017.object</code><br>►<code>ES2017.Intl</code><br>►<code>ES2017.SharedMemory</code><br>►<code>ES2017.String</code><br>►<code>ES2017.TypedArrays</code><br>►<code>ES2018.Intl</code><br>►<code>ES2018.Promise</code><br>►<code>ES2018.RegExp</code><br>►<code>ESNext.AsyncIterable</code><br>►<code>ESNext.Array</code><br>►<code>ESNext.Intl</code><br>►<code>ESNext.Symbol</code><br><br> 注意：如果<code>--lib</code>没有指定默认注入的库的列表。默认注入的库为：<br>                                    ► 针对于<code>--target ES5</code>：<code>DOM，ES5，ScriptHost</code><br> ► 针对于<code>--target ES6</code>：<code>DOM，ES6，DOM.Iterable，ScriptHost</code></td></tr><tr><td><code>--listEmittedFiles</code></td><td><code>boolean</code></td><td><code>false</code></td><td>打印出编译后生成文件的名字。</td></tr><tr><td><code>--listFiles</code></td><td><code>boolean</code></td><td><code>false</code></td><td>编译过程中打印文件名。</td></tr><tr><td><code>--locale</code></td><td><code>string</code></td><td><em>(platform specific)</em></td><td>显示错误信息时使用的语言，比如：en-us。</td></tr><tr><td><code>--mapRoot</code></td><td><code>string</code></td><td></td><td>为调试器指定指定sourcemap文件的路径，而不是使用生成时的路径。当<code>.map</code>文件是在运行时指定的，并不同于<code>js</code>文件的地址时使用这个标记。指定的路径会嵌入到<code>sourceMap</code>里告诉调试器到哪里去找它们。</td></tr><tr><td><code>--maxNodeModuleJsDepth</code></td><td><code>number</code></td><td><code>0</code></td><td>node_modules依赖的最大搜索深度并加载JavaScript文件。仅适用于<code>--allowJs</code>。</td></tr><tr><td><code>--module</code><br><code>-m</code></td><td><code>string</code></td><td><code>target === \"ES6\" ? \"ES6\" : \"commonjs\"</code></td><td style=\"word-break: break-word;\">指定生成哪个模块系统代码：<code>\"None\"</code>，<code>\"CommonJS\"</code>，<code>\"AMD\"</code>，<code>\"System\"</code>，<code>\"UMD\"</code>，<code>\"ES6\"</code>或<code>\"ES2015\"</code>。<br>► 只有<code>\"AMD\"</code>和<code>\"System\"</code>能和<code>--outFile</code>一起使用。<br>►<code>\"ES6\"</code>和<code>\"ES2015\"</code>可使用在目标输出为<code>\"ES5\"</code>或更低的情况下。</td></tr><tr><td><code>--moduleResolution</code></td><td><code>string</code></td><td><code>module === \"AMD\" or \"System\" or \"ES6\" ? \"Classic\" : \"Node\"</code></td><td>                                    决定如何处理模块。或者是<code>\"Node\"</code>对于Node.js/io.js，或者是<code>\"Classic\"</code>（默认）。查看<a href=\"./module-resolution.html\">模块解析</a>了解详情。</td></tr><tr><td><code>--newLine</code></td><td><code>string</code></td><td><em>(platform specific)</em></td><td>当生成文件时指定行结束符：<code>\"crlf\"</code>（windows）或<code>\"lf\"</code>（unix）。</td></tr><tr><td><code>--noEmit</code></td><td><code>boolean</code></td><td><code>false</code></td><td>不生成输出文件。</td></tr><tr><td><code>--noEmitHelpers</code></td><td><code>boolean</code></td><td><code>false</code></td><td>不在输出文件中生成用户自定义的帮助函数代码，如<code>__extends</code>。</td></tr><tr><td><code>--noEmitOnError</code></td><td><code>boolean</code></td><td><code>false</code></td><td>报错时不生成输出文件。</td></tr><tr><td><code>--noErrorTruncation</code></td><td><code>boolean</code></td><td><code>false</code></td><td>不截短错误消息。</td></tr><tr><td><code>--noFallthroughCasesInSwitch</code></td><td><code>boolean</code></td><td><code>false</code></td><td>报告switch语句的fallthrough错误。（即，不允许switch的case语句贯穿）</td></tr><tr><td><code>--noImplicitAny</code></td><td><code>boolean</code></td><td><code>false</code></td><td>在表达式和声明上有隐含的<code>any</code>类型时报错。</td></tr><tr><td><code>--noImplicitReturns</code></td><td><code>boolean</code></td><td><code>false</code></td><td>不是函数的所有返回路径都有返回值时报错。</td></tr><tr><td><code>--noImplicitThis</code></td><td><code>boolean</code></td><td><code>false</code></td><td>当<code>this</code>表达式的值为<code>any</code>类型的时候，生成一个错误。</td></tr><tr><td><code>--noImplicitUseStrict</code></td><td><code>boolean</code></td><td><code>false</code></td><td>模块输出中不包含<code>\"use strict\"</code>指令。</td></tr><tr><td><code>--noLib</code></td><td><code>boolean</code></td><td><code>false</code></td><td>不包含默认的库文件（<code>lib.d.ts</code>）。</td></tr><tr><td><code>--noResolve</code></td><td><code>boolean</code></td><td><code>false</code></td><td>不把<code>/// &lt;reference``&gt;</code>或模块导入的文件加到编译文件列表。</td></tr><tr><td><code>--noStrictGenericChecks</code></td><td><code>boolean</code></td><td><code>false</code></td><td>禁用在函数类型里对泛型签名进行严格检查。</td></tr><tr><td><code>--noUnusedLocals</code></td><td><code>boolean</code></td><td><code>false</code></td><td>若有未使用的局部变量则抛错。</td></tr><tr><td><code>--noUnusedParameters</code></td><td><code>boolean</code></td><td><code>false</code></td><td>若有未使用的参数则抛错。</td></tr><tr><td><s><code>--out</code></s></td><td><code>string</code></td><td></td><td>弃用。使用<code>--outFile</code> 代替。</td></tr><tr><td><code>--outDir</code></td><td><code>string</code></td><td></td><td>重定向输出目录。</td></tr><tr><td><code>--outFile</code></td><td><code>string</code></td><td></td><td>将输出文件合并为一个文件。合并的顺序是根据传入编译器的文件顺序和<code>///&lt;reference``&gt;</code>和<code>import</code>的文件顺序决定的。查看输出文件顺序文件了解详情。</td></tr><tr><td><code>paths</code><sup>[2]</sup></td><td><code>Object</code></td><td></td><td>模块名到基于<code>baseUrl</code>的路径映射的列表。查看<a href=\"./module-resolution.html#path-mapping\">模块解析文档</a>了解详情。</td></tr><tr><td><code>--preserveConstEnums</code></td><td><code>boolean</code></td><td><code>false</code></td><td>保留<code>const</code>和<code>enum</code>声明。查看<a href=\"https://github.com/Microsoft/TypeScript/blob/master/doc/spec.md#94-constant-enum-declarations\">const enums documentation</a>了解详情。</td></tr><tr><td><code>--preserveSymlinks</code></td><td><code>boolean</code></td><td><code>false</code></td><td>不把符号链接解析为其真实路径；将符号链接文件视为真正的文件。</td></tr><tr><td><code>--preserveWatchOutput</code></td><td><code>boolean</code></td><td><code>false</code></td><td>保留watch模式下过时的控制台输出。</td></tr><tr><td><code>--pretty</code><sup>[1]</sup></td><td><code>boolean</code></td><td><code>false</code></td><td>给错误和消息设置样式，使用颜色和上下文。</td></tr><tr><td><code>--project</code><br><code>-p</code></td><td><code>string</code></td><td></td><td>编译指定目录下的项目。这个目录应该包含一个<code>tsconfig.json</code>文件来管理编译。查看<a href=\"./tsconfig-json.html\">tsconfig.json</a>文档了解更多信息。</td></tr><tr><td><code>--reactNamespace</code></td><td><code>string</code></td><td><code>\"React\"</code></td><td>当目标为生成<code>\"react\"</code> JSX时，指定<code>createElement</code>和<code>__spread</code>的调用对象</td></tr><tr><td><code>--removeComments</code></td><td><code>boolean</code></td><td><code>false</code></td><td>删除所有注释，除了以<code>/!*</code>开头的版权信息。</td></tr><tr><td><code>--rootDir</code></td><td><code>string</code></td><td><em>(common root directory is computed from the list of input files)</em></td><td>仅用来控制输出的目录结构<code>--outDir</code>。</td></tr><tr><td><code>rootDirs</code><sup>[2]</sup></td><td><code>string[]</code></td><td></td><td><i>根（root）</i>文件夹列表，表示运行时组合工程结构的内容。查看<a href=\"./module-resolution.html#virtual-directories-with-rootdirs\">模块解析文档</a>了解详情。</td></tr><tr><td><code>--skipDefaultLibCheck</code></td><td><code>boolean</code></td><td><code>false</code></td><td>忽略<a href=\"./triple-slash-directives.html#-reference-no-default-libtrue\">库的默认声明文件</a>的类型检查。</td></tr><tr><td><code>--skipLibCheck</code></td><td><code>boolean</code></td><td><code>false</code></td><td>忽略所有的声明文件（<code>*.d.ts</code>）的类型检查。</td></tr><tr><td><code>--sourceMap</code></td><td><code>boolean</code></td><td><code>false</code></td><td>生成相应的<code>.map</code>文件。</td></tr><tr><td><code>--sourceRoot</code></td><td><code>string</code></td><td></td><td>指定TypeScript源文件的路径，以便调试器定位。当TypeScript文件的位置是在运行时指定时使用此标记。路径信息会被加到<code>sourceMap</code>里。</td></tr><tr><td><code>--strict</code></td><td><code>boolean</code></td><td><code>false</code></td><td>启用所有严格类型检查选项。<br>启用<code>--strict</code>相当于启用<code>--noImplicitAny</code>,<code>--noImplicitThis</code>,<code>--alwaysStrict</code>，<code>--strictNullChecks</code>和<code>--strictFunctionTypes</code>和<code>--strictPropertyInitialization</code>。</td></tr><tr><td><code>--strictFunctionTypes</code></td><td><code>boolean</code></td><td><code>false</code></td><td>禁用函数参数双向协变检查。</td></tr><tr><td><code>--strictPropertyInitialization</code></td><td><code>boolean</code></td><td><code>false</code></td><td>确保类的非<code>undefined</code>属性已经在构造函数里初始化。若要令此选项生效，需要同时启用<code>--strictNullChecks</code>。</td></tr><tr><td><code>--strictNullChecks</code></td><td><code>boolean</code></td><td><code>false</code></td><td>在严格的<code>null</code>检查模式下，<code>null</code>和<code>undefined</code>值不包含在任何类型里，只允许用它们自己和<code>any</code>来赋值（有个例外，<code>undefined</code>可以赋值到<code>void</code>）。</td></tr><tr><td><code>--stripInternal</code><sup>[1]</sup></td><td><code>boolean</code></td><td><code>false</code></td><td>不对具有<code></code> JSDoc注解的代码生成代码。</td></tr><tr><td><code>--suppressExcessPropertyErrors</code><sup>[1]</sup></td><td><code>boolean</code></td><td><code>false</code></td><td>阻止对对象字面量的额外属性检查。</td></tr><tr><td><code>--suppressImplicitAnyIndexErrors</code></td><td><code>boolean</code></td><td><code>false</code></td><td>阻止<code>--noImplicitAny</code>对缺少索引签名的索引对象报错。查看<a href=\"https://github.com/Microsoft/TypeScript/issues/1232#issuecomment-64510362\">issue #1232</a>了解详情。</td></tr><tr><td><code>--target</code><br><code>-t</code></td><td><code>string</code></td><td><code>\"ES3\"</code></td><td style=\"word-break: break-word;\">指定ECMAScript目标版本<code>\"ES3\"</code>（默认），<code>\"ES5\"</code>，<code>\"ES6\"</code>/<code>\"ES2015\"</code>，<code>\"ES2016\"</code>，<code>\"ES2017\"</code>或<code>\"ESNext\"</code>。<br><br> 注意：<code>\"ESNext\"</code>最新的生成目标列表为<a href=\"https://github.com/tc39/proposals\">ES proposed features</a></td></tr><tr><td><code>--traceResolution</code></td><td><code>boolean</code></td><td><code>false</code></td><td>生成模块解析日志信息</td></tr><tr><td><code>--types</code></td><td><code>string[]</code></td><td></td><td>要包含的类型声明文件名列表。查看<a href=\"./tsconfig-json.html#types-typeroots-and-types\">@types，--typeRoots和--types</a>章节了解详细信息。</td></tr><tr><td><code>--typeRoots</code></td><td><code>string[]</code></td><td></td><td>要包含的类型声明文件路径列表。查看<a href=\"./tsconfig-json.html#types-typeroots-and-types\">@types，--typeRoots和--types</a>章节了解详细信息。</td></tr><tr><td><code>--version</code><br><code>-v</code></td><td></td><td></td><td>打印编译器版本号。</td></tr><tr><td><code>--watch</code><br><code>-w</code></td><td></td><td></td><td>在监视模式下运行编译器。会监视输出文件，在它们改变时重新编译。监视文件和目录的具体实现可以通过环境变量进行配置。详情请看<a href=\"./configuring-watch.html\">配置 Watch</a>。</td></tr></tbody></table></div>\n\n- [1]的option是实验性的\n- [2]的option只能使用在tsconfig.json文件中\n\n----\n\n## 编译文件列表files\n\nfiles字段用来表示一个编译文件列表，列表元素可以是等待编译的typescript文件的相对或者绝对地址，可以配合\"include\"和\"exclude\"两个字段包含或者排除glob匹配模式的列表：\n\n- *: 匹配0个或者多个字符\n- ?: 匹配任意一个字符\n- /**: 递归匹配任意子目录\n\n\n\n1. 在\"files\"和\"include\"均未指定的情况下，tsc默认编译文件夹及子文件夹内所有的typescript文件，包含ts、tsx、d.ts等，如果allowJS配置为true时还会包含js和jsx。\n\n2. \"exclude\"不能排除\"files\"属性包含的文件以及被包含文件引用的文件，会默认排除`node_modules`，`bower_components`，`jspm_packages`和`<outDir>`目录\n3. tsc会自动排除可能是输出文件的文件，如果包含了index.ts，那么index.d.ts和index.js会被排除\n\n-----\n\n## 使用extends继承配置\n\ntsconfig.json可以使用extends字段从其他的配置文件中继承配置，其值是一个字符串，是要继承的文件的路径。\n\n```javascript\n{\n  \"extends\":\"path/to/parent/tsconfig\" // .json文件后缀名可以不带\n}\n```\n\n被继承的配置文件先被加载，然后被重写，如果有**存在循环引用的情况，会发生报错**。"},"catalogue":{"title":"TypeScript：tsconfig.json配置","json-path":"2020-11-25-TypeScript配置tsconfig.json","mdate":"2022-08-30T14:19:31.455Z","tags":["TypeScript","tsconfig","前端"]}}