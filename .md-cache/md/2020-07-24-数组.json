{"ast":{"type":"Document","children":[{"type":"Yaml","value":"tags: ['数据结构','数组']","loc":{"start":{"line":1,"column":0},"end":{"line":3,"column":3}},"range":[0,27],"raw":"---\ntags: ['数据结构','数组']\n---"},{"type":"Header","depth":2,"children":[{"type":"Str","value":"数组","loc":{"start":{"line":5,"column":3},"end":{"line":5,"column":5}},"range":[32,34],"raw":"数组"}],"loc":{"start":{"line":5,"column":0},"end":{"line":5,"column":5}},"range":[29,34],"raw":"## 数组"},{"type":"Header","depth":3,"children":[{"type":"Str","value":"数组的定义和存储","loc":{"start":{"line":7,"column":4},"end":{"line":7,"column":12}},"range":[40,48],"raw":"数组的定义和存储"}],"loc":{"start":{"line":7,"column":0},"end":{"line":7,"column":12}},"range":[36,48],"raw":"### 数组的定义和存储"},{"type":"BlockQuote","children":[{"type":"Paragraph","children":[{"type":"Emphasis","children":[{"type":"Str","value":"数组可以看成是数据元素本身也是一种数据结构的线性表","loc":{"start":{"line":9,"column":3},"end":{"line":9,"column":28}},"range":[53,78],"raw":"数组可以看成是数据元素本身也是一种数据结构的线性表"}],"loc":{"start":{"line":9,"column":2},"end":{"line":9,"column":29}},"range":[52,79],"raw":"*数组可以看成是数据元素本身也是一种数据结构的线性表*"}],"loc":{"start":{"line":9,"column":2},"end":{"line":9,"column":29}},"range":[52,79],"raw":"*数组可以看成是数据元素本身也是一种数据结构的线性表*"},{"type":"Paragraph","children":[{"type":"Strong","children":[{"type":"Str","value":"数组一旦被定义，它的维数和维界就不再发生改变，只有存取元素和修改元素的操作，一般没有插入和删除元素的操作，数组建立后，数组内元素的个数和元素之间的关系就不会再发生改变。","loc":{"start":{"line":11,"column":4},"end":{"line":11,"column":88}},"range":[86,170],"raw":"数组一旦被定义，它的维数和维界就不再发生改变，只有存取元素和修改元素的操作，一般没有插入和删除元素的操作，数组建立后，数组内元素的个数和元素之间的关系就不会再发生改变。"}],"loc":{"start":{"line":11,"column":2},"end":{"line":11,"column":90}},"range":[84,172],"raw":"**数组一旦被定义，它的维数和维界就不再发生改变，只有存取元素和修改元素的操作，一般没有插入和删除元素的操作，数组建立后，数组内元素的个数和元素之间的关系就不会再发生改变。**"}],"loc":{"start":{"line":11,"column":2},"end":{"line":11,"column":90}},"range":[84,172],"raw":"**数组一旦被定义，它的维数和维界就不再发生改变，只有存取元素和修改元素的操作，一般没有插入和删除元素的操作，数组建立后，数组内元素的个数和元素之间的关系就不会再发生改变。**"},{"type":"Paragraph","children":[{"type":"Emphasis","children":[{"type":"Str","value":"基于数组的上述特点，采用","loc":{"start":{"line":13,"column":3},"end":{"line":13,"column":15}},"range":[178,190],"raw":"基于数组的上述特点，采用"},{"type":"Strong","children":[{"type":"Str","value":"顺序结构","loc":{"start":{"line":13,"column":17},"end":{"line":13,"column":21}},"range":[192,196],"raw":"顺序结构"}],"loc":{"start":{"line":13,"column":15},"end":{"line":13,"column":23}},"range":[190,198],"raw":"**顺序结构**"},{"type":"Str","value":"存储数组","loc":{"start":{"line":13,"column":23},"end":{"line":13,"column":27}},"range":[198,202],"raw":"存储数组"}],"loc":{"start":{"line":13,"column":2},"end":{"line":13,"column":28}},"range":[177,203],"raw":"*基于数组的上述特点，采用**顺序结构**存储数组*"}],"loc":{"start":{"line":13,"column":2},"end":{"line":13,"column":28}},"range":[177,203],"raw":"*基于数组的上述特点，采用**顺序结构**存储数组*"}],"loc":{"start":{"line":9,"column":0},"end":{"line":13,"column":28}},"range":[50,203],"raw":"> *数组可以看成是数据元素本身也是一种数据结构的线性表*\n>\n> **数组一旦被定义，它的维数和维界就不再发生改变，只有存取元素和修改元素的操作，一般没有插入和删除元素的操作，数组建立后，数组内元素的个数和元素之间的关系就不会再发生改变。**\n>\n> *基于数组的上述特点，采用**顺序结构**存储数组*"},{"type":"Header","depth":3,"children":[{"type":"Str","value":"矩阵的压缩存储","loc":{"start":{"line":17,"column":4},"end":{"line":17,"column":11}},"range":[211,218],"raw":"矩阵的压缩存储"}],"loc":{"start":{"line":17,"column":0},"end":{"line":17,"column":11}},"range":[207,218],"raw":"### 矩阵的压缩存储"},{"type":"List","ordered":false,"start":null,"spread":true,"children":[{"type":"ListItem","spread":true,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"特殊矩阵","loc":{"start":{"line":19,"column":2},"end":{"line":19,"column":6}},"range":[222,226],"raw":"特殊矩阵"}],"loc":{"start":{"line":19,"column":2},"end":{"line":19,"column":6}},"range":[222,226],"raw":"特殊矩阵"},{"type":"Paragraph","children":[{"type":"Str","value":"值相同的元素或者零元素在矩阵内的分布存在一定的规律的矩阵，称之为“特殊矩阵”。","loc":{"start":{"line":21,"column":2},"end":{"line":21,"column":41}},"range":[230,269],"raw":"值相同的元素或者零元素在矩阵内的分布存在一定的规律的矩阵，称之为“特殊矩阵”。"}],"loc":{"start":{"line":21,"column":2},"end":{"line":21,"column":41}},"range":[230,269],"raw":"值相同的元素或者零元素在矩阵内的分布存在一定的规律的矩阵，称之为“特殊矩阵”。"}],"loc":{"start":{"line":19,"column":0},"end":{"line":21,"column":41}},"range":[220,269],"raw":"- 特殊矩阵\n\n  值相同的元素或者零元素在矩阵内的分布存在一定的规律的矩阵，称之为“特殊矩阵”。"},{"type":"ListItem","spread":true,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"稀疏矩阵","loc":{"start":{"line":23,"column":2},"end":{"line":23,"column":6}},"range":[273,277],"raw":"稀疏矩阵"}],"loc":{"start":{"line":23,"column":2},"end":{"line":23,"column":6}},"range":[273,277],"raw":"稀疏矩阵"},{"type":"Paragraph","children":[{"type":"Str","value":"在一个m*n的矩阵中存在t个元素不为0，称\n$$\n\\delta = \\frac{t}{m*n}\n$$\n为矩阵的","loc":{"start":{"line":25,"column":2},"end":{"line":29,"column":6}},"range":[281,346],"raw":"在一个m\\*n的矩阵中存在t个元素不为0，称 \n  $$\n  \\delta = \\frac{t}{m*n}\n  $$\n  为矩阵的"},{"type":"Strong","children":[{"type":"Str","value":"稀疏因子","loc":{"start":{"line":29,"column":8},"end":{"line":29,"column":12}},"range":[348,352],"raw":"稀疏因子"}],"loc":{"start":{"line":29,"column":6},"end":{"line":29,"column":14}},"range":[346,354],"raw":"**稀疏因子**"},{"type":"Str","value":"，通常认为\n$$\n\\delta \\leq 0.05\n$$\n时成为稀疏矩阵。","loc":{"start":{"line":29,"column":14},"end":{"line":33,"column":10}},"range":[354,399],"raw":"，通常认为\n  $$\n  \\delta \\leq 0.05\n  $$\n  时成为稀疏矩阵。"}],"loc":{"start":{"line":25,"column":2},"end":{"line":33,"column":10}},"range":[281,399],"raw":"在一个m\\*n的矩阵中存在t个元素不为0，称 \n  $$\n  \\delta = \\frac{t}{m*n}\n  $$\n  为矩阵的**稀疏因子**，通常认为\n  $$\n  \\delta \\leq 0.05\n  $$\n  时成为稀疏矩阵。"},{"type":"Paragraph","children":[{"type":"Str","value":"1.三元组顺序表","loc":{"start":{"line":35,"column":2},"end":{"line":35,"column":10}},"range":[403,411],"raw":"1.三元组顺序表"}],"loc":{"start":{"line":35,"column":2},"end":{"line":35,"column":10}},"range":[403,411],"raw":"1.三元组顺序表"},{"type":"Paragraph","children":[{"type":"Str","value":"只存储稀疏矩阵的非零元素，可以使用一个三元组唯一确定一个非零元素，分别记录其行列和值，所以可以使用**三元组顺序表（有序的上下标法）**来存储稀疏矩阵。","loc":{"start":{"line":37,"column":2},"end":{"line":37,"column":78}},"range":[415,491],"raw":"只存储稀疏矩阵的非零元素，可以使用一个三元组唯一确定一个非零元素，分别记录其行列和值，所以可以使用**三元组顺序表（有序的上下标法）**来存储稀疏矩阵。"}],"loc":{"start":{"line":37,"column":2},"end":{"line":37,"column":78}},"range":[415,491],"raw":"只存储稀疏矩阵的非零元素，可以使用一个三元组唯一确定一个非零元素，分别记录其行列和值，所以可以使用**三元组顺序表（有序的上下标法）**来存储稀疏矩阵。"},{"type":"Paragraph","children":[{"type":"Str","value":"$$\n(i,j,v)\n$$","loc":{"start":{"line":40,"column":2},"end":{"line":42,"column":4}},"range":[498,515],"raw":"$$\n  (i,j,v)\n  $$"}],"loc":{"start":{"line":40,"column":2},"end":{"line":42,"column":4}},"range":[498,515],"raw":"$$\n  (i,j,v)\n  $$"},{"type":"CodeBlock","lang":"c","meta":null,"value":"#define MAXSIZE 12500\ntypedef int ElemType;\n// 三元组\ntypedef struct {\n    int i, j; // 行和列\n    ElemType e; // 值\n} Triple;\n// 三元顺序表\ntypedef struct {\n    Triple data[MAXSIZE+1]; //非零三元顺序表\n    int rows, columns, t; //行数、列数和非零元素数\n} TSMatrix;","loc":{"start":{"line":44,"column":2},"end":{"line":57,"column":5}},"range":[519,789],"raw":"```c\n  #define MAXSIZE 12500\n  typedef int ElemType;\n  // 三元组\n  typedef struct {\n      int i, j; // 行和列\n      ElemType e; // 值\n  } Triple;\n  // 三元顺序表\n  typedef struct {\n      Triple data[MAXSIZE+1]; //非零三元顺序表\n      int rows, columns, t; //行数、列数和非零元素数\n  } TSMatrix;\n  ```"},{"type":"Paragraph","children":[{"type":"Str","value":"稀疏矩阵的转置：","loc":{"start":{"line":59,"column":2},"end":{"line":59,"column":10}},"range":[793,801],"raw":"稀疏矩阵的转置："}],"loc":{"start":{"line":59,"column":2},"end":{"line":59,"column":10}},"range":[793,801],"raw":"稀疏矩阵的转置："},{"type":"List","ordered":false,"start":null,"spread":false,"children":[{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"将矩阵的行列值交换","loc":{"start":{"line":61,"column":4},"end":{"line":61,"column":13}},"range":[807,816],"raw":"将矩阵的行列值交换"}],"loc":{"start":{"line":61,"column":4},"end":{"line":61,"column":13}},"range":[807,816],"raw":"将矩阵的行列值交换"}],"loc":{"start":{"line":61,"column":2},"end":{"line":61,"column":13}},"range":[805,816],"raw":"- 将矩阵的行列值交换"},{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"将每个三元组的i和j的值交换","loc":{"start":{"line":62,"column":4},"end":{"line":62,"column":18}},"range":[821,835],"raw":"将每个三元组的i和j的值交换"}],"loc":{"start":{"line":62,"column":4},"end":{"line":62,"column":18}},"range":[821,835],"raw":"将每个三元组的i和j的值交换"}],"loc":{"start":{"line":62,"column":2},"end":{"line":62,"column":18}},"range":[819,835],"raw":"- 将每个三元组的i和j的值交换"},{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"重排三元组之间的次序（以行序为主序排列）","loc":{"start":{"line":63,"column":4},"end":{"line":63,"column":24}},"range":[840,860],"raw":"重排三元组之间的次序（以行序为主序排列）"}],"loc":{"start":{"line":63,"column":4},"end":{"line":63,"column":24}},"range":[840,860],"raw":"重排三元组之间的次序（以行序为主序排列）"}],"loc":{"start":{"line":63,"column":2},"end":{"line":63,"column":24}},"range":[838,860],"raw":"- 重排三元组之间的次序（以行序为主序排列）"}],"loc":{"start":{"line":61,"column":2},"end":{"line":63,"column":24}},"range":[805,860],"raw":"- 将矩阵的行列值交换\n  - 将每个三元组的i和j的值交换\n  - 重排三元组之间的次序（以行序为主序排列）"},{"type":"CodeBlock","lang":"c","meta":null,"value":"#define ok 1;\ntypedef int Status;\nStatus TransposeSMatrix (TSMatrix m, TSMatrix &t){\n    int q = 1, row = 1;\n    t->rows = m.columns; t->colums = m.rows; t->t = m.t;\n    if(t.t){\n        for(;row<t->rows;row++){\n            for(;p<t.t;p++){\n                if(m.data[p].j == row) {\n                    t->data[q].i = m.data[p].j;\n                    t->data[q].j = m.data[p].i;\n                    t->data[q].e = m.data[p].e;\n                    q++;\n                }\n            }\n        }\n    }\n    return ok;\n}","loc":{"start":{"line":65,"column":2},"end":{"line":85,"column":5}},"range":[864,1428],"raw":"```c\n  #define ok 1;\n  typedef int Status;\n  Status TransposeSMatrix (TSMatrix m, TSMatrix &t){\n      int q = 1, row = 1;\n      t->rows = m.columns; t->colums = m.rows; t->t = m.t;\n      if(t.t){\n          for(;row<t->rows;row++){\n              for(;p<t.t;p++){\n                  if(m.data[p].j == row) {\n                      t->data[q].i = m.data[p].j;\n                      t->data[q].j = m.data[p].i;\n                      t->data[q].e = m.data[p].e;\n                      q++;\n                  }\n              }\n          }\n      }\n      return ok;\n  }\n  ```"},{"type":"Paragraph","children":[{"type":"Str","value":"时间复杂度：\n$$\nO(m.t*m.rows)\n$$","loc":{"start":{"line":87,"column":2},"end":{"line":90,"column":4}},"range":[1432,1464],"raw":"时间复杂度：\n  $$\n  O(m.t*m.rows)\n  $$"}],"loc":{"start":{"line":87,"column":2},"end":{"line":90,"column":4}},"range":[1432,1464],"raw":"时间复杂度：\n  $$\n  O(m.t*m.rows)\n  $$"},{"type":"Paragraph","children":[{"type":"Str","value":"当矩阵中非零元素个数 t 接近 m.t * m.rows 时，转置矩阵的时间复杂度接近\n$$\nO(m.rows^{2}*m.columns)\n$$","loc":{"start":{"line":93,"column":2},"end":{"line":96,"column":4}},"range":[1471,1551],"raw":"当矩阵中非零元素个数 t 接近 m.t * m.rows 时，转置矩阵的时间复杂度接近 \n  $$\n  O(m.rows^{2}*m.columns)\n  $$"}],"loc":{"start":{"line":93,"column":2},"end":{"line":96,"column":4}},"range":[1471,1551],"raw":"当矩阵中非零元素个数 t 接近 m.t * m.rows 时，转置矩阵的时间复杂度接近 \n  $$\n  O(m.rows^{2}*m.columns)\n  $$"},{"type":"Paragraph","children":[{"type":"Str","value":"所以本存储方式虽然节省了存储空间，但是提升了转置时的复杂度。","loc":{"start":{"line":99,"column":2},"end":{"line":99,"column":32}},"range":[1558,1588],"raw":"所以本存储方式虽然节省了存储空间，但是提升了转置时的复杂度。"}],"loc":{"start":{"line":99,"column":2},"end":{"line":99,"column":32}},"range":[1558,1588],"raw":"所以本存储方式虽然节省了存储空间，但是提升了转置时的复杂度。"},{"type":"Paragraph","children":[{"type":"Str","value":"如果可以预先确定矩阵每一列的第一个非零元素在转置后矩阵中的位置，在依次对各个三元组转置的时候，就可以直接将其放到合适的位置上。","loc":{"start":{"line":101,"column":2},"end":{"line":101,"column":65}},"range":[1592,1655],"raw":"如果可以预先确定矩阵每一列的第一个非零元素在转置后矩阵中的位置，在依次对各个三元组转置的时候，就可以直接将其放到合适的位置上。"}],"loc":{"start":{"line":101,"column":2},"end":{"line":101,"column":65}},"range":[1592,1655],"raw":"如果可以预先确定矩阵每一列的第一个非零元素在转置后矩阵中的位置，在依次对各个三元组转置的时候，就可以直接将其放到合适的位置上。"},{"type":"CodeBlock","lang":"c","meta":null,"value":"#define ok 1\ntypedef int Status;\nStatus TransposeSMatrix(TSMatrix m, TSMatrix &t) {\n    int nums[m.columns], fpos[m.columns];\n    int i,j,first;\n    t->columns = m.rows; t->rows = m.columns; t->t = m.t;\n    if(m.t){\n        for(i=1;i<m.columns;i++) nums[i]=0;\n        for(i=1;i<m.t;i++) nums[m.data[i].j]++;\n        fpos[1] = 1;\n        for(i=2;i<m.columns;i++) fpos[i] = fpos[i-1] + nums[i-1];\n        for(i=1;i<m.t;i++){\n            j = m.data[i].j;\n            first = fpos[j];\n            t->data[first].i = m.data[j].j;\n            t->data[first].j = m.data[j].i;\n            t->data[first].e = m.data[j].e;\n            fpos[first]++;\n        }\n    }\n    return ok;\n}","loc":{"start":{"line":103,"column":2},"end":{"line":126,"column":5}},"range":[1659,2386],"raw":"```c\n  #define ok 1\n  typedef int Status;\n  Status TransposeSMatrix(TSMatrix m, TSMatrix &t) {\n      int nums[m.columns], fpos[m.columns];\n      int i,j,first;\n      t->columns = m.rows; t->rows = m.columns; t->t = m.t;\n      if(m.t){\n          for(i=1;i<m.columns;i++) nums[i]=0;\n          for(i=1;i<m.t;i++) nums[m.data[i].j]++;\n          fpos[1] = 1;\n          for(i=2;i<m.columns;i++) fpos[i] = fpos[i-1] + nums[i-1];\n          for(i=1;i<m.t;i++){\n              j = m.data[i].j;\n              first = fpos[j];\n              t->data[first].i = m.data[j].j;\n              t->data[first].j = m.data[j].i;\n              t->data[first].e = m.data[j].e;\n              fpos[first]++;\n          }\n      }\n      return ok;\n  }\n  ```"},{"type":"Paragraph","children":[{"type":"Str","value":"实践复杂度是","loc":{"start":{"line":128,"column":2},"end":{"line":128,"column":8}},"range":[2390,2396],"raw":"实践复杂度是"}],"loc":{"start":{"line":128,"column":2},"end":{"line":128,"column":8}},"range":[2390,2396],"raw":"实践复杂度是"}],"loc":{"start":{"line":23,"column":0},"end":{"line":128,"column":8}},"range":[271,2396],"raw":"- 稀疏矩阵\n\n  在一个m\\*n的矩阵中存在t个元素不为0，称 \n  $$\n  \\delta = \\frac{t}{m*n}\n  $$\n  为矩阵的**稀疏因子**，通常认为\n  $$\n  \\delta \\leq 0.05\n  $$\n  时成为稀疏矩阵。\n\n  1.三元组顺序表\n\n  只存储稀疏矩阵的非零元素，可以使用一个三元组唯一确定一个非零元素，分别记录其行列和值，所以可以使用**三元组顺序表（有序的上下标法）**来存储稀疏矩阵。\n\n  \n  $$\n  (i,j,v)\n  $$\n\n  ```c\n  #define MAXSIZE 12500\n  typedef int ElemType;\n  // 三元组\n  typedef struct {\n      int i, j; // 行和列\n      ElemType e; // 值\n  } Triple;\n  // 三元顺序表\n  typedef struct {\n      Triple data[MAXSIZE+1]; //非零三元顺序表\n      int rows, columns, t; //行数、列数和非零元素数\n  } TSMatrix;\n  ```\n\n  稀疏矩阵的转置：\n\n  - 将矩阵的行列值交换\n  - 将每个三元组的i和j的值交换\n  - 重排三元组之间的次序（以行序为主序排列）\n\n  ```c\n  #define ok 1;\n  typedef int Status;\n  Status TransposeSMatrix (TSMatrix m, TSMatrix &t){\n      int q = 1, row = 1;\n      t->rows = m.columns; t->colums = m.rows; t->t = m.t;\n      if(t.t){\n          for(;row<t->rows;row++){\n              for(;p<t.t;p++){\n                  if(m.data[p].j == row) {\n                      t->data[q].i = m.data[p].j;\n                      t->data[q].j = m.data[p].i;\n                      t->data[q].e = m.data[p].e;\n                      q++;\n                  }\n              }\n          }\n      }\n      return ok;\n  }\n  ```\n\n  时间复杂度：\n  $$\n  O(m.t*m.rows)\n  $$\n  \n\n  当矩阵中非零元素个数 t 接近 m.t * m.rows 时，转置矩阵的时间复杂度接近 \n  $$\n  O(m.rows^{2}*m.columns)\n  $$\n  \n\n  所以本存储方式虽然节省了存储空间，但是提升了转置时的复杂度。\n\n  如果可以预先确定矩阵每一列的第一个非零元素在转置后矩阵中的位置，在依次对各个三元组转置的时候，就可以直接将其放到合适的位置上。\n\n  ```c\n  #define ok 1\n  typedef int Status;\n  Status TransposeSMatrix(TSMatrix m, TSMatrix &t) {\n      int nums[m.columns], fpos[m.columns];\n      int i,j,first;\n      t->columns = m.rows; t->rows = m.columns; t->t = m.t;\n      if(m.t){\n          for(i=1;i<m.columns;i++) nums[i]=0;\n          for(i=1;i<m.t;i++) nums[m.data[i].j]++;\n          fpos[1] = 1;\n          for(i=2;i<m.columns;i++) fpos[i] = fpos[i-1] + nums[i-1];\n          for(i=1;i<m.t;i++){\n              j = m.data[i].j;\n              first = fpos[j];\n              t->data[first].i = m.data[j].j;\n              t->data[first].j = m.data[j].i;\n              t->data[first].e = m.data[j].e;\n              fpos[first]++;\n          }\n      }\n      return ok;\n  }\n  ```\n\n  实践复杂度是"}],"loc":{"start":{"line":19,"column":0},"end":{"line":128,"column":8}},"range":[220,2396],"raw":"- 特殊矩阵\n\n  值相同的元素或者零元素在矩阵内的分布存在一定的规律的矩阵，称之为“特殊矩阵”。\n\n- 稀疏矩阵\n\n  在一个m\\*n的矩阵中存在t个元素不为0，称 \n  $$\n  \\delta = \\frac{t}{m*n}\n  $$\n  为矩阵的**稀疏因子**，通常认为\n  $$\n  \\delta \\leq 0.05\n  $$\n  时成为稀疏矩阵。\n\n  1.三元组顺序表\n\n  只存储稀疏矩阵的非零元素，可以使用一个三元组唯一确定一个非零元素，分别记录其行列和值，所以可以使用**三元组顺序表（有序的上下标法）**来存储稀疏矩阵。\n\n  \n  $$\n  (i,j,v)\n  $$\n\n  ```c\n  #define MAXSIZE 12500\n  typedef int ElemType;\n  // 三元组\n  typedef struct {\n      int i, j; // 行和列\n      ElemType e; // 值\n  } Triple;\n  // 三元顺序表\n  typedef struct {\n      Triple data[MAXSIZE+1]; //非零三元顺序表\n      int rows, columns, t; //行数、列数和非零元素数\n  } TSMatrix;\n  ```\n\n  稀疏矩阵的转置：\n\n  - 将矩阵的行列值交换\n  - 将每个三元组的i和j的值交换\n  - 重排三元组之间的次序（以行序为主序排列）\n\n  ```c\n  #define ok 1;\n  typedef int Status;\n  Status TransposeSMatrix (TSMatrix m, TSMatrix &t){\n      int q = 1, row = 1;\n      t->rows = m.columns; t->colums = m.rows; t->t = m.t;\n      if(t.t){\n          for(;row<t->rows;row++){\n              for(;p<t.t;p++){\n                  if(m.data[p].j == row) {\n                      t->data[q].i = m.data[p].j;\n                      t->data[q].j = m.data[p].i;\n                      t->data[q].e = m.data[p].e;\n                      q++;\n                  }\n              }\n          }\n      }\n      return ok;\n  }\n  ```\n\n  时间复杂度：\n  $$\n  O(m.t*m.rows)\n  $$\n  \n\n  当矩阵中非零元素个数 t 接近 m.t * m.rows 时，转置矩阵的时间复杂度接近 \n  $$\n  O(m.rows^{2}*m.columns)\n  $$\n  \n\n  所以本存储方式虽然节省了存储空间，但是提升了转置时的复杂度。\n\n  如果可以预先确定矩阵每一列的第一个非零元素在转置后矩阵中的位置，在依次对各个三元组转置的时候，就可以直接将其放到合适的位置上。\n\n  ```c\n  #define ok 1\n  typedef int Status;\n  Status TransposeSMatrix(TSMatrix m, TSMatrix &t) {\n      int nums[m.columns], fpos[m.columns];\n      int i,j,first;\n      t->columns = m.rows; t->rows = m.columns; t->t = m.t;\n      if(m.t){\n          for(i=1;i<m.columns;i++) nums[i]=0;\n          for(i=1;i<m.t;i++) nums[m.data[i].j]++;\n          fpos[1] = 1;\n          for(i=2;i<m.columns;i++) fpos[i] = fpos[i-1] + nums[i-1];\n          for(i=1;i<m.t;i++){\n              j = m.data[i].j;\n              first = fpos[j];\n              t->data[first].i = m.data[j].j;\n              t->data[first].j = m.data[j].i;\n              t->data[first].e = m.data[j].e;\n              fpos[first]++;\n          }\n      }\n      return ok;\n  }\n  ```\n\n  实践复杂度是"},{"type":"Paragraph","children":[{"type":"Str","value":"$$\nO(m.t+m.columns)\n$$","loc":{"start":{"line":130,"column":0},"end":{"line":132,"column":2}},"range":[2398,2420],"raw":"$$\nO(m.t+m.columns)\n$$"}],"loc":{"start":{"line":130,"column":0},"end":{"line":132,"column":2}},"range":[2398,2420],"raw":"$$\nO(m.t+m.columns)\n$$"},{"type":"Paragraph","children":[{"type":"Str","value":"​\t   当 m.t 与 m.columns * m.rows等级相同时，其时间复杂度与经典算法相同。","loc":{"start":{"line":134,"column":0},"end":{"line":134,"column":51}},"range":[2422,2473],"raw":"​\t   当 m.t 与 m.columns * m.rows等级相同时，其时间复杂度与经典算法相同。"}],"loc":{"start":{"line":134,"column":0},"end":{"line":134,"column":51}},"range":[2422,2473],"raw":"​\t   当 m.t 与 m.columns * m.rows等级相同时，其时间复杂度与经典算法相同。"},{"type":"Paragraph","children":[{"type":"Str","value":"​","loc":{"start":{"line":136,"column":0},"end":{"line":136,"column":1}},"range":[2475,2476],"raw":"​"}],"loc":{"start":{"line":136,"column":0},"end":{"line":136,"column":8}},"range":[2475,2483],"raw":"​       "},{"type":"Paragraph","children":[{"type":"Str","value":"​       2.行逻辑连接顺序表","loc":{"start":{"line":138,"column":0},"end":{"line":138,"column":18}},"range":[2485,2503],"raw":"​       2.行逻辑连接顺序表"}],"loc":{"start":{"line":138,"column":0},"end":{"line":138,"column":18}},"range":[2485,2503],"raw":"​       2.行逻辑连接顺序表"},{"type":"Paragraph","children":[{"type":"Str","value":"​\t   便于随机存取任意一行的非零元，需要知道每一行的第一个非零元在三元组表中的位置。将指示行信息的表固定在稀疏矩阵的存取结构中的三元组表称为","loc":{"start":{"line":140,"column":0},"end":{"line":140,"column":72}},"range":[2505,2577],"raw":"​\t   便于随机存取任意一行的非零元，需要知道每一行的第一个非零元在三元组表中的位置。将指示行信息的表固定在稀疏矩阵的存取结构中的三元组表称为"},{"type":"Strong","children":[{"type":"Str","value":"行逻辑连接的顺序表","loc":{"start":{"line":140,"column":74},"end":{"line":140,"column":83}},"range":[2579,2588],"raw":"行逻辑连接的顺序表"}],"loc":{"start":{"line":140,"column":72},"end":{"line":140,"column":85}},"range":[2577,2590],"raw":"**行逻辑连接的顺序表**"},{"type":"Str","value":"。","loc":{"start":{"line":140,"column":85},"end":{"line":140,"column":86}},"range":[2590,2591],"raw":"。"}],"loc":{"start":{"line":140,"column":0},"end":{"line":140,"column":86}},"range":[2505,2591],"raw":"​\t   便于随机存取任意一行的非零元，需要知道每一行的第一个非零元在三元组表中的位置。将指示行信息的表固定在稀疏矩阵的存取结构中的三元组表称为**行逻辑连接的顺序表**。"},{"type":"Paragraph","children":[{"type":"Str","value":"​\t   3.十字链表","loc":{"start":{"line":144,"column":0},"end":{"line":144,"column":11}},"range":[2595,2606],"raw":"​\t   3.十字链表"}],"loc":{"start":{"line":144,"column":0},"end":{"line":144,"column":11}},"range":[2595,2606],"raw":"​\t   3.十字链表"},{"type":"Paragraph","children":[{"type":"Str","value":"​       同一行的非零元素通过right指针链接成一个链表，同一列的非零元素通过down指针链接成一个链表，每一个非零元素既是某个行链     表中的一个结点，也是某个列链表中的一个结点，整个矩阵构成一个十字交叉的链表。","loc":{"start":{"line":146,"column":0},"end":{"line":146,"column":113}},"range":[2608,2721],"raw":"​       同一行的非零元素通过right指针链接成一个链表，同一列的非零元素通过down指针链接成一个链表，每一个非零元素既是某个行链     表中的一个结点，也是某个列链表中的一个结点，整个矩阵构成一个十字交叉的链表。"}],"loc":{"start":{"line":146,"column":0},"end":{"line":146,"column":113}},"range":[2608,2721],"raw":"​       同一行的非零元素通过right指针链接成一个链表，同一列的非零元素通过down指针链接成一个链表，每一个非零元素既是某个行链     表中的一个结点，也是某个列链表中的一个结点，整个矩阵构成一个十字交叉的链表。"},{"type":"Paragraph","children":[{"type":"Str","value":"​       适合用于非零元素数目变化较大的操作。","loc":{"start":{"line":148,"column":0},"end":{"line":148,"column":26}},"range":[2723,2749],"raw":"​       适合用于非零元素数目变化较大的操作。"}],"loc":{"start":{"line":148,"column":0},"end":{"line":148,"column":26}},"range":[2723,2749],"raw":"​       适合用于非零元素数目变化较大的操作。"},{"type":"Paragraph","children":[{"type":"Image","title":null,"url":"https://i.loli.net/2020/07/25/RtKN17gkUqeQuhb.png","alt":"PNG??.png","loc":{"start":{"line":150,"column":0},"end":{"line":150,"column":63}},"range":[2751,2814],"raw":"![PNG??.png](https://i.loli.net/2020/07/25/RtKN17gkUqeQuhb.png)"}],"loc":{"start":{"line":150,"column":0},"end":{"line":150,"column":63}},"range":[2751,2814],"raw":"![PNG??.png](https://i.loli.net/2020/07/25/RtKN17gkUqeQuhb.png)"},{"type":"Paragraph","children":[{"type":"Str","value":"​","loc":{"start":{"line":152,"column":0},"end":{"line":152,"column":1}},"range":[2816,2817],"raw":"​"}],"loc":{"start":{"line":152,"column":0},"end":{"line":152,"column":5}},"range":[2816,2821],"raw":"​\t   "},{"type":"CodeBlock","lang":"c","meta":null,"value":"typedef struct OLNode {\n    int i,j;\n    ElemType e;\n    struct OLNode *right,*down;\n}OLNode;\n\ntypedef struct {\n    OLNode *rhead, *dhead;\n    int rows, columns, t;\n}","loc":{"start":{"line":154,"column":0},"end":{"line":165,"column":3}},"range":[2823,2998],"raw":"```c\ntypedef struct OLNode {\n    int i,j;\n    ElemType e;\n    struct OLNode *right,*down;\n}OLNode;\n\ntypedef struct {\n    OLNode *rhead, *dhead;\n    int rows, columns, t;\n}\n```"}],"loc":{"start":{"line":1,"column":0},"end":{"line":167,"column":0}},"range":[0,3000],"raw":"---\ntags: ['数据结构','数组']\n---\n\n## 数组\n\n### 数组的定义和存储\n\n> *数组可以看成是数据元素本身也是一种数据结构的线性表*\n>\n> **数组一旦被定义，它的维数和维界就不再发生改变，只有存取元素和修改元素的操作，一般没有插入和删除元素的操作，数组建立后，数组内元素的个数和元素之间的关系就不会再发生改变。**\n>\n> *基于数组的上述特点，采用**顺序结构**存储数组*\n\n\n\n### 矩阵的压缩存储\n\n- 特殊矩阵\n\n  值相同的元素或者零元素在矩阵内的分布存在一定的规律的矩阵，称之为“特殊矩阵”。\n\n- 稀疏矩阵\n\n  在一个m\\*n的矩阵中存在t个元素不为0，称 \n  $$\n  \\delta = \\frac{t}{m*n}\n  $$\n  为矩阵的**稀疏因子**，通常认为\n  $$\n  \\delta \\leq 0.05\n  $$\n  时成为稀疏矩阵。\n\n  1.三元组顺序表\n\n  只存储稀疏矩阵的非零元素，可以使用一个三元组唯一确定一个非零元素，分别记录其行列和值，所以可以使用**三元组顺序表（有序的上下标法）**来存储稀疏矩阵。\n\n  \n  $$\n  (i,j,v)\n  $$\n\n  ```c\n  #define MAXSIZE 12500\n  typedef int ElemType;\n  // 三元组\n  typedef struct {\n      int i, j; // 行和列\n      ElemType e; // 值\n  } Triple;\n  // 三元顺序表\n  typedef struct {\n      Triple data[MAXSIZE+1]; //非零三元顺序表\n      int rows, columns, t; //行数、列数和非零元素数\n  } TSMatrix;\n  ```\n\n  稀疏矩阵的转置：\n\n  - 将矩阵的行列值交换\n  - 将每个三元组的i和j的值交换\n  - 重排三元组之间的次序（以行序为主序排列）\n\n  ```c\n  #define ok 1;\n  typedef int Status;\n  Status TransposeSMatrix (TSMatrix m, TSMatrix &t){\n      int q = 1, row = 1;\n      t->rows = m.columns; t->colums = m.rows; t->t = m.t;\n      if(t.t){\n          for(;row<t->rows;row++){\n              for(;p<t.t;p++){\n                  if(m.data[p].j == row) {\n                      t->data[q].i = m.data[p].j;\n                      t->data[q].j = m.data[p].i;\n                      t->data[q].e = m.data[p].e;\n                      q++;\n                  }\n              }\n          }\n      }\n      return ok;\n  }\n  ```\n\n  时间复杂度：\n  $$\n  O(m.t*m.rows)\n  $$\n  \n\n  当矩阵中非零元素个数 t 接近 m.t * m.rows 时，转置矩阵的时间复杂度接近 \n  $$\n  O(m.rows^{2}*m.columns)\n  $$\n  \n\n  所以本存储方式虽然节省了存储空间，但是提升了转置时的复杂度。\n\n  如果可以预先确定矩阵每一列的第一个非零元素在转置后矩阵中的位置，在依次对各个三元组转置的时候，就可以直接将其放到合适的位置上。\n\n  ```c\n  #define ok 1\n  typedef int Status;\n  Status TransposeSMatrix(TSMatrix m, TSMatrix &t) {\n      int nums[m.columns], fpos[m.columns];\n      int i,j,first;\n      t->columns = m.rows; t->rows = m.columns; t->t = m.t;\n      if(m.t){\n          for(i=1;i<m.columns;i++) nums[i]=0;\n          for(i=1;i<m.t;i++) nums[m.data[i].j]++;\n          fpos[1] = 1;\n          for(i=2;i<m.columns;i++) fpos[i] = fpos[i-1] + nums[i-1];\n          for(i=1;i<m.t;i++){\n              j = m.data[i].j;\n              first = fpos[j];\n              t->data[first].i = m.data[j].j;\n              t->data[first].j = m.data[j].i;\n              t->data[first].e = m.data[j].e;\n              fpos[first]++;\n          }\n      }\n      return ok;\n  }\n  ```\n\n  实践复杂度是\n\n$$\nO(m.t+m.columns)\n$$\n\n​\t   当 m.t 与 m.columns * m.rows等级相同时，其时间复杂度与经典算法相同。\n\n​       \n\n​       2.行逻辑连接顺序表\n\n​\t   便于随机存取任意一行的非零元，需要知道每一行的第一个非零元在三元组表中的位置。将指示行信息的表固定在稀疏矩阵的存取结构中的三元组表称为**行逻辑连接的顺序表**。\n\n\n\n​\t   3.十字链表\n\n​       同一行的非零元素通过right指针链接成一个链表，同一列的非零元素通过down指针链接成一个链表，每一个非零元素既是某个行链     表中的一个结点，也是某个列链表中的一个结点，整个矩阵构成一个十字交叉的链表。\n\n​       适合用于非零元素数目变化较大的操作。\n\n![PNG??.png](https://i.loli.net/2020/07/25/RtKN17gkUqeQuhb.png)\n\n​\t   \n\n```c\ntypedef struct OLNode {\n    int i,j;\n    ElemType e;\n    struct OLNode *right,*down;\n}OLNode;\n\ntypedef struct {\n    OLNode *rhead, *dhead;\n    int rows, columns, t;\n}\n```\n\n"},"catalogue":{"title":"2020-07-24-数组","json-path":"2020-07-24-数组.json","mdate":"2022-08-30T14:19:31.447Z","tags":["数据结构","数组"]}}