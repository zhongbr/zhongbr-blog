{"version":3,"file":"webcomponent.umd.cjs","sources":["../src/core/event/index.ts","../src/utils/logger.ts","../src/core/proxy/index.ts","../src/utils/iframe.ts","../src/type.ts","../src/default.ts","../src/webcomponent.tsx","../src/iframe/html.ts","../src/iframe/iframe.css?used&raw","../src/iframe/index.ts","../src/core/jsx/types.ts","../src/core/jsx/index.ts"],"sourcesContent":["export interface Handler {\n    (...params: unknown[]): void;\n    filter?: (...params: unknown[]) => boolean;\n    once?: boolean;\n}\n\nexport const createEventSubscribeManager = <K = string>() => {\n    const eventsHandlersMap = new Map<K, Array<Handler>>();\n\n    const trigger = (key: K, ...params: unknown[]) => {\n        const handlers = eventsHandlersMap.get(key);\n        if (handlers) {\n            const drops = new Map<number, boolean>();\n            handlers.forEach((handler, index) => {\n                // 存在触发条件，但是不满足的跳过\n                if (handler.filter && !handler.filter(...params)) {\n                    return;\n                }\n                handler(...params);\n                if (handler.once) {\n                    drops.set(index, true);\n                }\n            });\n            eventsHandlersMap.set(key, handlers.filter((_, index) => !drops.get(index)));\n        }\n    }\n\n    const listen = (key: K, cb: Handler, filter?: Handler['filter']) => {\n        if (!eventsHandlersMap.has(key)) {\n            eventsHandlersMap.set(key, []);\n        }\n        eventsHandlersMap.get(key)?.push?.(Object.assign(cb, {\n            filter\n        }));\n        return () => {\n            eventsHandlersMap.get(key)?.filter(handler => handler !== cb);\n        }\n    };\n\n    const once = (key: K, cb: Handler, filter?: Handler['filter'], onTimeout?: () => void, timeout = -1) => {\n        if (!eventsHandlersMap.has(key)) {\n            eventsHandlersMap.set(key, []);\n        }\n        const dispose = () => {\n            eventsHandlersMap.get(key)?.filter(handler => handler !== cb);\n        }\n\n        // 超时\n        let _timeout;\n        if (timeout !== -1) {\n            _timeout = setTimeout(() => {\n                dispose();\n                onTimeout?.();\n            }, timeout);\n        }\n        eventsHandlersMap.get(key)?.push?.(Object.assign((...args) => {\n            if (_timeout) clearTimeout(_timeout);\n            cb(...args);\n        }, {\n            once: true,\n            filter\n        }));\n        return dispose;\n    }\n\n    return { trigger, listen, once };\n}\n","import * as process from \"process\";\n\nconst isProd = process.env.NODE_ENV === 'production';\n\nconst debugOnlyLevel: Array<keyof Console> = ['log', 'debug'];\n\nconst logger = debugOnlyLevel.reduce((pre, key) => {\n    return Object.assign(pre, {\n        [key]: (...args: unknown[]) => {\n            if (!isProd) {\n                return typeof console[key] === 'function' && (console[key] as Function)(...args);\n            }\n            return null;\n        }\n    });\n}, {} as Pick<Console, 'log' | 'info' | 'debug' | 'error' | 'warn'>);\nexport default logger;\n","import logger from '../../utils/logger';\n\nexport interface IMessageType {\n    id: string | number;\n    receiver?: string;\n    method?: string;\n    payload: unknown[];\n    error: boolean;\n    timeout?: number;\n    __proxy_internal: 'reply' | 'call' | 'wait' | 'wait-reply';\n}\n\nexport interface ICallOpt<T, M, P> {\n    timeout?: number;\n    win: WindowProxy | Worker;\n    serviceId: string;\n    method: M;\n    payload: P;\n}\n\n// 当前消息的id，每次自增\nlet MessageID = 0;\nconst getMessageId = () => MessageID++;\n\n// 已注册的服务\nconst services = new Set();\n// 等待服务注册的回调\nconst waitServiceCallbacks: Map<string, Function[]> = new Map();\n// 监听等待服务的消息\nself.addEventListener('message', e => {\n    const message = e.data as IMessageType;\n    // 不是代理的消息忽略\n    if (Reflect.get(message, '__proxy_internal') !== 'wait') {\n        return;\n    }\n    // 去除等待服务id\n    const serviceId = message.receiver;\n    // 插入一个回调函数，回复消息，设置一个超时时间\n    const timeout_ = setTimeout(() => {\n        const callbacks = (waitServiceCallbacks.get(serviceId) || []).filter(c => c !== callback);\n        waitServiceCallbacks.set(serviceId, callbacks);\n        (e.source || self).postMessage({\n            __proxy_internal: 'wait-reply',\n            error: true,\n            id: message.id,\n            payload: [`[proxy]wait for service ${serviceId} timeout.`]\n        } as IMessageType);\n    }, message!.timeout);\n    const callback = () => {\n        clearTimeout(timeout_);\n        (e.source || self).postMessage({\n            __proxy_internal: 'wait-reply',\n            id: message.id,\n            error: false,\n            payload: []\n        } as IMessageType);\n        const callbacks = (waitServiceCallbacks.get(serviceId) || []).filter(c => c !== callback);\n        waitServiceCallbacks.set(serviceId, callbacks);\n    };\n    // 将回调函数加入队列\n    const callbacks = waitServiceCallbacks.get(serviceId) || [];\n    callbacks.push(callback);\n    waitServiceCallbacks.set(serviceId, callbacks);\n    // 如果服务已经注册过了，直接调用 callback\n    if (services.has(serviceId)) {\n        callback();\n    }\n});\n\n/**\n * 注册一个可以被其他 Window 通过 postMessage 调用的对象\n * @param serviceId 服务的名称\n * @param obj 要被代理的对象\n */\nexport function registerProxy<T extends Object>(serviceId: string, obj: T) {\n    if (services.has(serviceId)) {\n        return;\n    }\n    // 标记服务已经注册\n    services.add(serviceId);\n    // 如果有等待这个服务的回调，现在就可以调用了\n    const callbacks = waitServiceCallbacks.get(serviceId);\n    if (callbacks) callbacks.forEach(callback => callback());\n    // 监听事件\n    self.addEventListener('message', async e => {\n        const message = e.data as IMessageType;\n        // 不是代理的消息忽略\n        if (Reflect.get(message, '__proxy_internal') !== 'call') {\n            return;\n        }\n        if (message.receiver === serviceId) {\n            const method = Reflect.get(obj, message.method) as unknown | ((...args: unknown[]) => unknown);\n            // 调用了不存在的方法，回复对方一个错误\n            if (!method) {\n                (e.source || self).postMessage({\n                    __proxy_internal: 'reply',\n                    id: message.id,\n                    error: true,\n                    payload: [`[proxy] method \\`${message.method}\\` does not exist on remote object ${message.receiver} or it is not a function.`]\n                } as IMessageType);\n            }\n            let res: unknown = method;\n            if (typeof method === \"function\") {\n                // 调用方法回复结果\n                res = await method(...message.payload, e);\n            }\n            logger.debug('[proxy] reply', self?.location?.href || 'worker', e.source, message.receiver, message.method, (e.source || self));\n            (e.source || self).postMessage({\n                __proxy_internal: 'reply',\n                id: message.id,\n                error: false,\n                payload: [res]\n            } as IMessageType);\n        }\n    });\n}\n\n/**\n * 等待目标上下文的某个服务准备好\n * @param win 目标上下文\n * @param serviceId 要等待的服务\n * @param timeout 超时时间\n */\nexport async function waitProxy(win: WindowProxy | Worker, serviceId: string, timeout = 10000) {\n    return new Promise((resolve, reject) => {\n        const messageId = getMessageId();\n        // 监听的自己的事件，处理回复的消息\n        const timeout_ = setTimeout(() => {\n            self.removeEventListener('message', callback);\n            reject(`[proxy] wait for ${serviceId} timeout .`);\n        }, timeout);\n        const callback: EventListener = (e: MessageEvent) => {\n            if ((e.source || self) !== win) return;\n            const message = e.data as IMessageType;\n            if (Reflect.get(message, '__proxy_internal') !== 'wait-reply' || message.id !== messageId) {\n                return;\n            }\n            resolve(null);\n            clearTimeout(timeout_);\n            self.removeEventListener('message', callback);\n        };\n        self.addEventListener('message', callback);\n        // 向目标上下文发送一个消息，表示自己在等待某个服务完成\n        win.postMessage({\n            __proxy_internal: 'wait',\n            receiver: serviceId,\n            payload: [],\n            error: false,\n            id: messageId\n        } as IMessageType);\n    });\n}\n\n/**\n * 调用 win 上下文中提供的服务\n * @param win 要调用的服务所在的上下文\n * @param serviceId 服务的名称\n * @param method 调用的方法\n * @param payload 要传递的参数\n * @param timeout 超时时间\n */\nexport async function callProxy<\n    T extends Object,\n    M extends keyof T = any,\n    P = T[M] extends (...args: unknown[]) => any ? Parameters<T[M]> : any\n>({ win, serviceId, method, payload, timeout = 10000 }: ICallOpt<T, M, P>) {\n    return new Promise<unknown>((resolve, reject) => {\n        const messageId = getMessageId();\n        // 如果调用的是 worker，需要在 worker 上监听\n        let handler: Pick<Window, 'removeEventListener' | 'addEventListener'> = self;\n        if (win instanceof Worker) {\n            handler = win;\n        }\n        // 注册等待回复的消息\n        let timeout_ = setTimeout(() => {\n            reject(`call remote object ${serviceId} method ${method.toString()} timeout`);\n            handler.removeEventListener('message', callback);\n        }, timeout);\n        const callback: EventListener = (e: MessageEvent) => {\n            if (!(win instanceof Worker) && (e.source || self) !== win) return;\n            const message = e.data as IMessageType;\n            if (Reflect.get(message, '__proxy_internal') !== 'reply' || message.id !== messageId) return;\n            handler.removeEventListener('message', callback);\n            clearTimeout(timeout_);\n            logger.debug('[proxy] receive reply', self?.location?.href || 'worker', message.id);\n            if (message.error) {\n                reject(message.payload[0]);\n                return;\n            }\n            resolve(message.payload[0]);\n        };\n        handler.addEventListener('message', callback);\n        logger.debug('[proxy] call', self?.location?.href || 'worker', serviceId, method);\n        // 调用远程的方法\n        win.postMessage({\n            id: messageId,\n            __proxy_internal: 'call',\n            receiver: serviceId,\n            method,\n            payload,\n            error: false\n        } as IMessageType);\n    });\n}\n","import { createEventSubscribeManager } from '../core/event';\nimport { callProxy, registerProxy } from '../core/proxy';\n\nconst EVENT_KEY = 'iframe-message-type';\nconst NOTIFICATION_SERVICE = 'iframe-notification-service';\n\ninterface INotificationService {\n    /** iframe 加载完成 */\n    iframeReady: (e: MessageEvent) => Promise<boolean>;\n    iframeLoadingModule: (moduleName: string, moduleUrl: string, e: MessageEvent) => Promise<void>;\n}\n\nconst emitter = createEventSubscribeManager<keyof INotificationService>();\n\n/**\n * 注册主进程中的服务，监听消息\n */\nexport const initMainThreadService = async () => {\n    const service: INotificationService = {\n        iframeReady: async (e) => {\n            console.log('iframe ready', e);\n            emitter.trigger('iframeReady', e);\n            return true;\n        },\n        iframeLoadingModule: async (moduleName, moduleUrl, e) => {\n            emitter.trigger('iframeLoadingModule', moduleName, moduleUrl, e);\n        }\n    }\n    registerProxy(NOTIFICATION_SERVICE, service);\n};\n\n/**\n * 主页面中，等待指定的 iframe 运行环境加载完成\n * @param iframe 要等待的 iframe\n * @param timeout 超时时间\n */\nexport const waitIframeReady = async (iframe: HTMLIFrameElement, timeout=10000) => {\n    // 被动监听 iframe 发送的消息来得知 iframe 已经加载，避免调用时 iframe 端还未准备好而导致的消息丢失\n    const listenTask = new Promise<null>((resolve, reject) => {\n        if (iframe.getAttribute('data-iframe-status') !== 'loaded') {\n            emitter.once(\n                'iframeReady',\n                (...args) => {\n                    iframe.setAttribute('data-iframe-status', 'loaded');\n                    resolve(null);\n                },\n                (e: MessageEvent) => e.source === iframe.contentWindow,\n                reject,\n                timeout\n            );\n        }\n        else {\n            resolve(null);\n        }\n    });\n    // 主动调用 iframe 暴露的接口查询是否准备好\n    const queryTask = callProxy<Pick<INotificationService, 'iframeReady'>>({\n        win: iframe.contentWindow,\n        serviceId: NOTIFICATION_SERVICE,\n        method: 'iframeReady',\n        payload: [],\n        timeout\n    });\n    // 两个查询方式 race，取返回快的结果\n    return Promise.race([listenTask, queryTask]);\n}\n\n/**\n * 通知外部容器，iframe 内部已经加载完成的函数\n */\nexport const iframeReady = async () => {\n    registerProxy<Pick<INotificationService, 'iframeReady'>>(NOTIFICATION_SERVICE, {\n        iframeReady: async () => {\n            return true;\n        }\n    });\n    const parent = window.top || window.parent || window.opener;\n    if (!parent) return;\n    return callProxy<INotificationService>({\n        win: parent,\n        serviceId: NOTIFICATION_SERVICE,\n        method: 'iframeReady',\n        payload: []\n    });\n}\n\n/**\n * 监听指定的 iframe 内加载模块\n * @param iframe 要监听的 iframe\n * @param cb 回调函数\n */\nexport const onIframeLoadingModule = (iframe: HTMLIFrameElement, cb: (moduleName: string, extraInfo: string) => void) => {\n    emitter.listen('iframeLoadingModule', cb, (moduleName, extraInfo, e: MessageEvent) => e.source === iframe.contentWindow);\n};\n\n/**\n * 通知外部容器，iframe 内部正在加载模块的函数\n * @param moduleName\n * @param extraInfo\n */\nexport const iframeLoadingModule = async (moduleName: string, extraInfo: string) => {\n    const parent = window.top || window.parent || window.opener;\n    if (!parent) return;\n    return callProxy<INotificationService>({\n        win: parent,\n        serviceId: NOTIFICATION_SERVICE,\n        method: 'iframeLoadingModule',\n        payload: [moduleName, extraInfo]\n    });\n};\n","export const DemoServiceName = 'demo-service';\n\n\nexport interface IDemoService {\n    defineModule: (name: string, deps: string[], factory: string) => Promise<boolean>;\n    executeModule: (name: string) => Promise<boolean>;\n    setStyle: (name: string) => Promise<boolean>;\n}\n","export const DefaultDemoCode =\n    `import React from 'react';\n// Load umd modules support \\`unpkg\\` like ant-design automatically, you just need to import it.\n// Others umd modules without \\`unpkg\\` field in package.json, you can specific path manually.\nimport { Form, Button, Modal, Input } from 'antd';\nimport HelloModule from 'hello-module';\n\nconst { Item, useForm, useWatch } = Form;\n\nconst App = (props) => {\n    const [form] = useForm();\n    const username = useWatch('username', form);\n    \n    const onFinish = () => {\n        const password = form.getFieldValue('password');\n        if (password !== '123456') {\n            Modal.error({\n                title: '登录失败',\n                content: '登录失败，密码错误！'\n            });\n            return;\n        }\n        Modal.success({\n            title: '登录成功',\n            content: '登录成功'\n        });\n    };\n\n    return (\n        <div style={{ textAlign: 'center' }}>\n            <HelloModule/>\n            <div className=\"title\">title class</div>\n            <Form\n                form={form}\n                onFinish={onFinish}\n                labelCol={{ span: 4 }}\n                wrapperCol={{ span: 20 }}\n            >\n                <Item label=\"用户名\" name=\"username\">\n                    <Input placeholder=\"请输入用户名\"/>\n                </Item>\n                <Item label=\"密码\" name=\"password\">\n                    <Input type=\"password\" placeholder={\\`请输入 \\${username} 的密码\\`} />\n                </Item>\n                <Item>\n                    <Button type=\"primary\" htmlType=\"submit\">提交</Button>\n                </Item>\n            </Form>\n        </div>\n    );\n}\nexport default App;`;\n\nexport const DefaultIndexCode =\n    `import React from 'react';\nimport ReactDom from 'react-dom';\nimport App from './App';\n\nReactDom.render(<App/>, document.getElementById('root'));`;\n\nexport const DepsCommonHeader =\n    `//============================================================\n// Do not modify following import and export statements\nimport * as React from 'react';\nimport { define, _import } from 'module-manager';\nexport default 'module-valid';\n//=============================================================\n// 🚀🚀 Declare where to insert module script tags.\nexport const body = document.body;\n\n// 🚀🚀 This is a function declared how to resolve module script when require a module doesn't exist.\n// export async function resolve(packageName, version, file) {\n//     const versionSuffix = version ? \\`@\\${version}\\` : '';\n//     const fileSuffix = file ? \\`\\${file}\\` : '';\n//     // \\`return false\\` to cancel auto require deps.\n//     return \\`https://unpkg.com/\\${packageName}\\${versionSuffix}\\${fileSuffix}\\`;\n// }\n\n// 🚀🚀 You can define your dependencies here:\ndefine('version', [], () => ({ 'default': '1.0.0' }));\n`;\n\nexport const DefaultDepsCode =\n    `${DepsCommonHeader}\n// 🚀 e.g.1 Custom Module: call define functions, pass the module name and an async module function to it just like:\ndefine('hello-module', ['require', 'jquery'], async (require, jq) => {\n    // 🚀You can call \\`_require\\` function ** asynchronously ** to get others modules.\n    // Please pay attention to the ** cycle dependencies **.\n    const jq2 = await require('jquery');\n    \n    // Some others statements to generate the module.\n    \n    // Return things you want to export as an object, you can specify \\`default\\` property for the ES Module default import.\n    return {\n        // 🚀Jsx can be used ! \n        'default': () => {\n            const onclick = () => jq('#_hello_demo')[0].style.setProperty('color', 'red');\n            return <div id=\"_hello_demo\" style={{ marginBottom: '16px' }} onClick={onclick}>Login Page</div>;\n        }\n    };\n});\n\n// 🚀 e.g.2 Public scripts that mount export result on window or global.\n// 📢 this function is not effective for umd script, please import umd script directly, it will be load automatically.\n// define('module-name', [], _import('https://xxxx.xxxx', 'objectName'));`\n\nexport const DefaultCssCode =\n    `.title { color: blue }`;\n\nexport const Placeholder = '<h3> 🚀 Welcome to use code sandbox. </h3>';\n\nexport const formatDeps = (deps: Array<{ url: string; obj: string; id: string; }>) => [DepsCommonHeader, deps?.map(dep => {\n    return `define('${dep.id}', ['require'], _import('${dep.url}', '${dep.obj}'));`;\n})].join('\\n');\n","import { getIframeHTML, iframeStyles, getSandboxRefresher } from './iframe';\nimport * as DefaultCodes from './default';\nimport { IProps as IDemoProps } from \"./index\";\nimport { onIframeLoadingModule, initMainThreadService } from './utils/iframe';\n\n// 生成转化 jsx 代码的 worker 服务\nimport('./core/jsx').then(({ getJsxService }) => {\n    getJsxService();\n});\n\ninitMainThreadService();\n\ndeclare global {\n    namespace JSX {\n        interface IntrinsicElements {\n            'code-sandbox': IDemoProps;\n        }\n    }\n}\n\nclass CodeSandbox extends HTMLElement {\n    private iframe: HTMLIFrameElement;\n    private styleElement: HTMLStyleElement;\n\n    public onLoadingModule: (moduleName: string, url: string) => void;\n\n    constructor() {\n        super();\n        this.initIframe();\n\n        const shadowRoot = this.attachShadow({ mode: 'open' });\n        shadowRoot.append(this.styleElement, this.iframe);\n    }\n\n    private initIframe() {\n        const [srcDoc, src] = getIframeHTML(this.getAttribute('placeholder') || DefaultCodes.Placeholder);\n\n        this.iframe = document.createElement('iframe');\n        this.iframe.srcdoc = srcDoc;\n        this.iframe.src = src;\n        this.iframe.setAttribute('class', `code-sandbox-iframe ${this.getAttribute('class') || ''}`);\n        this.iframe.setAttribute('style', this.getAttribute('style'));\n\n        // 监听 iframe 内加载模块，并分发对象的事件\n        onIframeLoadingModule(this.iframe, (moduleName, extraInfo) => {\n            this.onLoadingModule?.(moduleName, extraInfo);\n            this.dispatchEvent(new CustomEvent('loading-module', {\n                detail: {\n                    moduleName,\n                    url: extraInfo\n                }\n            }));\n        });\n\n        this.styleElement = document.createElement('style');\n        this.styleElement.innerText = iframeStyles;\n    }\n\n    static get observedAttributes() {\n        return ['code', 'css', 'index', 'settings', 'class', 'style', 'placeholder'];\n    }\n\n    public async attributeChangedCallback(name: string, oldValue, newValue) {\n        const settings = this.getAttribute('settings') || DefaultCodes.DefaultDepsCode;\n        const index = this.getAttribute('index') || DefaultCodes.DefaultIndexCode;\n        const code = this.getAttribute('code') || DefaultCodes.DefaultDemoCode;\n        const css = this.getAttribute('css') || DefaultCodes.DefaultCssCode;\n\n        const { refreshSettings, refreshApp, refreshIndex, refreshStyle } = getSandboxRefresher({\n            iframe: this.iframe,\n            settings,\n            index,\n            code,\n            css\n        });\n        const tasks = [];\n        switch (name) {\n            case 'settings': {\n                tasks.push(refreshSettings())\n                break;\n            }\n            case 'code': {\n                tasks.push(refreshApp());\n                break;\n            }\n            case 'index': {\n                tasks.push(refreshIndex());\n                break;\n            }\n            case 'css': {\n                tasks.push(refreshStyle());\n                break;\n            }\n            default: {\n                this.iframe.setAttribute(name, newValue);\n            }\n        }\n        return Promise.all(tasks);\n    }\n}\n\nif (!customElements.get('code-sandbox')) {\n    customElements.define('code-sandbox', CodeSandbox);\n}\nexport { DefaultCodes, CodeSandbox };\n","import iframeScriptUrl from '@/iframe/iframe?url';\nimport iframeStyles_ from './iframe.css?raw';\n\nexport const getIframeHTML = (placeholder: string = '') => {\n    const srcDoc =\n`<html lang=\"en\">\n    <head>\n        <title>Demo Sandbox</title>\n        <script type=\"module\" src=\"${iframeScriptUrl}\"></script>\n    </head>\n    <body>\n        <noscript>Need javascript to run this demo page.</noscript>\n        <div id=\"root\">\n            ${placeholder}\n        </div>\n    </body>\n</html>`;\n    const src = `data:text/html,${encodeURIComponent(srcDoc)}`;\n    return [srcDoc, src];\n};\n\nexport const iframeStyles: string = iframeStyles_;\n","export default \".code-sandbox-iframe {\\n    border-width: 0;\\n    background-color: #ffffff;\\n}\\n\"","import { waitIframeReady, onIframeLoadingModule } from \"../utils/iframe\";\nimport { callProxy, waitProxy } from \"../core/proxy\";\nimport { DemoServiceName, IDemoService } from \"../type\";\n\nexport interface IOptions {\n    iframe: HTMLIFrameElement | null;\n    index?: string;\n    code?: string;\n    settings?: string;\n    css?: string;\n    className?: string;\n    style?: string;\n}\n\nexport const getSandboxRefresher = (opt: IOptions) => {\n    const { iframe, code, index, settings, css, className, style } = opt;\n\n    /**\n     * 定义并运行一个模块\n     * @param name 模块的名称/路径\n     * @param deps 模块的依赖\n     * @param code 模块的代码\n     */\n    const defineAndRunModule = async (name: string, deps: string[], code: string) => {\n        if (!iframe || !code) return;\n        // 等待 demo iframe 提供的服务准备好\n        await waitIframeReady(iframe);\n        await waitProxy(iframe.contentWindow, DemoServiceName);\n        // 调用 iframe 提供的服务\n        await callProxy<IDemoService, 'defineModule'>({\n            win: iframe.contentWindow,\n            serviceId: DemoServiceName,\n            method: 'defineModule',\n            payload: [name, deps, code]\n        });\n        await callProxy<IDemoService, 'executeModule'>({\n            win: iframe.contentWindow,\n            serviceId: DemoServiceName,\n            method: 'executeModule',\n            payload: [name]\n        });\n    };\n\n    const refreshIndex = async () => {\n        await defineAndRunModule('/index', ['require'], index);\n    }\n\n    const refreshApp = async () => {\n        await defineAndRunModule('/App', ['require'], code);\n        await refreshIndex();\n    }\n\n    const refreshSettings = async () => {\n        await defineAndRunModule('/settings', ['require'], settings);\n        await refreshApp();\n    }\n\n    const refreshStyle = async () => {\n        if (!iframe || !css) return;\n        await waitIframeReady(iframe);\n        await waitProxy(iframe.contentWindow, DemoServiceName);\n        await callProxy<IDemoService, 'setStyle'>({\n            win: iframe.contentWindow,\n            serviceId: DemoServiceName,\n            method: 'setStyle',\n            payload: [css]\n        });\n    };\n\n    return { refreshApp, refreshIndex, refreshSettings, refreshStyle };\n};\nexport { getIframeHTML, iframeStyles } from './html';\n","export interface IService {\n    transformJsxComponentCode: (code: string) => Promise<{ code: string; deps: string[]; }>;\n}\n\nexport const ServiceName = 'jsx-service';\n","import { callProxy, registerProxy } from '../proxy';\nimport { IService, ServiceName } from './types';\n// @ts-ignore\nimport worker_ from './worker.worker?worker&inline';\n\nlet service: IService;\n\n/**\n * 给本地页面使用的 service\n */\nexport const getJsxService: () => IService = () => {\n    if (service) return service;\n    const worker = worker_();\n    // 在主进程生成一个调用 worker 内方法的代理对象\n    service = {\n        transformJsxComponentCode: async (code: string) => {\n            return await callProxy<IService>({\n                win: worker,\n                serviceId: ServiceName,\n                method: 'transformJsxComponentCode',\n                payload: [code],\n            }) as ReturnType<IService['transformJsxComponentCode']>;\n        }\n    };\n    // 将worker代理对象注册未主进程的代理对象，供其他的 iframe 等调用\n    registerProxy<IService>(ServiceName, service);\n}\n"],"names":["logger","reduce","pre","key","Object","assign","args","console","MessageID","getMessageId","services","Set","waitServiceCallbacks","Map","registerProxy","serviceId","obj","has","add","callbacks","get","forEach","callback","self","addEventListener","async","e","message","data","Reflect","receiver","method","source","postMessage","__proxy_internal","id","error","payload","res","debug","_a","location","href","waitProxy","win","timeout","Promise","resolve","reject","messageId","timeout_","setTimeout","removeEventListener","clearTimeout","callProxy","handler","Worker","toString","filter","c","set","push","NOTIFICATION_SERVICE","emitter","eventsHandlersMap","trigger","params","handlers","drops","index","once","_","listen","cb","_b","call","onTimeout","dispose","_timeout","createEventSubscribeManager","waitIframeReady","iframe","listenTask","getAttribute","setAttribute","contentWindow","queryTask","race","DemoServiceName","DefaultDemoCode","DefaultIndexCode","DepsCommonHeader","DefaultDepsCode","DefaultCssCode","Placeholder","deps","map","dep","url","join","then","getJsxService","iframeReady","log","iframeLoadingModule","moduleName","moduleUrl","CodeSandbox","HTMLElement","constructor","this","initIframe","attachShadow","mode","append","styleElement","srcDoc","src","placeholder","encodeURIComponent","getIframeHTML","DefaultCodes.Placeholder","document","createElement","srcdoc","extraInfo","onLoadingModule","dispatchEvent","CustomEvent","detail","innerText","observedAttributes","name","oldValue","newValue","settings","DefaultCodes.DefaultDepsCode","DefaultCodes.DefaultIndexCode","code","DefaultCodes.DefaultDemoCode","css","DefaultCodes.DefaultCssCode","refreshSettings","refreshApp","refreshIndex","refreshStyle","opt","className","style","defineAndRunModule","getSandboxRefresher","tasks","all","customElements","define","ServiceName","service","worker","worker_","transformJsxComponentCode"],"mappings":"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"}