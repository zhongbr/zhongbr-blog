{"version":3,"file":"iframe.js","sources":["../../src/utils/logger.ts","../../src/core/proxy/index.ts","../../src/core/amd/scriptLoader.ts","../../src/core/amd/types.ts","../../src/core/amd/define.ts","../../../../node_modules/.pnpm/path-browserify@1.0.1/node_modules/path-browserify/index.js","../../src/core/amd/require.ts","../../src/core/event/index.ts","../../src/core/amd/index.ts","../../src/core/files-system/types.ts","../../src/utils/iframe.ts","../../src/core/files-system/sync.ts","../../src/type.ts","../../src/iframe/generatePlugins.ts","../../src/core/dep-graph/index.ts","../../src/iframe/iframe.ts"],"sourcesContent":["const isProd = import.meta.env.PROD;\n\nconst debugOnlyLevel: Array<keyof Console> = ['log', 'debug'];\n\nconst logger = debugOnlyLevel.reduce((pre, key) => {\n    return Object.assign(pre, {\n        [key]: (...args: unknown[]) => {\n            if (!isProd) {\n                return typeof console[key] === 'function' && (console[key] as Function)(...args);\n            }\n            return null;\n        }\n    });\n}, {} as Pick<Console, 'log' | 'info' | 'debug' | 'error' | 'warn'>);\n\nexport default logger;\n","import logger from '../../utils/logger';\n\nexport interface IMessageType {\n    id: string | number;\n    receiver?: string;\n    method?: string;\n    payload: unknown[];\n    error: boolean;\n    timeout?: number;\n    __proxy_internal: 'reply' | 'call' | 'wait' | 'wait-reply';\n}\n\nexport interface ICallOpt<T, M, P> {\n    timeout?: number;\n    win: WindowProxy | Worker;\n    serviceId: string;\n    method: M;\n    payload: P;\n}\n\n// 当前消息的id，每次自增\nlet MessageID = 0;\nconst getMessageId = () => MessageID++;\n\n// 已注册的服务\nconst services = new Set();\n// 等待服务注册的回调\nconst waitServiceCallbacks: Map<string, Function[]> = new Map();\n// 监听等待服务的消息\nself.addEventListener('message', e => {\n    const message = e.data as IMessageType;\n    // 不是代理的消息忽略\n    if (typeof message !== 'object' || Reflect.get(message, '__proxy_internal') !== 'wait') {\n        return;\n    }\n    // 去除等待服务id\n    const serviceId = message.receiver;\n    // 插入一个回调函数，回复消息，设置一个超时时间\n    const timeout_ = setTimeout(() => {\n        const callbacks = (waitServiceCallbacks.get(serviceId) || []).filter(c => c !== callback);\n        waitServiceCallbacks.set(serviceId, callbacks);\n        (e.source || self).postMessage({\n            __proxy_internal: 'wait-reply',\n            error: true,\n            id: message.id,\n            payload: [`[proxy]wait for service ${serviceId} timeout.`]\n        } as IMessageType, {\n            targetOrigin: '*'\n        });\n    }, message!.timeout);\n    const callback = () => {\n        clearTimeout(timeout_);\n        (e.source || self).postMessage({\n            __proxy_internal: 'wait-reply',\n            id: message.id,\n            error: false,\n            payload: []\n        } as IMessageType, {\n            targetOrigin: '*'\n        });\n        const callbacks = (waitServiceCallbacks.get(serviceId) || []).filter(c => c !== callback);\n        waitServiceCallbacks.set(serviceId, callbacks);\n    };\n    // 将回调函数加入队列\n    const callbacks = waitServiceCallbacks.get(serviceId) || [];\n    callbacks.push(callback);\n    waitServiceCallbacks.set(serviceId, callbacks);\n    // 如果服务已经注册过了，直接调用 callback\n    if (services.has(serviceId)) {\n        callback();\n    }\n});\n\n/**\n * 注册一个可以被其他 Window 通过 postMessage 调用的对象\n * @param serviceId 服务的名称\n * @param obj 要被代理的对象\n */\nexport function registerProxy<T extends Object>(serviceId: string, obj: T) {\n    if (services.has(serviceId)) {\n        return;\n    }\n    // 标记服务已经注册\n    services.add(serviceId);\n    // 如果有等待这个服务的回调，现在就可以调用了\n    const callbacks = waitServiceCallbacks.get(serviceId);\n    if (callbacks) callbacks.forEach(callback => callback());\n    // 监听事件\n    const serviceHandler = async e => {\n        const message = e.data as IMessageType;\n        // 不是代理的消息忽略\n        if (typeof message !== 'object' || Reflect.get(message, '__proxy_internal') !== 'call') {\n            return;\n        }\n        if (message.receiver === serviceId) {\n            const method = Reflect.get(obj, message.method) as unknown | ((...args: unknown[]) => unknown);\n            // 调用了不存在的方法，回复对方一个错误\n            if (!method) {\n                (e.source || self).postMessage({\n                    __proxy_internal: 'reply',\n                    id: message.id,\n                    error: true,\n                    payload: [`[proxy] method \\`${message.method}\\` does not exist on remote object ${message.receiver} or it is not a function.`]\n                } as IMessageType, {\n                    targetOrigin: '*'\n                });\n            }\n            let res: unknown = method;\n            if (typeof method === \"function\") {\n                // 调用方法回复结果\n                res = await method.call(obj, ...message.payload, e);\n            }\n            logger.debug('[proxy] reply', self?.location?.href || 'worker', e.source, message.receiver, message.method, (e.source || self));\n            (e.source || self).postMessage({\n                __proxy_internal: 'reply',\n                id: message.id,\n                error: false,\n                payload: [res]\n            } as IMessageType, {\n                targetOrigin: '*'\n            });\n        }\n    };\n    self.addEventListener('message', serviceHandler);\n    return () => {\n        self.removeEventListener('message', serviceHandler);\n    };\n}\n\n/**\n * 等待目标上下文的某个服务准备好\n * @param win 目标上下文\n * @param serviceId 要等待的服务\n * @param timeout 超时时间\n */\nexport async function waitProxy(win: WindowProxy | Worker, serviceId: string, timeout = 10000) {\n    return new Promise((resolve, reject) => {\n        const messageId = getMessageId();\n        // 监听的自己的事件，处理回复的消息\n        const timeout_ = setTimeout(() => {\n            self.removeEventListener('message', callback);\n            reject(`[proxy] wait for ${serviceId} timeout .`);\n        }, timeout);\n        const callback: EventListener = (e: MessageEvent) => {\n            if ((e.source || self) !== win) return;\n            const message = e.data as IMessageType;\n            if (typeof message !== 'object' || Reflect.get(message, '__proxy_internal') !== 'wait-reply' || message.id !== messageId) {\n                return;\n            }\n            resolve(null);\n            clearTimeout(timeout_);\n            self.removeEventListener('message', callback);\n        };\n        self.addEventListener('message', callback);\n        // 向目标上下文发送一个消息，表示自己在等待某个服务完成\n        win.postMessage({\n            __proxy_internal: 'wait',\n            receiver: serviceId,\n            payload: [],\n            error: false,\n            id: messageId\n        } as IMessageType, {\n            targetOrigin: '*'\n        });\n    });\n}\n\n/**\n * 调用 win 上下文中提供的服务\n * @param win 要调用的服务所在的上下文\n * @param serviceId 服务的名称\n * @param method 调用的方法\n * @param payload 要传递的参数\n * @param timeout 超时时间\n */\nexport async function callProxy<\n    T extends Object,\n    M extends keyof T = any,\n    P = T[M] extends (...args: unknown[]) => any ? Parameters<T[M]> : any\n>({ win, serviceId, method, payload, timeout = 10000 }: ICallOpt<T, M, P>) {\n    return new Promise<unknown>((resolve, reject) => {\n        const messageId = getMessageId();\n        // 如果调用的是 worker，需要在 worker 上监听\n        let handler: Pick<Window, 'removeEventListener' | 'addEventListener'> = self;\n        if (win instanceof Worker) {\n            handler = win;\n        }\n        // 注册等待回复的消息\n        let timeout_ = setTimeout(() => {\n            reject(`call remote object ${serviceId} method ${method.toString()} timeout`);\n            handler.removeEventListener('message', callback);\n        }, timeout);\n        const callback: EventListener = (e: MessageEvent) => {\n            if (!(win instanceof Worker) && (e.source || self) !== win) return;\n            const message = e.data as IMessageType;\n            if (typeof message !== 'object' || Reflect.get(message, '__proxy_internal') !== 'reply' || message.id !== messageId) return;\n            handler.removeEventListener('message', callback);\n            clearTimeout(timeout_);\n            logger.debug('[proxy] receive reply', self?.location?.href || 'worker', message.id);\n            if (message.error) {\n                reject(message.payload[0]);\n                return;\n            }\n            resolve(message.payload[0]);\n        };\n        handler.addEventListener('message', callback);\n        logger.debug('[proxy] call', self?.location?.href || 'worker', serviceId, method);\n        // 调用远程的方法\n        win.postMessage({\n            id: messageId,\n            __proxy_internal: 'call',\n            receiver: serviceId,\n            method,\n            payload,\n            error: false\n        } as IMessageType, {\n            targetOrigin: '*'\n        });\n    });\n}\n","import { IAmdModuleManagerContext, IScriptLoader, IScriptLoadTask } from './types';\n\nexport default function bindScriptLoaderToCtx(ctx: IAmdModuleManagerContext) {\n    let loadingModuleName = '';\n    const scriptLoadingTasks: IScriptLoader['scriptLoadingTasks'] = [];\n    const loadScript = async (dom: HTMLElement, url: string, moduleName = 'globalObj') => {\n        // 由于有可能存在匿名模块，为了能区分开这些模块，一次只能加载一个脚本\n        if (loadingModuleName) {\n            await new Promise(resolve => {\n                (resolve as IScriptLoadTask).moduleName = moduleName;\n                scriptLoadingTasks.push(resolve as IScriptLoadTask);\n            });\n        }\n        return new Promise((resolve, reject) => {\n            const script = document.createElement('script');\n            // 设置一个超时时间\n            const timeout = setTimeout(() => {\n                    ctx.logger.log('[amd] script load timeout ' + moduleName);\n                    reject(new Error(`load module ${moduleName} timeout`));\n                    // 加载下一个脚本\n                    scriptLoadingTasks.shift()?.();\n                }, ctx.scriptTimeout);\n\n            script.onload = () => {\n                ctx.logger.log('[amd] script resolved', loadingModuleName);\n                clearTimeout(timeout);\n                resolve(null);\n                loadingModuleName = '';\n                // 加载下一个脚本\n                scriptLoadingTasks.shift()?.();\n            }\n\n            script.onerror = (err) => {\n                ctx.logger.log('[amd] script rejected', loadingModuleName);\n                clearTimeout(timeout);\n                reject(err);\n                loadingModuleName = '';\n                // 加载下一个脚本\n                scriptLoadingTasks.shift()?.();\n            }\n\n            script.crossOrigin = 'anonymous';\n            script.src = url;\n            script.type = 'text/javascript';\n\n            ctx.logger.log('[amd] start load script', moduleName);\n            loadingModuleName = moduleName;\n            dom.appendChild(script);\n        });\n    }\n\n    ctx.scriptLoader = {\n        getLoadingModuleName: () => loadingModuleName,\n        loadScript,\n        scriptLoadingTasks,\n    };\n}\n","import { createEventSubscribeManager } from \"../event\";\nimport { IPlugin } from \"../../plugins/types\";\nimport { FilesSystem } from \"../files-system\";\n\nexport interface IModule {\n    'default': any;\n    [key: string]: any;\n}\n\nexport type Factory = (...modules: unknown[]) => Promise<IModule>;\n\nexport interface IScriptLoadTask {\n    (...args: any): void;\n    moduleName: string;\n}\n\nexport interface IScriptLoader {\n    getLoadingModuleName: () => string;\n    scriptLoadingTasks: Array<IScriptLoadTask>;\n    loadScript: (dom: HTMLElement, url: string, moduleName?: string) => Promise<unknown>;\n}\n\nexport interface IRequireCtx {\n    __dirname: string;\n    deps?: string[];\n}\nexport type IRequireCallback = (modules: IModule | undefined | (IModule | undefined)[]) => void;\n\nexport interface IRequireFunc {\n    (names: string[] | string, cb?: IRequireCallback): Promise<IModule | undefined | (IModule | undefined)[]>;\n    cache: Map<string, IModule>;\n    factories: Map<string, Factory | string>;\n    dependencies: Map<string, string[]>;\n    resolve: (moduleName: string, __dirname?: string) => string;\n    moduleRequiringTasks: Map<string, [resolve: Function, reject: Function][]>;\n}\n\nexport interface IDefine {\n    (moduleName: string | Array<string> | Factory, dependencies_?: Factory | string | string[], factory?: Factory | string): IDefineDispose;\n    amd: any;\n}\n\nexport type IDefineDispose = () => void;\n\nexport interface IAmdModuleManagerContext {\n    fs: FilesSystem;\n    root: string;\n    scriptTimeout: number;\n    /**\n     * 事件触发\n     */\n    eventSubscribeManager: ReturnType<typeof createEventSubscribeManager<IEventTypes>>;\n    scriptLoader: IScriptLoader;\n    define: IDefine;\n    require: IRequireFunc;\n    logger: Pick<Console, 'log' | 'info' | 'debug' | 'error' | 'warn'>;\n    plugins: IPlugin[];\n    pluginReduce: <T=any>(reducer: (preValue: T, plugin: IPlugin) => Promise<{ result: T, break?: boolean; }>, initValue: T) => Promise<T>;\n}\n\nexport enum IEventTypes {\n    ModuleUpdate = 'module-update',\n    LoadingScript = 'loading-script',\n    ModuleDeps = 'module-deps',\n}\n","import { IAmdModuleManagerContext } from \"./types\";\nimport { IDefineDispose, IDefine, Factory, IEventTypes } from \"./types\";\n\nexport default function bindDefineToCtx(ctx: IAmdModuleManagerContext) {\n    function define(factory: Factory | string): IDefineDispose;\n    function define(dependencies_: string[], factory: Factory | string): IDefineDispose;\n    function define(moduleName: string, dependencies_: string[], factory: Factory | string): IDefineDispose;\n    function define(moduleName: string | Array<string> | Factory, dependencies_?: Factory | string | string[], factory?: Factory | string): IDefineDispose {\n        if (typeof moduleName === 'function') {\n            factory = moduleName;\n            dependencies_ = ['require', 'exports', 'module'];\n            moduleName = ctx.scriptLoader.getLoadingModuleName();\n        }\n        if (Array.isArray(moduleName)) {\n            factory = dependencies_ as (Factory | string);\n            dependencies_ = moduleName;\n            moduleName = ctx.scriptLoader.getLoadingModuleName();\n        }\n        ctx.logger.log('[amd] define module', moduleName, dependencies_);\n\n        const modulePath = ctx.require.resolve(moduleName);\n        const { factories, cache, dependencies } = ctx.require;\n\n        if (factories.has(modulePath)) {\n            factories.delete(modulePath);\n        }\n        if (cache.has(modulePath)) {\n            cache.delete(modulePath);\n        }\n        if (dependencies.has(modulePath)) {\n            dependencies.delete(modulePath);\n        }\n        // 通知该模块的更新\n        ctx.eventSubscribeManager.trigger(IEventTypes.ModuleUpdate, modulePath);\n        factories.set(modulePath, factory!);\n        dependencies.set(modulePath, dependencies_ as string[]);\n        return () => {\n            ctx.logger.log('[amd] module dispose', moduleName);\n            factories.delete(modulePath);\n        }\n    }\n\n    ctx.define = Object.assign(define, {\n        amd: {}\n    }) as IDefine;\n}\n","// 'path' module extracted from Node.js v8.11.1 (only the posix part)\n// transplited with Babel\n\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nfunction assertPath(path) {\n  if (typeof path !== 'string') {\n    throw new TypeError('Path must be a string. Received ' + JSON.stringify(path));\n  }\n}\n\n// Resolves . and .. elements in a path with directory names\nfunction normalizeStringPosix(path, allowAboveRoot) {\n  var res = '';\n  var lastSegmentLength = 0;\n  var lastSlash = -1;\n  var dots = 0;\n  var code;\n  for (var i = 0; i <= path.length; ++i) {\n    if (i < path.length)\n      code = path.charCodeAt(i);\n    else if (code === 47 /*/*/)\n      break;\n    else\n      code = 47 /*/*/;\n    if (code === 47 /*/*/) {\n      if (lastSlash === i - 1 || dots === 1) {\n        // NOOP\n      } else if (lastSlash !== i - 1 && dots === 2) {\n        if (res.length < 2 || lastSegmentLength !== 2 || res.charCodeAt(res.length - 1) !== 46 /*.*/ || res.charCodeAt(res.length - 2) !== 46 /*.*/) {\n          if (res.length > 2) {\n            var lastSlashIndex = res.lastIndexOf('/');\n            if (lastSlashIndex !== res.length - 1) {\n              if (lastSlashIndex === -1) {\n                res = '';\n                lastSegmentLength = 0;\n              } else {\n                res = res.slice(0, lastSlashIndex);\n                lastSegmentLength = res.length - 1 - res.lastIndexOf('/');\n              }\n              lastSlash = i;\n              dots = 0;\n              continue;\n            }\n          } else if (res.length === 2 || res.length === 1) {\n            res = '';\n            lastSegmentLength = 0;\n            lastSlash = i;\n            dots = 0;\n            continue;\n          }\n        }\n        if (allowAboveRoot) {\n          if (res.length > 0)\n            res += '/..';\n          else\n            res = '..';\n          lastSegmentLength = 2;\n        }\n      } else {\n        if (res.length > 0)\n          res += '/' + path.slice(lastSlash + 1, i);\n        else\n          res = path.slice(lastSlash + 1, i);\n        lastSegmentLength = i - lastSlash - 1;\n      }\n      lastSlash = i;\n      dots = 0;\n    } else if (code === 46 /*.*/ && dots !== -1) {\n      ++dots;\n    } else {\n      dots = -1;\n    }\n  }\n  return res;\n}\n\nfunction _format(sep, pathObject) {\n  var dir = pathObject.dir || pathObject.root;\n  var base = pathObject.base || (pathObject.name || '') + (pathObject.ext || '');\n  if (!dir) {\n    return base;\n  }\n  if (dir === pathObject.root) {\n    return dir + base;\n  }\n  return dir + sep + base;\n}\n\nvar posix = {\n  // path.resolve([from ...], to)\n  resolve: function resolve() {\n    var resolvedPath = '';\n    var resolvedAbsolute = false;\n    var cwd;\n\n    for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n      var path;\n      if (i >= 0)\n        path = arguments[i];\n      else {\n        if (cwd === undefined)\n          cwd = process.cwd();\n        path = cwd;\n      }\n\n      assertPath(path);\n\n      // Skip empty entries\n      if (path.length === 0) {\n        continue;\n      }\n\n      resolvedPath = path + '/' + resolvedPath;\n      resolvedAbsolute = path.charCodeAt(0) === 47 /*/*/;\n    }\n\n    // At this point the path should be resolved to a full absolute path, but\n    // handle relative paths to be safe (might happen when process.cwd() fails)\n\n    // Normalize the path\n    resolvedPath = normalizeStringPosix(resolvedPath, !resolvedAbsolute);\n\n    if (resolvedAbsolute) {\n      if (resolvedPath.length > 0)\n        return '/' + resolvedPath;\n      else\n        return '/';\n    } else if (resolvedPath.length > 0) {\n      return resolvedPath;\n    } else {\n      return '.';\n    }\n  },\n\n  normalize: function normalize(path) {\n    assertPath(path);\n\n    if (path.length === 0) return '.';\n\n    var isAbsolute = path.charCodeAt(0) === 47 /*/*/;\n    var trailingSeparator = path.charCodeAt(path.length - 1) === 47 /*/*/;\n\n    // Normalize the path\n    path = normalizeStringPosix(path, !isAbsolute);\n\n    if (path.length === 0 && !isAbsolute) path = '.';\n    if (path.length > 0 && trailingSeparator) path += '/';\n\n    if (isAbsolute) return '/' + path;\n    return path;\n  },\n\n  isAbsolute: function isAbsolute(path) {\n    assertPath(path);\n    return path.length > 0 && path.charCodeAt(0) === 47 /*/*/;\n  },\n\n  join: function join() {\n    if (arguments.length === 0)\n      return '.';\n    var joined;\n    for (var i = 0; i < arguments.length; ++i) {\n      var arg = arguments[i];\n      assertPath(arg);\n      if (arg.length > 0) {\n        if (joined === undefined)\n          joined = arg;\n        else\n          joined += '/' + arg;\n      }\n    }\n    if (joined === undefined)\n      return '.';\n    return posix.normalize(joined);\n  },\n\n  relative: function relative(from, to) {\n    assertPath(from);\n    assertPath(to);\n\n    if (from === to) return '';\n\n    from = posix.resolve(from);\n    to = posix.resolve(to);\n\n    if (from === to) return '';\n\n    // Trim any leading backslashes\n    var fromStart = 1;\n    for (; fromStart < from.length; ++fromStart) {\n      if (from.charCodeAt(fromStart) !== 47 /*/*/)\n        break;\n    }\n    var fromEnd = from.length;\n    var fromLen = fromEnd - fromStart;\n\n    // Trim any leading backslashes\n    var toStart = 1;\n    for (; toStart < to.length; ++toStart) {\n      if (to.charCodeAt(toStart) !== 47 /*/*/)\n        break;\n    }\n    var toEnd = to.length;\n    var toLen = toEnd - toStart;\n\n    // Compare paths to find the longest common path from root\n    var length = fromLen < toLen ? fromLen : toLen;\n    var lastCommonSep = -1;\n    var i = 0;\n    for (; i <= length; ++i) {\n      if (i === length) {\n        if (toLen > length) {\n          if (to.charCodeAt(toStart + i) === 47 /*/*/) {\n            // We get here if `from` is the exact base path for `to`.\n            // For example: from='/foo/bar'; to='/foo/bar/baz'\n            return to.slice(toStart + i + 1);\n          } else if (i === 0) {\n            // We get here if `from` is the root\n            // For example: from='/'; to='/foo'\n            return to.slice(toStart + i);\n          }\n        } else if (fromLen > length) {\n          if (from.charCodeAt(fromStart + i) === 47 /*/*/) {\n            // We get here if `to` is the exact base path for `from`.\n            // For example: from='/foo/bar/baz'; to='/foo/bar'\n            lastCommonSep = i;\n          } else if (i === 0) {\n            // We get here if `to` is the root.\n            // For example: from='/foo'; to='/'\n            lastCommonSep = 0;\n          }\n        }\n        break;\n      }\n      var fromCode = from.charCodeAt(fromStart + i);\n      var toCode = to.charCodeAt(toStart + i);\n      if (fromCode !== toCode)\n        break;\n      else if (fromCode === 47 /*/*/)\n        lastCommonSep = i;\n    }\n\n    var out = '';\n    // Generate the relative path based on the path difference between `to`\n    // and `from`\n    for (i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i) {\n      if (i === fromEnd || from.charCodeAt(i) === 47 /*/*/) {\n        if (out.length === 0)\n          out += '..';\n        else\n          out += '/..';\n      }\n    }\n\n    // Lastly, append the rest of the destination (`to`) path that comes after\n    // the common path parts\n    if (out.length > 0)\n      return out + to.slice(toStart + lastCommonSep);\n    else {\n      toStart += lastCommonSep;\n      if (to.charCodeAt(toStart) === 47 /*/*/)\n        ++toStart;\n      return to.slice(toStart);\n    }\n  },\n\n  _makeLong: function _makeLong(path) {\n    return path;\n  },\n\n  dirname: function dirname(path) {\n    assertPath(path);\n    if (path.length === 0) return '.';\n    var code = path.charCodeAt(0);\n    var hasRoot = code === 47 /*/*/;\n    var end = -1;\n    var matchedSlash = true;\n    for (var i = path.length - 1; i >= 1; --i) {\n      code = path.charCodeAt(i);\n      if (code === 47 /*/*/) {\n          if (!matchedSlash) {\n            end = i;\n            break;\n          }\n        } else {\n        // We saw the first non-path separator\n        matchedSlash = false;\n      }\n    }\n\n    if (end === -1) return hasRoot ? '/' : '.';\n    if (hasRoot && end === 1) return '//';\n    return path.slice(0, end);\n  },\n\n  basename: function basename(path, ext) {\n    if (ext !== undefined && typeof ext !== 'string') throw new TypeError('\"ext\" argument must be a string');\n    assertPath(path);\n\n    var start = 0;\n    var end = -1;\n    var matchedSlash = true;\n    var i;\n\n    if (ext !== undefined && ext.length > 0 && ext.length <= path.length) {\n      if (ext.length === path.length && ext === path) return '';\n      var extIdx = ext.length - 1;\n      var firstNonSlashEnd = -1;\n      for (i = path.length - 1; i >= 0; --i) {\n        var code = path.charCodeAt(i);\n        if (code === 47 /*/*/) {\n            // If we reached a path separator that was not part of a set of path\n            // separators at the end of the string, stop now\n            if (!matchedSlash) {\n              start = i + 1;\n              break;\n            }\n          } else {\n          if (firstNonSlashEnd === -1) {\n            // We saw the first non-path separator, remember this index in case\n            // we need it if the extension ends up not matching\n            matchedSlash = false;\n            firstNonSlashEnd = i + 1;\n          }\n          if (extIdx >= 0) {\n            // Try to match the explicit extension\n            if (code === ext.charCodeAt(extIdx)) {\n              if (--extIdx === -1) {\n                // We matched the extension, so mark this as the end of our path\n                // component\n                end = i;\n              }\n            } else {\n              // Extension does not match, so our result is the entire path\n              // component\n              extIdx = -1;\n              end = firstNonSlashEnd;\n            }\n          }\n        }\n      }\n\n      if (start === end) end = firstNonSlashEnd;else if (end === -1) end = path.length;\n      return path.slice(start, end);\n    } else {\n      for (i = path.length - 1; i >= 0; --i) {\n        if (path.charCodeAt(i) === 47 /*/*/) {\n            // If we reached a path separator that was not part of a set of path\n            // separators at the end of the string, stop now\n            if (!matchedSlash) {\n              start = i + 1;\n              break;\n            }\n          } else if (end === -1) {\n          // We saw the first non-path separator, mark this as the end of our\n          // path component\n          matchedSlash = false;\n          end = i + 1;\n        }\n      }\n\n      if (end === -1) return '';\n      return path.slice(start, end);\n    }\n  },\n\n  extname: function extname(path) {\n    assertPath(path);\n    var startDot = -1;\n    var startPart = 0;\n    var end = -1;\n    var matchedSlash = true;\n    // Track the state of characters (if any) we see before our first dot and\n    // after any path separator we find\n    var preDotState = 0;\n    for (var i = path.length - 1; i >= 0; --i) {\n      var code = path.charCodeAt(i);\n      if (code === 47 /*/*/) {\n          // If we reached a path separator that was not part of a set of path\n          // separators at the end of the string, stop now\n          if (!matchedSlash) {\n            startPart = i + 1;\n            break;\n          }\n          continue;\n        }\n      if (end === -1) {\n        // We saw the first non-path separator, mark this as the end of our\n        // extension\n        matchedSlash = false;\n        end = i + 1;\n      }\n      if (code === 46 /*.*/) {\n          // If this is our first dot, mark it as the start of our extension\n          if (startDot === -1)\n            startDot = i;\n          else if (preDotState !== 1)\n            preDotState = 1;\n      } else if (startDot !== -1) {\n        // We saw a non-dot and non-path separator before our dot, so we should\n        // have a good chance at having a non-empty extension\n        preDotState = -1;\n      }\n    }\n\n    if (startDot === -1 || end === -1 ||\n        // We saw a non-dot character immediately before the dot\n        preDotState === 0 ||\n        // The (right-most) trimmed path component is exactly '..'\n        preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n      return '';\n    }\n    return path.slice(startDot, end);\n  },\n\n  format: function format(pathObject) {\n    if (pathObject === null || typeof pathObject !== 'object') {\n      throw new TypeError('The \"pathObject\" argument must be of type Object. Received type ' + typeof pathObject);\n    }\n    return _format('/', pathObject);\n  },\n\n  parse: function parse(path) {\n    assertPath(path);\n\n    var ret = { root: '', dir: '', base: '', ext: '', name: '' };\n    if (path.length === 0) return ret;\n    var code = path.charCodeAt(0);\n    var isAbsolute = code === 47 /*/*/;\n    var start;\n    if (isAbsolute) {\n      ret.root = '/';\n      start = 1;\n    } else {\n      start = 0;\n    }\n    var startDot = -1;\n    var startPart = 0;\n    var end = -1;\n    var matchedSlash = true;\n    var i = path.length - 1;\n\n    // Track the state of characters (if any) we see before our first dot and\n    // after any path separator we find\n    var preDotState = 0;\n\n    // Get non-dir info\n    for (; i >= start; --i) {\n      code = path.charCodeAt(i);\n      if (code === 47 /*/*/) {\n          // If we reached a path separator that was not part of a set of path\n          // separators at the end of the string, stop now\n          if (!matchedSlash) {\n            startPart = i + 1;\n            break;\n          }\n          continue;\n        }\n      if (end === -1) {\n        // We saw the first non-path separator, mark this as the end of our\n        // extension\n        matchedSlash = false;\n        end = i + 1;\n      }\n      if (code === 46 /*.*/) {\n          // If this is our first dot, mark it as the start of our extension\n          if (startDot === -1) startDot = i;else if (preDotState !== 1) preDotState = 1;\n        } else if (startDot !== -1) {\n        // We saw a non-dot and non-path separator before our dot, so we should\n        // have a good chance at having a non-empty extension\n        preDotState = -1;\n      }\n    }\n\n    if (startDot === -1 || end === -1 ||\n    // We saw a non-dot character immediately before the dot\n    preDotState === 0 ||\n    // The (right-most) trimmed path component is exactly '..'\n    preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n      if (end !== -1) {\n        if (startPart === 0 && isAbsolute) ret.base = ret.name = path.slice(1, end);else ret.base = ret.name = path.slice(startPart, end);\n      }\n    } else {\n      if (startPart === 0 && isAbsolute) {\n        ret.name = path.slice(1, startDot);\n        ret.base = path.slice(1, end);\n      } else {\n        ret.name = path.slice(startPart, startDot);\n        ret.base = path.slice(startPart, end);\n      }\n      ret.ext = path.slice(startDot, end);\n    }\n\n    if (startPart > 0) ret.dir = path.slice(0, startPart - 1);else if (isAbsolute) ret.dir = '/';\n\n    return ret;\n  },\n\n  sep: '/',\n  delimiter: ':',\n  win32: null,\n  posix: null\n};\n\nposix.posix = posix;\n\nmodule.exports = posix;\n","import path from 'path-browserify';\n\nimport { IAmdModuleManagerContext, IRequireCtx, IRequireFunc, IModule, IEventTypes } from \"./types\";\nimport { IFile } from \"../files-system/types\";\n\ntype PromiseRes<T> = T extends Promise<infer P> ? P : unknown;\n\nexport default function bindRequireToCtx (ctx: IAmdModuleManagerContext) {\n    const cache: IRequireFunc['cache'] = new Map();\n    const factories: IRequireFunc['factories'] = new Map();\n    const dependencies: IRequireFunc['dependencies'] = new Map();\n    const moduleRequiringTasks: IRequireFunc['moduleRequiringTasks'] = new Map();\n\n    const parseModuleName = function(moduleName: string): [string, string | undefined, string | undefined] {\n        const [, name, version, file] = moduleName.match(/(^@?[^/@]+)(?:@([^/]+))?(.*)/) || [];\n        return [name!, version, file];\n    }\n\n    const resolve: IRequireFunc['resolve'] = (moduleName, __filepath) => {\n        if (['require', 'module', 'exports'].includes(moduleName)) {\n            return moduleName;\n        }\n        if (path.isAbsolute(moduleName)) {\n            return moduleName;\n        }\n        if (moduleName.startsWith('.')) {\n            if (!__filepath) {\n                throw new Error(`[amd] can't not resolve relative path ${moduleName} without __dirname`);\n            }\n            return path.resolve(path.dirname(__filepath), moduleName);\n        }\n        if (moduleName.startsWith('/')) {\n            return path.resolve(ctx.root, moduleName);\n        }\n        const [modulePath] = parseModuleName(moduleName);\n        return path.resolve(ctx.root, 'node_modules', modulePath!);\n    };\n\n    const resolveDeps = async (_packageName: string, _version: string, _file: string) => {\n        const params = {\n            packageName: _packageName,\n            version: _version,\n            file: _file\n        };\n        // 调用插件的 resolveModuleUrl 钩子\n        const res = await ctx.pluginReduce(\n            async (preValue, plugin) => {\n                const res = await plugin.resolveModuleUrl(preValue as typeof params);\n                if (typeof res === 'string') {\n                    return {\n                        result: res as unknown as typeof preValue,\n                        break: true\n                    };\n                }\n                return { result: res as typeof preValue };\n            },\n            params as string | typeof params\n        );\n        return res as string;\n    };\n\n    const moduleFactory = async (moduleName: string, _this: IRequireCtx): Promise<IModule | undefined> => {\n        const modulePath = resolve(moduleName, _this.__dirname);\n\n        // 检查本模块是否有其他的 require 任务正在运行，如果有直接等待第一个任务的结果，避免重复生成模块\n        if (moduleRequiringTasks.has(modulePath)) {\n            return await new Promise((resolve, reject) => {\n                const tasks = moduleRequiringTasks.get(modulePath);\n                tasks!.push([resolve, reject]);\n                ctx.logger.log(`[amd] require ${moduleName}, already has task requiring, waiting tasks: ${tasks!.length}.`);\n            });\n        }\n        ctx.logger.log('[amd] start require', modulePath);\n        moduleRequiringTasks.set(modulePath, []);\n\n        // 加载到模块后调用这个函数\n        const clearAllTasks = (err: Error | undefined, module_?: IModule) => {\n            // resolve 掉在加载过程中又触发的其他加载请求\n            const tasks = moduleRequiringTasks.get(modulePath);\n            if (tasks?.length) {\n                tasks.forEach(([resolve, reject], index) => {\n                    ctx.logger.log('[amd] resolve item', index, moduleName);\n                    if (err) {\n                        reject(err);\n                    }\n                    resolve(module_!);\n                });\n            }\n            // 等到触发了其他任务的 resolve 后把 Error 抛出去\n            moduleRequiringTasks.delete(modulePath);\n            if (err) {\n                throw err;\n            }\n            return module_!;\n        }\n\n        // 检查缓存，如果缓存中有直接取缓存里的\n        if (cache.has(modulePath)) {\n            ctx.logger.log(`[amd] require ${moduleName}, resolved from cache`);\n            return clearAllTasks(undefined, cache.get(modulePath)!);\n        }\n\n        // 尝试获取模块的声明\n        let factory = factories.get(modulePath);\n        // 没有获取到的情况处理，会尝试自动解决依赖\n        if (!factory) {\n            // 对于不是本地模块的，尝试从远程加载模块\n            if (!moduleName.startsWith('.') && !path.isAbsolute(moduleName)) {\n                const [name, version, file] = parseModuleName(moduleName);\n                const scriptUrl = await resolveDeps(name, version, file);\n                // 分发加载模块的事件\n                ctx.eventSubscribeManager.trigger(IEventTypes.LoadingScript, moduleName, scriptUrl);\n                if (typeof scriptUrl === 'string') {\n                    await ctx.scriptLoader.loadScript(document.body, scriptUrl, moduleName);\n                    factory = factories.get(modulePath);\n                    ctx.logger.log('[amd] script loaded', factory, modulePath);\n                }\n            }\n            // 本地模块，尝试从 fs 里读取文件\n            else {\n                const [exist, file] = ctx.fs.pathReduce(modulePath);\n                if (exist && Reflect.has(file, 'content')) {\n                    const content = (file as IFile).content;\n                    factories.set(modulePath, content);\n                    factory = content;\n                }\n            }\n            // 加载完后，仍然没有模块声明的，抛出异常\n            if (!factory) {\n                const err = new Error(`[amd] module error: ${modulePath} does not exist.`);\n                return clearAllTasks(err);\n            }\n        }\n\n        // 记录模块所有的依赖\n        const moduleDeps: string[] = [];\n        const requireCtx = { __dirname: modulePath, deps: moduleDeps };\n        const require_ = getRequireFunc(requireCtx);\n        // 这是声明时预先给定的依赖\n        let depModuleNames = dependencies.get(modulePath);\n\n        // 拿到声明后，开始调用插件的钩子，修改模块的依赖信息或者声明\n        if (typeof factory === 'string') {\n            const { deps: _depModuleNames, factory: factory_ } = await ctx.pluginReduce(async (preValue, plugin) => {\n                const result = await plugin.beforeModuleGenerate(_this, preValue);\n                return { result: { ...result, name: moduleName } };\n            }, { name: moduleName, deps: depModuleNames, factory } as { name: string, deps?: string[]; factory: string; });\n            factory = factory_ as typeof factory;\n            depModuleNames = _depModuleNames;\n        }\n\n        // 拿到声明，开始生成模块，来一个 commonjs 三件套\n        const _exports = {};\n        const commonjs = {\n            require: require_,\n            module: { exports: _exports },\n            exports: _exports\n        };\n\n        // 先加载模块的依赖，特殊处理 commonjs 的三个依赖\n        let deps: IModule[] = [];\n        if (depModuleNames?.length) {\n            deps = await Promise.all(depModuleNames.map(depName => {\n                if (commonjs[depName]) return commonjs[depName];\n                return require_(depName);\n            }));\n        }\n\n        try {\n            // 执行 factory ，拿到模块\n            let exportsReturn: IModule;\n            if (typeof factory === 'string') {\n                // eslint-disable-next-line no-eval\n                exportsReturn = await eval(factory)(...deps);\n            }\n            else {\n                exportsReturn = await factory(...deps);\n            }\n\n            // 分发模块的依赖事件\n            ctx.eventSubscribeManager.trigger(IEventTypes.ModuleDeps, requireCtx);\n\n            // 先判断 exports 对象是否挂载了内容，如果没有就使用 factory 的返回值\n            const module_ = (() => {\n                if (Object.keys(commonjs.module.exports).length || typeof commonjs.module.exports !== 'object') {\n                    return commonjs.module.exports;\n                }\n                return exportsReturn;\n            })() as IModule;\n\n            cache.set(modulePath, module_);\n            ctx.logger.log('[amd] resolve module tasks head', modulePath, module_);\n            return clearAllTasks(undefined, module_);\n        } catch (err) {\n            return clearAllTasks(err as Error, undefined);\n        }\n    };\n\n    const getRequireFunc = (_this: IRequireCtx): IRequireFunc => {\n        return Object.assign(async (...args: Parameters<IRequireFunc>) => {\n            const [moduleNames_, cb] = args;\n\n            // 调用 插件 require 钩子，处理模块名称\n            const moduleNames = await ctx.pluginReduce(async (preValue, plugin) => {\n                return {\n                    result: await plugin.require(_this, preValue)\n                };\n            }, moduleNames_);\n\n            // 记录模块本次 require 的依赖\n            if (typeof moduleNames === 'string') {\n                _this.deps?.push(resolve(moduleNames, _this.__dirname));\n            }\n            else {\n                _this.deps?.push(...moduleNames.reduce((previousValue, currentValue) => {\n                    previousValue.push(resolve(currentValue, _this.__dirname));\n                    return previousValue;\n                },[]));\n            }\n\n            let modules: PromiseRes<ReturnType<IRequireFunc>>;\n            if (Array.isArray(moduleNames)) {\n                modules = await Promise.all(moduleNames.map(name => moduleFactory(name, _this)));\n            }\n            else {\n                modules = await moduleFactory(moduleNames, _this);\n            }\n            cb?.(modules);\n            return modules;\n        }, {\n            cache,\n            factories,\n            resolve,\n            dependencies,\n            moduleRequiringTasks,\n            resolveDeps\n        });\n    };\n\n    ctx.require = getRequireFunc({ __dirname: ctx.root });\n}\n","export interface Handler {\n    (...params: unknown[]): void;\n    filter?: (...params: unknown[]) => boolean;\n    once?: boolean;\n}\n\nexport const createEventSubscribeManager = <K = string>() => {\n    const eventsHandlersMap = new Map<K, Array<Handler>>();\n\n    const trigger = (key: K, ...params: unknown[]) => {\n        const handlers = eventsHandlersMap.get(key);\n        if (handlers) {\n            const drops = new Map<number, boolean>();\n            handlers.forEach((handler, index) => {\n                // 存在触发条件，但是不满足的跳过\n                if (handler.filter && !handler.filter(...params)) {\n                    return;\n                }\n                handler(...params);\n                if (handler.once) {\n                    drops.set(index, true);\n                }\n            });\n            eventsHandlersMap.set(key, handlers.filter((_, index) => !drops.get(index)));\n        }\n    }\n\n    const listen = (key: K, cb: Handler, filter?: Handler['filter']) => {\n        if (!eventsHandlersMap.has(key)) {\n            eventsHandlersMap.set(key, []);\n        }\n        eventsHandlersMap.get(key)?.push?.(Object.assign(cb, {\n            filter\n        }));\n        return () => {\n            eventsHandlersMap.get(key)?.filter(handler => handler !== cb);\n        }\n    };\n\n    const once = (key: K, cb: Handler, filter?: Handler['filter'], onTimeout?: () => void, timeout = -1) => {\n        if (!eventsHandlersMap.has(key)) {\n            eventsHandlersMap.set(key, []);\n        }\n        const dispose = () => {\n            eventsHandlersMap.get(key)?.filter(handler => handler !== cb);\n        }\n\n        // 超时\n        let _timeout;\n        if (timeout !== -1) {\n            _timeout = setTimeout(() => {\n                dispose();\n                onTimeout?.();\n            }, timeout);\n        }\n        eventsHandlersMap.get(key)?.push?.(Object.assign((...args) => {\n            if (_timeout) clearTimeout(_timeout);\n            cb(...args);\n        }, {\n            once: true,\n            filter\n        }));\n        return dispose;\n    }\n\n    return { trigger, listen, once };\n}\n","import bindScriptLoaderToCtx from './scriptLoader';\nimport bindDefineToCtx from \"./define\";\nimport bindRequireToCtx from \"./require\";\nimport {IAmdModuleManagerContext, IEventTypes, IRequireCtx} from './types';\nimport { createEventSubscribeManager } from \"../event\";\nimport { Factory } from \"./types\";\nimport { IPlugin } from \"../../plugins/types\";\nimport { FilesSystem } from \"../files-system\";\n\nexport function createAmdManager(fs: FilesSystem,root='/', scriptTimeout=10000, logger: IAmdModuleManagerContext['logger'] = console) {\n    const ctx = {} as IAmdModuleManagerContext;\n    ctx.eventSubscribeManager = createEventSubscribeManager();\n    ctx.fs = fs;\n    ctx.root = root;\n    ctx.scriptTimeout = scriptTimeout;\n    ctx.logger = logger;\n\n    ctx.plugins = [];\n    // 遍历插件的方法\n    ctx.pluginReduce = async (reducer, initValue) => {\n        let result: any = initValue;\n        for (const plugin of ctx.plugins) {\n            const { result: res, break: break_ } = await reducer(result, plugin);\n            if (break_) {\n                return res;\n            }\n            result = res;\n        }\n        return result;\n    };\n\n    bindRequireToCtx(ctx);\n    bindDefineToCtx(ctx);\n    bindScriptLoaderToCtx(ctx);\n\n    function importGlobalObjectScript(target: HTMLElement, url: string, name: string): Factory {\n        // 返回一个导入脚本的异步函数作为模块的声明\n        return async (_require) => {\n            await ctx.scriptLoader.loadScript(target, url);\n            return {\n                'default': Reflect.get(window, name),\n                ...Reflect.get(window, name)\n            };\n        };\n    }\n\n    const module_ = {\n        require_: ctx.require,\n        define: ctx.define,\n        _import: importGlobalObjectScript.bind(null, document.body),\n        onModuleUpdate(targets: string[] | undefined, cb: (moduleNames: string[]) => void) {\n            return ctx.eventSubscribeManager.listen(IEventTypes.ModuleUpdate, (moduleName) => {\n                if(!targets || targets.includes(moduleName as string)) {\n                    cb([moduleName as string]);\n                }\n            });\n        },\n        onModuleLoading(cb: (moduleName: string, url: string) => void) {\n            return ctx.eventSubscribeManager.listen(IEventTypes.LoadingScript, (moduleName, url) => {\n                cb(moduleName as string, url as string);\n            });\n        },\n        onModuleDeps(cb: (from: string[], to: string) => void) {\n            return ctx.eventSubscribeManager.listen(IEventTypes.ModuleDeps, (_this: IRequireCtx) => {\n                if (!_this.deps) {\n                    debugger;\n                }\n                cb(_this.deps || [], _this.__dirname);\n            });\n        },\n        mountToGlobal(global_ = window) {\n            const currentDefine = Reflect.get(global_, 'define');\n            const currentRequire = Reflect.get(global_, 'require');\n\n            Reflect.set(global_, 'define', ctx.define);\n            Reflect.set(global_, 'require', ctx.require);\n\n            return () => {\n                Reflect.set(global_, 'define', currentDefine);\n                Reflect.set(global_, 'require', currentRequire);\n            };\n        },\n        setPlugins(plugins: IPlugin[]) {\n            ctx.plugins = plugins;\n        }\n    };\n\n    return module_;\n}\n\nexport type IAmdManager = ReturnType<typeof createAmdManager>;\n","import {createEventSubscribeManager} from \"../event\";\nimport path, {PathObject} from \"path-browserify\";\n\nexport interface IFile {\n    name: string;\n    content: string;\n}\n\nexport interface IDirectory {\n    name: string;\n    children: Map<string, IDirectory | IFile>;\n}\n\nexport type EventTypes = 'transfer' | 'dir-set' | 'dir-delete' | 'dir-clear' | 'files-change';\nexport enum FilesChangeType {\n    Delete = 'delete',\n    Change = 'change',\n    New = 'new'\n}\n\nconst getPathFileName = (pathObject: PathObject) => `${pathObject.name}${pathObject.ext}`;\n\nconst traverse = (dir = '', directory: IDirectory, cb: (path: string, item: IFile) => void) => {\n    directory.children.forEach((item) => {\n        if (Reflect.has(item, 'children')) {\n            traverse(`${path}/${item.name}`, item as IDirectory, cb);\n            return;\n        }\n        cb(`${path}/${item.name}`, item as IFile);\n    });\n};\n\nexport class FilesSystem {\n    private root: IDirectory = {\n        name: '',\n        children: this.getProxyMap('', [])\n    };\n    // 保证同步消息执行顺序的 id\n    private eventCount: number = 0;\n    public event = createEventSubscribeManager<EventTypes>();\n\n    private getProxyMap(path: string, entries) {\n        const _this = this;\n        const map: IDirectory['children'] = new Map(entries);\n\n        const proxyMethod = (methodName: keyof typeof map, eventName: EventTypes) => {\n            const _method = Reflect.get(map, methodName);\n            if (typeof _method === 'function') {\n                const method = function (...args) {\n                    _this.event.trigger(eventName, _this.eventCount++, path, ...args);\n                    return _method.call(map, ...args);\n                }\n                Reflect.set(map, methodName, method);\n            }\n        };\n\n        // 可以改变 Map 值的方法，通知外部\n        proxyMethod('set', 'dir-set');\n        proxyMethod('delete', 'dir-delete');\n        proxyMethod('clear', 'dir-clear');\n\n        return map;\n    }\n\n    public pathReduce(target: string) {\n        const paths = target.split(path.sep);\n        return paths.reduce(([status, dir], cur, index, arr) => {\n            if (index === 0) {\n                return [status, dir] as const;\n            }\n            // 如果最后一个路径是空串，说明路径是 / 结尾，忽略\n            if (index === arr.length - 1 && cur === '') {\n                return [status, dir]  as const;\n            }\n            return [status && dir.children?.has(cur), dir.children?.get(cur)] as const;\n        }, [true, this.root] as const);\n    }\n\n    public exist(target) {\n        const [exist] = this.pathReduce(target);\n        return exist;\n    }\n\n    public mkdir(target: string) {\n        const pathObject = path.parse(target);\n        if (this.exist(target)) {\n            throw new Error(`[fs] failed to mkdir ${target}, it is already existed.`);\n        }\n        const [parentExist, parent] = this.pathReduce(pathObject.dir);\n        if (!parentExist) {\n            throw new Error(`[fs] failed to mkdir ${target}, parent path ${pathObject.dir} is not existed.`);\n        }\n        if (!Reflect.has(parent, 'children') || Reflect.has(parent, 'content')) {\n            throw new Error(`[fs] failed to mkdir ${target}, parent path ${pathObject.dir} is not a directory.`);\n        }\n        (parent as IDirectory).children.set(getPathFileName(pathObject), {\n            name: getPathFileName(pathObject),\n            children: this.getProxyMap(path.format(pathObject), []),\n        });\n    }\n\n    public readDirectory(target: string) {\n        const pathObject = path.parse(target);\n        const [parentExist, parent] = this.pathReduce(pathObject.dir);\n        if (!parentExist) {\n            throw new Error(`[fs] failed to read directory ${target}, parent path ${pathObject.dir} is not existed.`);\n        }\n        return (parent as IDirectory).children.get(getPathFileName(pathObject));\n    }\n\n    public readFile(target: string) {\n        const [exist, file] = this.pathReduce(target);\n        if (!exist) {\n            throw new Error(`[fs] failed to read file ${target}, it is not existed.`);\n        }\n        if (Reflect.has(file, 'children')) {\n            throw new Error(`[fs] failed to read file ${target}, it is a directory.`);\n        }\n        return file as IFile;\n    }\n\n    public writeFile(target: string, contents: ArrayBuffer | string) {\n        const pathObject = path.parse(target);\n        const [parentExist, parent] = this.pathReduce(pathObject.dir);\n        if (!parentExist) {\n            throw new Error(`[fs] failed to write file ${target}, parent path ${pathObject.dir} is not existed.`);\n        }\n        let writeContent = contents as string;\n        if (typeof contents !== 'string') {\n            writeContent = btoa(String.fromCharCode.apply(null, new Uint8Array(contents)));\n        }\n        const existBefore = (parent as IDirectory).children.has(getPathFileName(pathObject));\n        (parent as IDirectory).children.set(getPathFileName(pathObject), {\n            name: getPathFileName(pathObject),\n            content: writeContent,\n        });\n        this.event.trigger('files-change', this.eventCount++, existBefore ? FilesChangeType.Change : FilesChangeType.New, [target]);\n    }\n\n    private cpOrMv(isMv: boolean = false, source: string, target: string) {\n        const sourcePathObject = path.parse(source);\n        const targetPathObject = path.parse(target);\n        const [sourceParentExist, sourceParent] = this.pathReduce(sourcePathObject.dir);\n        const [targetParentExist, targetParent] = this.pathReduce(targetPathObject.dir);\n        if (!sourceParentExist || !targetParentExist) {\n            throw new Error(`[fs] failed to ${isMv ? 'mv' : 'cp'} ${source} to ${target}, source or target path is not existed.`);\n        }\n        if ((targetParent as IDirectory).children.has(getPathFileName(targetPathObject))) {\n            throw new Error(`[fs] failed to ${isMv ? 'mv' : 'cp'} ${source} to ${target}, target path is already existed.`);\n        }\n        (targetParent as IDirectory).children.set(getPathFileName(targetPathObject), (sourceParent as IDirectory).children.get(getPathFileName(sourcePathObject)));\n\n        const sourceFileOrDirectory = (sourceParent as IDirectory).children.get(source);\n        const deletedFiles = [];\n        const newFiles = [];\n        if (Reflect.has(sourceFileOrDirectory, 'content')) {\n            deletedFiles.push(source);\n            newFiles.push(target);\n        }\n        else {\n            traverse(undefined, sourceFileOrDirectory as IDirectory, (path_) => {\n                deletedFiles.push(path.join(sourcePathObject.dir, path_));\n                newFiles.push(path.join(targetPathObject.dir, path_));\n            });\n        }\n\n        if (isMv) {\n            (sourceParent as IDirectory).children.delete(getPathFileName(sourcePathObject));\n            this.event.trigger('files-change', this.eventCount++, FilesChangeType.Delete, deletedFiles);\n        }\n\n        this.event.trigger('files-change', this.eventCount++, FilesChangeType.New, newFiles);\n    }\n\n    public cp: (source: string, target: string) => void = this.cpOrMv.bind(this, false);\n\n    public mv: (source: string, target: string) => void = this.cpOrMv.bind(this, true);\n\n    public rm(target: string) {\n        const pathObject = path.parse(target);\n        const [parentExist, parent] = this.pathReduce(pathObject.dir);\n        if (!parentExist || !(parent as IDirectory).children.has(getPathFileName(pathObject))) {\n            throw new Error(`[fs] failed to rm ${target}, it is not existed.`);\n        }\n\n        const targetFileOrDirectory = (parent as IDirectory).children.get(target);\n        const deletedFiles = [];\n        if (Reflect.has(targetFileOrDirectory, 'content')) {\n            deletedFiles.push(target);\n        }\n        else {\n            traverse(undefined, targetFileOrDirectory as IDirectory, (path_) => {\n                deletedFiles.push(path.join(pathObject.dir, path_));\n            });\n        }\n\n        (parent as IDirectory).children.delete(getPathFileName(pathObject));\n        this.event.trigger('files-change', this.eventCount++, FilesChangeType.Delete, deletedFiles);\n    }\n\n    /**\n     * 序列化内部存储的所有数据\n     */\n    public getDataPayload() {\n        return JSON.stringify(this.root, (key, value) => {\n            if (value instanceof Map) {\n                return {\n                    __dataType: 'Map',\n                    entries: Array.from(value.entries())\n                };\n            }\n            return value;\n        });\n    }\n\n    /**\n     * 触发将文件对象存储的数据传输到远端的事件\n     */\n    public transfer() {\n        const payload = this.getDataPayload();\n        this.event.trigger('transfer', this.eventCount++, '', payload);\n    }\n\n    /**\n     * 接收外部设置的数据\n     * @param payload 底层数据\n     */\n    public receive(payload: string) {\n        // 遍历所有文件，设置监听目录变化\n        const traverse = (obj, path = '') => {\n            if (obj.children && Reflect.get(obj.children, '__dataType') === 'Map') {\n                const entries = obj.children.entries.forEach(([key, value]) => [key, traverse(value, [path, key].join('/'))]);\n                return {\n                    ...obj,\n                    children: this.getProxyMap(path, entries)\n                };\n            }\n            return obj;\n        };\n        this.root = traverse(JSON.parse(payload));\n    }\n\n}\n","import { createEventSubscribeManager } from '../core/event';\nimport { callProxy, registerProxy } from '../core/proxy';\n\nconst EVENT_KEY = 'iframe-message-type';\nconst NOTIFICATION_SERVICE = 'iframe-notification-service';\n\ninterface INotificationService {\n    /** iframe 加载完成 */\n    iframeReady: (e: MessageEvent) => Promise<boolean>;\n    iframeLoadingModule: (moduleName: string, moduleUrl: string, e: MessageEvent) => Promise<void>;\n}\n\nconst emitter = createEventSubscribeManager<keyof INotificationService>();\n\n/**\n * 注册主进程中的服务，监听消息\n */\nexport const initMainThreadService = async () => {\n    const service: INotificationService = {\n        iframeReady: async (e) => {\n            console.log('iframe ready', e);\n            emitter.trigger('iframeReady', e);\n            return true;\n        },\n        iframeLoadingModule: async (moduleName, moduleUrl, e) => {\n            emitter.trigger('iframeLoadingModule', moduleName, moduleUrl, e);\n        }\n    }\n    registerProxy(NOTIFICATION_SERVICE, service);\n};\n\n/**\n * 主页面中，等待指定的 iframe 运行环境加载完成\n * @param iframe 要等待的 iframe\n * @param timeout 超时时间\n */\nexport const waitIframeReady = async (iframe: HTMLIFrameElement, timeout=10000) => {\n    // 被动监听 iframe 发送的消息来得知 iframe 已经加载，避免调用时 iframe 端还未准备好而导致的消息丢失\n    const listenTask = new Promise<null>((resolve, reject) => {\n        if (iframe.getAttribute('data-iframe-status') !== 'ready') {\n            emitter.once(\n                'iframeReady',\n                (...args) => {\n                    iframe.setAttribute('data-iframe-status', 'ready');\n                    resolve(null);\n                },\n                (e: MessageEvent) => e.source === iframe.contentWindow,\n                reject,\n                timeout\n            );\n        }\n        else {\n            resolve(null);\n        }\n    });\n    // 主动调用 iframe 暴露的接口查询是否准备好\n    const queryTask = async () => {\n        // 先等待 iframe 加载好\n        await new Promise(resolve => {\n            const onload = () => {\n                iframe.setAttribute('data-iframe-status', 'loaded');\n                resolve(null);\n                iframe.removeEventListener('load', onload);\n            };\n            iframe.addEventListener('load', onload);\n        });\n        // 等待 iframe 内的 js 环境准备好\n        await callProxy<Pick<INotificationService, 'iframeReady'>>({\n            win: iframe.contentWindow,\n            serviceId: NOTIFICATION_SERVICE,\n            method: 'iframeReady',\n            payload: [],\n            timeout\n        });\n    };\n    // 两个查询方式 race，取返回快的结果\n    return Promise.race([listenTask, queryTask()]);\n}\n\n/**\n * 通知外部容器，iframe 内部已经加载完成的函数\n */\nexport const iframeReady = async () => {\n    registerProxy<Pick<INotificationService, 'iframeReady'>>(NOTIFICATION_SERVICE, {\n        iframeReady: async () => {\n            return true;\n        }\n    });\n    const parent = window.top || window.parent || window.opener;\n    if (!parent) return;\n    return callProxy<INotificationService>({\n        win: parent,\n        serviceId: NOTIFICATION_SERVICE,\n        method: 'iframeReady',\n        payload: []\n    });\n}\n\n/**\n * 监听指定的 iframe 内加载模块\n * @param iframe 要监听的 iframe\n * @param cb 回调函数\n */\nexport const onIframeLoadingModule = (iframe: HTMLIFrameElement, cb: (moduleName: string, extraInfo: string) => void) => {\n    emitter.listen('iframeLoadingModule', cb, (moduleName, extraInfo, e: MessageEvent) => e.source === iframe.contentWindow);\n};\n\n/**\n * 通知外部容器，iframe 内部正在加载模块的函数\n * @param moduleName\n * @param extraInfo\n */\nexport const iframeLoadingModule = async (moduleName: string, extraInfo: string) => {\n    const parent = window.top || window.parent || window.opener;\n    if (!parent) return;\n    return callProxy<INotificationService>({\n        win: parent,\n        serviceId: NOTIFICATION_SERVICE,\n        method: 'iframeLoadingModule',\n        payload: [moduleName, extraInfo]\n    });\n};\n","// 同步 iframe 和 页面内的两个 FS 对象\nimport {callProxy, registerProxy, waitProxy} from '../proxy';\nimport {EventTypes, FilesSystem, IDirectory} from './types';\nimport {waitIframeReady} from \"../../utils/iframe\";\n\nexport const SyncServiceName = 'code-sandbox-sync-files';\n\ninterface IIframeSyncService {\n    sync: (eventType: EventTypes, orderCount: number, path: string, ...args: unknown[]) => Promise<void>;\n}\n\ninterface IMainSyncService {\n    requestFs: () => Promise<string>;\n}\n\n/**\n * 在 iframe 内调用，处理来自宿主窗口的同步消息，保持 iframe 内的 fs 和 外部页面的一致\n * @param fs iframe 内部的fs 对象\n */\nexport async function initIframeFilesSyncService(fs: FilesSystem) {\n    const cacheQueue: Map<number, [eventType: EventTypes, path: string, ...args: unknown[]]> = new Map();\n    let currentCount = 0;\n\n    registerProxy<IIframeSyncService>(SyncServiceName, {\n        sync: async (eventType, orderCount, path, ...args) => {\n            // 把消息放入到消息队列里，确保消息按照顺序执行\n            cacheQueue.set(orderCount, [eventType, path, ...args]);\n            // 将当前顺序可以处理的消息都处理掉\n            while (cacheQueue.get(currentCount)) {\n                const [eventType, path, ...args] = cacheQueue.get(currentCount);\n                cacheQueue.delete(currentCount);\n                currentCount++;\n\n                const [, dir_] = fs.pathReduce(path);\n                const dir = dir_ as IDirectory;\n                switch (eventType) {\n                    case \"transfer\": {\n                        fs.receive.apply(fs, args);\n                        break;\n                    }\n                    case \"dir-clear\": {\n                        dir.children.clear();\n                        break;\n                    }\n                    case \"dir-set\": {\n                        dir.children.set.apply(dir.children, args);\n                        break;\n                    }\n                    case \"dir-delete\": {\n                        dir.children.delete.apply(dir.children, args);\n                        break;\n                    }\n                    case \"files-change\": {\n                        fs.event.trigger(eventType, path, ...args);\n                        break;\n                    }\n                }\n            }\n        }\n    });\n\n    // 主动调用宿主窗口获取一次数据\n    const payload = await callProxy<IMainSyncService, 'requestFs'>({\n        win: self.parent || self.opener || self.top,\n        method: 'requestFs',\n        serviceId: SyncServiceName,\n        payload: []\n    }) as string;\n    if (payload) {\n        console.log('receive payload', payload);\n        fs.receive(payload);\n        return;\n    }\n    console.log('not receive payload', payload);\n}\n\n/**\n * 在宿主页面内调用，分发 fs 的状态给 iframe 内的 fs 对象\n * @param fs 宿主页面的 fs 对象\n * @param iframe 要分发到的 iframe\n */\nexport function initMainFilesSyncCaller(fs: FilesSystem, iframe: HTMLIFrameElement) {\n    // 监听 fs 的事件，并调用 iframe 的服务，同步给 iframe\n    const onEvent = (eventType: EventTypes) => {\n        fs.event.listen(eventType, async (...args) => {\n            await waitIframeReady(iframe);\n            await waitProxy(iframe.contentWindow, SyncServiceName);\n            await callProxy<IIframeSyncService>({\n                win: iframe.contentWindow,\n                serviceId: SyncServiceName,\n                method: 'sync',\n                payload: [eventType, ...args]\n            });\n        });\n    };\n    onEvent('transfer');\n    onEvent('dir-delete');\n    onEvent('dir-set');\n    onEvent('dir-clear');\n    onEvent('files-change');\n    // 创建服务，用于回应 iframe 主动发起的数据同步请求\n    registerProxy<IMainSyncService>(SyncServiceName, {\n        requestFs: async () => {\n            // 将 fs 内的数据序列化之后传递给 iframe\n            return fs.getDataPayload();\n        }\n    });\n}\n","export const DemoServiceName = 'demo-service';\n\n\nexport interface IDemoService {\n    run: (jsEntry: string, htmlEntry?: string, stylesEntry?: string) => Promise<boolean>;\n    setPlugins: (pluginsId: string[]) => Promise<void>;\n}\n","import { callProxy, waitProxy } from '../core/proxy';\nimport { IPlugin } from '../plugins/types';\n\n/**\n * 由于 plugin 是在调用端声明的，iframe 与其需要通过 postMessage 来通信\n * @param pluginsServiceId\n */\nexport function generatePlugins(pluginsServiceId: string[]): IPlugin[] {\n    const parent = window.parent || window.top || window.opener;\n\n    const generateMethod = (key: keyof IPlugin, serviceId: string) => async (...args) => {\n        await waitProxy(parent, serviceId);\n        return await callProxy<IPlugin>({\n            win: parent,\n            serviceId,\n            method: key,\n            payload: args\n        });\n    }\n\n    return pluginsServiceId.map(serviceId => {\n        const keys: Array<keyof IPlugin> = ['require', 'beforeModuleGenerate', 'resolveModuleUrl'];\n        return keys.reduce((pre, key) => {\n            return {\n                ...pre,\n                [key]: generateMethod(key, serviceId)\n            };\n        }, {} as IPlugin);\n    });\n}\n","import {IDepNode, TraverseCallback} from './type';\n\nexport default class DepsGraph {\n    private DepNodeIndexes: Map<IDepNode['path'], IDepNode> = new Map();\n\n    public getDepNode (_target: IDepNode['path'], create = false) {\n        const target = _target.replace(/\\/$/, '');\n        if (!this.DepNodeIndexes.has(target) && create) {\n            this.DepNodeIndexes.set(target, {\n                path: target,\n                come: new Set(),\n                out: new Set()\n            });\n        }\n        return this.DepNodeIndexes.get(target);\n    };\n\n    /**\n     * 更新 from -> to 的路径\n     * @param from 起点 node 数组\n     * @param to 终点 node\n     */\n    public updatePaths (from: IDepNode['path'][], to: IDepNode['path']) {\n        const targetNode = this.getDepNode(to, true);\n        // 删除原来所有入方向路径，然后重新生成\n        if (targetNode.come.size) {\n            targetNode.come.forEach(depNode => {\n                depNode.out.delete(targetNode);\n            });\n            targetNode.come.clear();\n        }\n        from.forEach(nodePath => {\n            const depNode = this.getDepNode(nodePath, true);\n            targetNode.come.add(depNode);\n            depNode.out.add(targetNode);\n        });\n    };\n\n    /**\n     * 删除 from -> to 的路径\n     * @param from 起点 node 数组\n     * @param to 终点 node\n     */\n    public deletePaths(from: IDepNode['path'][], to: IDepNode['path']) {\n        const targetNode = this.getDepNode(to);\n        if (!targetNode) return false;\n        from.forEach(sourcePath => {\n            const sourceNode = this.getDepNode(sourcePath);\n            if (!sourceNode) return;\n            sourceNode.out.delete(targetNode);\n            targetNode.come.delete(sourceNode);\n            // 如果删除了这条路径依赖，sourceNode 再没有被 node 依赖，删除 sourceNode\n            this.deleteNode(sourceNode.path);\n        });\n    };\n\n    /**\n     * 删除指定的依赖节点\n     * @param source\n     */\n    public deleteNode(source: IDepNode['path']) {\n        const sourceNode = this.getDepNode(source);\n        // 如果节点不存在直接返回 false\n        if (!sourceNode) return false;\n\n        // 从索引 Map 删除 source\n        this.DepNodeIndexes.delete(source);\n\n        // 清理 source 依赖的其他 node\n        if (sourceNode.come.size) {\n            sourceNode.come.forEach(comeNode => {\n                comeNode.out.delete(sourceNode);\n                // 如果除了 source，没有其他依赖 node 的节点后，递归删除 node\n                if (!comeNode.out.size) {\n                    this.deleteNode(comeNode.path);\n                }\n            });\n        }\n\n        return true;\n    };\n\n    /**\n     * 遍历所有直接或者间接依赖 source 的节点\n     * @param source 要遍历的节点\n     * @param cb 对每个节点的处理\n     * @param tracked 用于存储遍历过的节点\n     * @param wait 用于存储需要遍历的节点\n     * @param order 是否按照顺序开始遍历\n     */\n    public traverse(\n        source: IDepNode['path'],\n        cb?: TraverseCallback,\n        tracked= new Set<IDepNode['path']>(),\n        wait = new Set<IDepNode['path']>(),\n        order = true\n    ) {\n        /**\n         * 判断一个节点所有的 come 节点是否都被遍历\n         * @param node 要判断的节点\n         */\n        const isAllDepsTracked = (node: IDepNode) => Array.from(node.come).every(dep => !wait.has(dep.path) || tracked.has(dep.path));\n        const traverse = (node: IDepNode, order = false, cb_: typeof cb) => {\n            if (!order) {\n                wait.add(node.path);\n            }\n            else {\n                // 如果节点还有依赖没有被遍历，就不遍历本节点\n                if (!isAllDepsTracked(node)) return;\n                tracked.add(node.path);\n                cb_?.(node, tracked.size, wait.size);\n            }\n            node.out.forEach(child => {\n                if (!order|| isAllDepsTracked(child)) {\n                    traverse(child, order, cb_);\n                }\n            });\n        };\n        const sourceNode = this.getDepNode(source);\n        if (!sourceNode) return;\n        traverse(sourceNode, false, cb);\n        if (order) {\n            traverse(sourceNode, true, cb);\n        }\n    };\n\n    /**\n     * 批量遍历直接或者间接 sources 节点的所有节点\n     * @param sources 被依赖的节点数组\n     * @param cb 对每个节点的处理\n     */\n    public batchTraverse(sources: IDepNode['path'][], cb?: TraverseCallback) {\n        const tracked = new Set<IDepNode['path']>();\n        const wait = new Set<IDepNode['path']>();\n\n        // 先确定所有需要遍历的节点\n        sources.forEach(source => {\n            this.traverse(source, cb, tracked, wait, false);\n        });\n\n        // 按照顺序遍历\n        sources.forEach(source => {\n            this.traverse(source, cb, tracked, wait, true);\n        });\n\n        return Array.from(tracked);\n    }\n}\n","import { registerProxy } from '../core/proxy';\nimport { createAmdManager } from '../core/amd';\nimport { FilesSystem, initIframeFilesSyncService } from '../core/files-system';\nimport { DemoServiceName, IDemoService } from '../type';\nimport { iframeReady, iframeLoadingModule } from '../utils/iframe';\nimport logger from '../utils/logger';\nimport { generatePlugins } from './generatePlugins';\nimport { FilesChangeType, IFile } from \"../core/files-system/types\";\nimport DepsGraph from \"../core/dep-graph\";\n\n// 创建一个 files system\nconst fs = new FilesSystem();\n// 保持 FS 和外部页面的同步\ninitIframeFilesSyncService(fs);\n\n// 模块依赖关系图\nconst depsGraph = new DepsGraph();\n\n// 创建一个 AMD 上下文\nconst manager = createAmdManager(fs,undefined, undefined, logger);\nmanager.mountToGlobal();\nconst style = document.createElement('style');\ndocument.head.appendChild(style);\n\n// 监听包管理器加载模块，并通知外部容器\nmanager.onModuleLoading(iframeLoadingModule);\n\n// 监听包之间的 require ，确定依赖关系图\nmanager.onModuleDeps(depsGraph.updatePaths.bind(depsGraph));\n\nfs.event.listen('files-change', async (type: FilesChangeType, files: string[]) => {\n    // 监听到文件发生变化时，批量更新发生变化的文件的模块\n    if (type === FilesChangeType.Change) {\n        // 批量更新依赖\n        depsGraph.batchTraverse(files, (node) => {\n            // 把包管理器里的缓存删掉，下次 require 时就会重新执行代码\n            manager.require_.factories.delete(node.path);\n            manager.require_.cache.delete(node.path);\n            // 如果 node 没有后续节点依赖，就运行一下 require\n            if (node.out.size) {\n                manager.require_(node.path);\n            }\n        });\n    }\n});\n\n// 注册一个服务，接受远程的消息更新代码\nregisterProxy<IDemoService>(DemoServiceName, {\n    run: async (jsEntry, htmlEntry, stylesEntry) => {\n        // 设置 html、css\n        if (htmlEntry) {\n            const [htmlExist, html] = fs.pathReduce(htmlEntry);\n            if (!htmlExist) return false;\n            document.body.innerHTML = (html as IFile).content;\n        }\n        if (stylesEntry) {\n            const [stylesExist, styles] = fs.pathReduce(stylesEntry);\n            if (!stylesExist) return false;\n            style.innerHTML = (styles as IFile).content;\n        }\n        // 执行 js 入口\n        const [jsExist] = fs.pathReduce(jsEntry);\n        if (!jsExist) return false;\n        await manager.require_(jsEntry);\n        return true;\n    },\n    setPlugins: async (pluginIds: string[]) => {\n        const plugins = generatePlugins(pluginIds);\n        manager.setPlugins(plugins);\n    }\n});\n\nwindow.onerror = err => {\n    console.error(err);\n};\n\niframeReady();\n"],"names":["callbacks","resolve","_a","ctx","moduleName","IEventTypes","factory","modulePath","factories","cache","dependencies","isAbsolute","path","res","module_","_this","fs","logger","FilesChangeType","traverse","eventType","args","order"],"mappings":"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"}