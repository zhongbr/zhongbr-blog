{"version":3,"file":"webcomponent.js","sources":["../src/utils/iframe.ts","../src/type.ts","../.cache/iframe/iframe.js?url","../src/iframe/iframe.css?used&raw","../src/iframe/html.ts","../src/iframe/index.ts","../src/default.ts","../src/plugins/index.ts","../src/core/files-system/types.ts","../src/core/files-system/sync.ts","../src/webcomponent.tsx"],"sourcesContent":["import { createEventSubscribeManager } from '../core/event';\nimport { callProxy, registerProxy } from '../core/proxy';\n\nconst EVENT_KEY = 'iframe-message-type';\nconst NOTIFICATION_SERVICE = 'iframe-notification-service';\n\ninterface INotificationService {\n    /** iframe 加载完成 */\n    iframeReady: (e: MessageEvent) => Promise<boolean>;\n    iframeLoadingModule: (moduleName: string, moduleUrl: string, e: MessageEvent) => Promise<void>;\n}\n\nconst emitter = createEventSubscribeManager<keyof INotificationService>();\n\n/**\n * 注册主进程中的服务，监听消息\n */\nexport const initMainThreadService = async () => {\n    const service: INotificationService = {\n        iframeReady: async (e) => {\n            console.log('iframe ready', e);\n            emitter.trigger('iframeReady', e);\n            return true;\n        },\n        iframeLoadingModule: async (moduleName, moduleUrl, e) => {\n            emitter.trigger('iframeLoadingModule', moduleName, moduleUrl, e);\n        }\n    }\n    registerProxy(NOTIFICATION_SERVICE, service);\n};\n\n/**\n * 主页面中，等待指定的 iframe 运行环境加载完成\n * @param iframe 要等待的 iframe\n * @param timeout 超时时间\n */\nexport const waitIframeReady = async (iframe: HTMLIFrameElement, timeout=10000) => {\n    // 被动监听 iframe 发送的消息来得知 iframe 已经加载，避免调用时 iframe 端还未准备好而导致的消息丢失\n    const listenTask = new Promise<null>((resolve, reject) => {\n        if (iframe.getAttribute('data-iframe-status') !== 'ready') {\n            emitter.once(\n                'iframeReady',\n                (...args) => {\n                    iframe.setAttribute('data-iframe-status', 'ready');\n                    resolve(null);\n                },\n                (e: MessageEvent) => e.source === iframe.contentWindow,\n                reject,\n                timeout\n            );\n        }\n        else {\n            resolve(null);\n        }\n    });\n    // 主动调用 iframe 暴露的接口查询是否准备好\n    const queryTask = async () => {\n        // 先等待 iframe 加载好\n        await new Promise(resolve => {\n            const onload = () => {\n                iframe.setAttribute('data-iframe-status', 'loaded');\n                resolve(null);\n                iframe.removeEventListener('load', onload);\n            };\n            iframe.addEventListener('load', onload);\n        });\n        // 等待 iframe 内的 js 环境准备好\n        await callProxy<Pick<INotificationService, 'iframeReady'>>({\n            win: iframe.contentWindow,\n            serviceId: NOTIFICATION_SERVICE,\n            method: 'iframeReady',\n            payload: [],\n            timeout\n        });\n    };\n    // 两个查询方式 race，取返回快的结果\n    return Promise.race([listenTask, queryTask()]);\n}\n\n/**\n * 通知外部容器，iframe 内部已经加载完成的函数\n */\nexport const iframeReady = async () => {\n    registerProxy<Pick<INotificationService, 'iframeReady'>>(NOTIFICATION_SERVICE, {\n        iframeReady: async () => {\n            return true;\n        }\n    });\n    const parent = window.top || window.parent || window.opener;\n    if (!parent) return;\n    return callProxy<INotificationService>({\n        win: parent,\n        serviceId: NOTIFICATION_SERVICE,\n        method: 'iframeReady',\n        payload: []\n    });\n}\n\n/**\n * 监听指定的 iframe 内加载模块\n * @param iframe 要监听的 iframe\n * @param cb 回调函数\n */\nexport const onIframeLoadingModule = (iframe: HTMLIFrameElement, cb: (moduleName: string, extraInfo: string) => void) => {\n    emitter.listen('iframeLoadingModule', cb, (moduleName, extraInfo, e: MessageEvent) => e.source === iframe.contentWindow);\n};\n\n/**\n * 通知外部容器，iframe 内部正在加载模块的函数\n * @param moduleName\n * @param extraInfo\n */\nexport const iframeLoadingModule = async (moduleName: string, extraInfo: string) => {\n    const parent = window.top || window.parent || window.opener;\n    if (!parent) return;\n    return callProxy<INotificationService>({\n        win: parent,\n        serviceId: NOTIFICATION_SERVICE,\n        method: 'iframeLoadingModule',\n        payload: [moduleName, extraInfo]\n    });\n};\n","export const DemoServiceName = 'demo-service';\n\n\nexport interface IDemoService {\n    run: (jsEntry: string, htmlEntry?: string, stylesEntry?: string) => Promise<boolean>;\n    setPlugins: (pluginsId: string[]) => Promise<void>;\n}\n","export default \"data:application/javascript;base64,Y29uc3QgZGVidWdPbmx5TGV2ZWwgPSBbImxvZyIsICJkZWJ1ZyJdOwpjb25zdCBsb2dnZXIgPSBkZWJ1Z09ubHlMZXZlbC5yZWR1Y2UoKHByZSwga2V5KSA9PiB7CiAgcmV0dXJuIE9iamVjdC5hc3NpZ24ocHJlLCB7CiAgICBba2V5XTogKC4uLmFyZ3MpID0+IHsKICAgICAgcmV0dXJuIG51bGw7CiAgICB9CiAgfSk7Cn0sIHt9KTsKbGV0IE1lc3NhZ2VJRCA9IDA7CmNvbnN0IGdldE1lc3NhZ2VJZCA9ICgpID0+IE1lc3NhZ2VJRCsrOwpjb25zdCBzZXJ2aWNlcyA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgU2V0KCk7CmNvbnN0IHdhaXRTZXJ2aWNlQ2FsbGJhY2tzID0gLyogQF9fUFVSRV9fICovIG5ldyBNYXAoKTsKc2VsZi5hZGRFdmVudExpc3RlbmVyKCJtZXNzYWdlIiwgKGUpID0+IHsKICBjb25zdCBtZXNzYWdlID0gZS5kYXRhOwogIGlmICh0eXBlb2YgbWVzc2FnZSAhPT0gIm9iamVjdCIgfHwgUmVmbGVjdC5nZXQobWVzc2FnZSwgIl9fcHJveHlfaW50ZXJuYWwiKSAhPT0gIndhaXQiKSB7CiAgICByZXR1cm47CiAgfQogIGNvbnN0IHNlcnZpY2VJZCA9IG1lc3NhZ2UucmVjZWl2ZXI7CiAgY29uc3QgdGltZW91dF8gPSBzZXRUaW1lb3V0KCgpID0+IHsKICAgIGNvbnN0IGNhbGxiYWNrczIgPSAod2FpdFNlcnZpY2VDYWxsYmFja3MuZ2V0KHNlcnZpY2VJZCkgfHwgW10pLmZpbHRlcigoYykgPT4gYyAhPT0gY2FsbGJhY2spOwogICAgd2FpdFNlcnZpY2VDYWxsYmFja3Muc2V0KHNlcnZpY2VJZCwgY2FsbGJhY2tzMik7CiAgICAoZS5zb3VyY2UgfHwgc2VsZikucG9zdE1lc3NhZ2UoewogICAgICBfX3Byb3h5X2ludGVybmFsOiAid2FpdC1yZXBseSIsCiAgICAgIGVycm9yOiB0cnVlLAogICAgICBpZDogbWVzc2FnZS5pZCwKICAgICAgcGF5bG9hZDogW2BbcHJveHldd2FpdCBmb3Igc2VydmljZSAke3NlcnZpY2VJZH0gdGltZW91dC5gXQogICAgfSwgewogICAgICB0YXJnZXRPcmlnaW46ICIqIgogICAgfSk7CiAgfSwgbWVzc2FnZS50aW1lb3V0KTsKICBjb25zdCBjYWxsYmFjayA9ICgpID0+IHsKICAgIGNsZWFyVGltZW91dCh0aW1lb3V0Xyk7CiAgICAoZS5zb3VyY2UgfHwgc2VsZikucG9zdE1lc3NhZ2UoewogICAgICBfX3Byb3h5X2ludGVybmFsOiAid2FpdC1yZXBseSIsCiAgICAgIGlkOiBtZXNzYWdlLmlkLAogICAgICBlcnJvcjogZmFsc2UsCiAgICAgIHBheWxvYWQ6IFtdCiAgICB9LCB7CiAgICAgIHRhcmdldE9yaWdpbjogIioiCiAgICB9KTsKICAgIGNvbnN0IGNhbGxiYWNrczIgPSAod2FpdFNlcnZpY2VDYWxsYmFja3MuZ2V0KHNlcnZpY2VJZCkgfHwgW10pLmZpbHRlcigoYykgPT4gYyAhPT0gY2FsbGJhY2spOwogICAgd2FpdFNlcnZpY2VDYWxsYmFja3Muc2V0KHNlcnZpY2VJZCwgY2FsbGJhY2tzMik7CiAgfTsKICBjb25zdCBjYWxsYmFja3MgPSB3YWl0U2VydmljZUNhbGxiYWNrcy5nZXQoc2VydmljZUlkKSB8fCBbXTsKICBjYWxsYmFja3MucHVzaChjYWxsYmFjayk7CiAgd2FpdFNlcnZpY2VDYWxsYmFja3Muc2V0KHNlcnZpY2VJZCwgY2FsbGJhY2tzKTsKICBpZiAoc2VydmljZXMuaGFzKHNlcnZpY2VJZCkpIHsKICAgIGNhbGxiYWNrKCk7CiAgfQp9KTsKZnVuY3Rpb24gcmVnaXN0ZXJQcm94eShzZXJ2aWNlSWQsIG9iaikgewogIGlmIChzZXJ2aWNlcy5oYXMoc2VydmljZUlkKSkgewogICAgcmV0dXJuOwogIH0KICBzZXJ2aWNlcy5hZGQoc2VydmljZUlkKTsKICBjb25zdCBjYWxsYmFja3MgPSB3YWl0U2VydmljZUNhbGxiYWNrcy5nZXQoc2VydmljZUlkKTsKICBpZiAoY2FsbGJhY2tzKQogICAgY2FsbGJhY2tzLmZvckVhY2goKGNhbGxiYWNrKSA9PiBjYWxsYmFjaygpKTsKICBjb25zdCBzZXJ2aWNlSGFuZGxlciA9IGFzeW5jIChlKSA9PiB7CiAgICB2YXIgX2E7CiAgICBjb25zdCBtZXNzYWdlID0gZS5kYXRhOwogICAgaWYgKHR5cGVvZiBtZXNzYWdlICE9PSAib2JqZWN0IiB8fCBSZWZsZWN0LmdldChtZXNzYWdlLCAiX19wcm94eV9pbnRlcm5hbCIpICE9PSAiY2FsbCIpIHsKICAgICAgcmV0dXJuOwogICAgfQogICAgaWYgKG1lc3NhZ2UucmVjZWl2ZXIgPT09IHNlcnZpY2VJZCkgewogICAgICBjb25zdCBtZXRob2QgPSBSZWZsZWN0LmdldChvYmosIG1lc3NhZ2UubWV0aG9kKTsKICAgICAgaWYgKCFtZXRob2QpIHsKICAgICAgICAoZS5zb3VyY2UgfHwgc2VsZikucG9zdE1lc3NhZ2UoewogICAgICAgICAgX19wcm94eV9pbnRlcm5hbDogInJlcGx5IiwKICAgICAgICAgIGlkOiBtZXNzYWdlLmlkLAogICAgICAgICAgZXJyb3I6IHRydWUsCiAgICAgICAgICBwYXlsb2FkOiBbYFtwcm94eV0gbWV0aG9kIFxgJHttZXNzYWdlLm1ldGhvZH1cYCBkb2VzIG5vdCBleGlzdCBvbiByZW1vdGUgb2JqZWN0ICR7bWVzc2FnZS5yZWNlaXZlcn0gb3IgaXQgaXMgbm90IGEgZnVuY3Rpb24uYF0KICAgICAgICB9LCB7CiAgICAgICAgICB0YXJnZXRPcmlnaW46ICIqIgogICAgICAgIH0pOwogICAgICB9CiAgICAgIGxldCByZXMgPSBtZXRob2Q7CiAgICAgIGlmICh0eXBlb2YgbWV0aG9kID09PSAiZnVuY3Rpb24iKSB7CiAgICAgICAgcmVzID0gYXdhaXQgbWV0aG9kLmNhbGwob2JqLCAuLi5tZXNzYWdlLnBheWxvYWQsIGUpOwogICAgICB9CiAgICAgIGxvZ2dlci5kZWJ1ZygiW3Byb3h5XSByZXBseSIsICgoX2EgPSBzZWxmID09IG51bGwgPyB2b2lkIDAgOiBzZWxmLmxvY2F0aW9uKSA9PSBudWxsID8gdm9pZCAwIDogX2EuaHJlZikgfHwgIndvcmtlciIsIGUuc291cmNlLCBtZXNzYWdlLnJlY2VpdmVyLCBtZXNzYWdlLm1ldGhvZCwgZS5zb3VyY2UgfHwgc2VsZik7CiAgICAgIChlLnNvdXJjZSB8fCBzZWxmKS5wb3N0TWVzc2FnZSh7CiAgICAgICAgX19wcm94eV9pbnRlcm5hbDogInJlcGx5IiwKICAgICAgICBpZDogbWVzc2FnZS5pZCwKICAgICAgICBlcnJvcjogZmFsc2UsCiAgICAgICAgcGF5bG9hZDogW3Jlc10KICAgICAgfSwgewogICAgICAgIHRhcmdldE9yaWdpbjogIioiCiAgICAgIH0pOwogICAgfQogIH07CiAgc2VsZi5hZGRFdmVudExpc3RlbmVyKCJtZXNzYWdlIiwgc2VydmljZUhhbmRsZXIpOwogIHJldHVybiAoKSA9PiB7CiAgICBzZWxmLnJlbW92ZUV2ZW50TGlzdGVuZXIoIm1lc3NhZ2UiLCBzZXJ2aWNlSGFuZGxlcik7CiAgfTsKfQphc3luYyBmdW5jdGlvbiB3YWl0UHJveHkod2luLCBzZXJ2aWNlSWQsIHRpbWVvdXQgPSAxZTQpIHsKICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUzLCByZWplY3QpID0+IHsKICAgIGNvbnN0IG1lc3NhZ2VJZCA9IGdldE1lc3NhZ2VJZCgpOwogICAgY29uc3QgdGltZW91dF8gPSBzZXRUaW1lb3V0KCgpID0+IHsKICAgICAgc2VsZi5yZW1vdmVFdmVudExpc3RlbmVyKCJtZXNzYWdlIiwgY2FsbGJhY2spOwogICAgICByZWplY3QoYFtwcm94eV0gd2FpdCBmb3IgJHtzZXJ2aWNlSWR9IHRpbWVvdXQgLmApOwogICAgfSwgdGltZW91dCk7CiAgICBjb25zdCBjYWxsYmFjayA9IChlKSA9PiB7CiAgICAgIGlmICgoZS5zb3VyY2UgfHwgc2VsZikgIT09IHdpbikKICAgICAgICByZXR1cm47CiAgICAgIGNvbnN0IG1lc3NhZ2UgPSBlLmRhdGE7CiAgICAgIGlmICh0eXBlb2YgbWVzc2FnZSAhPT0gIm9iamVjdCIgfHwgUmVmbGVjdC5nZXQobWVzc2FnZSwgIl9fcHJveHlfaW50ZXJuYWwiKSAhPT0gIndhaXQtcmVwbHkiIHx8IG1lc3NhZ2UuaWQgIT09IG1lc3NhZ2VJZCkgewogICAgICAgIHJldHVybjsKICAgICAgfQogICAgICByZXNvbHZlMyhudWxsKTsKICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXRfKTsKICAgICAgc2VsZi5yZW1vdmVFdmVudExpc3RlbmVyKCJtZXNzYWdlIiwgY2FsbGJhY2spOwogICAgfTsKICAgIHNlbGYuYWRkRXZlbnRMaXN0ZW5lcigibWVzc2FnZSIsIGNhbGxiYWNrKTsKICAgIHdpbi5wb3N0TWVzc2FnZSh7CiAgICAgIF9fcHJveHlfaW50ZXJuYWw6ICJ3YWl0IiwKICAgICAgcmVjZWl2ZXI6IHNlcnZpY2VJZCwKICAgICAgcGF5bG9hZDogW10sCiAgICAgIGVycm9yOiBmYWxzZSwKICAgICAgaWQ6IG1lc3NhZ2VJZAogICAgfSwgewogICAgICB0YXJnZXRPcmlnaW46ICIqIgogICAgfSk7CiAgfSk7Cn0KYXN5bmMgZnVuY3Rpb24gY2FsbFByb3h5KHsgd2luLCBzZXJ2aWNlSWQsIG1ldGhvZCwgcGF5bG9hZCwgdGltZW91dCA9IDFlNCB9KSB7CiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlMywgcmVqZWN0KSA9PiB7CiAgICB2YXIgX2E7CiAgICBjb25zdCBtZXNzYWdlSWQgPSBnZXRNZXNzYWdlSWQoKTsKICAgIGxldCBoYW5kbGVyID0gc2VsZjsKICAgIGlmICh3aW4gaW5zdGFuY2VvZiBXb3JrZXIpIHsKICAgICAgaGFuZGxlciA9IHdpbjsKICAgIH0KICAgIGxldCB0aW1lb3V0XyA9IHNldFRpbWVvdXQoKCkgPT4gewogICAgICByZWplY3QoYGNhbGwgcmVtb3RlIG9iamVjdCAke3NlcnZpY2VJZH0gbWV0aG9kICR7bWV0aG9kLnRvU3RyaW5nKCl9IHRpbWVvdXRgKTsKICAgICAgaGFuZGxlci5yZW1vdmVFdmVudExpc3RlbmVyKCJtZXNzYWdlIiwgY2FsbGJhY2spOwogICAgfSwgdGltZW91dCk7CiAgICBjb25zdCBjYWxsYmFjayA9IChlKSA9PiB7CiAgICAgIHZhciBfYTI7CiAgICAgIGlmICghKHdpbiBpbnN0YW5jZW9mIFdvcmtlcikgJiYgKGUuc291cmNlIHx8IHNlbGYpICE9PSB3aW4pCiAgICAgICAgcmV0dXJuOwogICAgICBjb25zdCBtZXNzYWdlID0gZS5kYXRhOwogICAgICBpZiAodHlwZW9mIG1lc3NhZ2UgIT09ICJvYmplY3QiIHx8IFJlZmxlY3QuZ2V0KG1lc3NhZ2UsICJfX3Byb3h5X2ludGVybmFsIikgIT09ICJyZXBseSIgfHwgbWVzc2FnZS5pZCAhPT0gbWVzc2FnZUlkKQogICAgICAgIHJldHVybjsKICAgICAgaGFuZGxlci5yZW1vdmVFdmVudExpc3RlbmVyKCJtZXNzYWdlIiwgY2FsbGJhY2spOwogICAgICBjbGVhclRpbWVvdXQodGltZW91dF8pOwogICAgICBsb2dnZXIuZGVidWcoIltwcm94eV0gcmVjZWl2ZSByZXBseSIsICgoX2EyID0gc2VsZiA9PSBudWxsID8gdm9pZCAwIDogc2VsZi5sb2NhdGlvbikgPT0gbnVsbCA/IHZvaWQgMCA6IF9hMi5ocmVmKSB8fCAid29ya2VyIiwgbWVzc2FnZS5pZCk7CiAgICAgIGlmIChtZXNzYWdlLmVycm9yKSB7CiAgICAgICAgcmVqZWN0KG1lc3NhZ2UucGF5bG9hZFswXSk7CiAgICAgICAgcmV0dXJuOwogICAgICB9CiAgICAgIHJlc29sdmUzKG1lc3NhZ2UucGF5bG9hZFswXSk7CiAgICB9OwogICAgaGFuZGxlci5hZGRFdmVudExpc3RlbmVyKCJtZXNzYWdlIiwgY2FsbGJhY2spOwogICAgbG9nZ2VyLmRlYnVnKCJbcHJveHldIGNhbGwiLCAoKF9hID0gc2VsZiA9PSBudWxsID8gdm9pZCAwIDogc2VsZi5sb2NhdGlvbikgPT0gbnVsbCA/IHZvaWQgMCA6IF9hLmhyZWYpIHx8ICJ3b3JrZXIiLCBzZXJ2aWNlSWQsIG1ldGhvZCk7CiAgICB3aW4ucG9zdE1lc3NhZ2UoewogICAgICBpZDogbWVzc2FnZUlkLAogICAgICBfX3Byb3h5X2ludGVybmFsOiAiY2FsbCIsCiAgICAgIHJlY2VpdmVyOiBzZXJ2aWNlSWQsCiAgICAgIG1ldGhvZCwKICAgICAgcGF5bG9hZCwKICAgICAgZXJyb3I6IGZhbHNlCiAgICB9LCB7CiAgICAgIHRhcmdldE9yaWdpbjogIioiCiAgICB9KTsKICB9KTsKfQpmdW5jdGlvbiBiaW5kU2NyaXB0TG9hZGVyVG9DdHgoY3R4MikgewogIGxldCBsb2FkaW5nTW9kdWxlTmFtZSA9ICIiOwogIGNvbnN0IHNjcmlwdExvYWRpbmdUYXNrcyA9IFtdOwogIGNvbnN0IGxvYWRTY3JpcHQgPSBhc3luYyAoZG9tLCB1cmwsIG1vZHVsZU5hbWUyID0gImdsb2JhbE9iaiIpID0+IHsKICAgIGlmIChsb2FkaW5nTW9kdWxlTmFtZSkgewogICAgICBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZTMpID0+IHsKICAgICAgICByZXNvbHZlMy5tb2R1bGVOYW1lID0gbW9kdWxlTmFtZTI7CiAgICAgICAgc2NyaXB0TG9hZGluZ1Rhc2tzLnB1c2gocmVzb2x2ZTMpOwogICAgICB9KTsKICAgIH0KICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZTMsIHJlamVjdCkgPT4gewogICAgICBjb25zdCBzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJzY3JpcHQiKTsKICAgICAgY29uc3QgdGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4gewogICAgICAgIHZhciBfYTsKICAgICAgICBjdHgyLmxvZ2dlci5sb2coIlthbWRdIHNjcmlwdCBsb2FkIHRpbWVvdXQgIiArIG1vZHVsZU5hbWUyKTsKICAgICAgICByZWplY3QobmV3IEVycm9yKGBsb2FkIG1vZHVsZSAke21vZHVsZU5hbWUyfSB0aW1lb3V0YCkpOwogICAgICAgIChfYSA9IHNjcmlwdExvYWRpbmdUYXNrcy5zaGlmdCgpKSA9PSBudWxsID8gdm9pZCAwIDogX2EoKTsKICAgICAgfSwgY3R4Mi5zY3JpcHRUaW1lb3V0KTsKICAgICAgc2NyaXB0Lm9ubG9hZCA9ICgpID0+IHsKICAgICAgICB2YXIgX2E7CiAgICAgICAgY3R4Mi5sb2dnZXIubG9nKCJbYW1kXSBzY3JpcHQgcmVzb2x2ZWQiLCBsb2FkaW5nTW9kdWxlTmFtZSk7CiAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpOwogICAgICAgIHJlc29sdmUzKG51bGwpOwogICAgICAgIGxvYWRpbmdNb2R1bGVOYW1lID0gIiI7CiAgICAgICAgKF9hID0gc2NyaXB0TG9hZGluZ1Rhc2tzLnNoaWZ0KCkpID09IG51bGwgPyB2b2lkIDAgOiBfYSgpOwogICAgICB9OwogICAgICBzY3JpcHQub25lcnJvciA9IChlcnIpID0+IHsKICAgICAgICB2YXIgX2E7CiAgICAgICAgY3R4Mi5sb2dnZXIubG9nKCJbYW1kXSBzY3JpcHQgcmVqZWN0ZWQiLCBsb2FkaW5nTW9kdWxlTmFtZSk7CiAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpOwogICAgICAgIHJlamVjdChlcnIpOwogICAgICAgIGxvYWRpbmdNb2R1bGVOYW1lID0gIiI7CiAgICAgICAgKF9hID0gc2NyaXB0TG9hZGluZ1Rhc2tzLnNoaWZ0KCkpID09IG51bGwgPyB2b2lkIDAgOiBfYSgpOwogICAgICB9OwogICAgICBzY3JpcHQuY3Jvc3NPcmlnaW4gPSAiYW5vbnltb3VzIjsKICAgICAgc2NyaXB0LnNyYyA9IHVybDsKICAgICAgc2NyaXB0LnR5cGUgPSAidGV4dC9qYXZhc2NyaXB0IjsKICAgICAgY3R4Mi5sb2dnZXIubG9nKCJbYW1kXSBzdGFydCBsb2FkIHNjcmlwdCIsIG1vZHVsZU5hbWUyKTsKICAgICAgbG9hZGluZ01vZHVsZU5hbWUgPSBtb2R1bGVOYW1lMjsKICAgICAgZG9tLmFwcGVuZENoaWxkKHNjcmlwdCk7CiAgICB9KTsKICB9OwogIGN0eDIuc2NyaXB0TG9hZGVyID0gewogICAgZ2V0TG9hZGluZ01vZHVsZU5hbWU6ICgpID0+IGxvYWRpbmdNb2R1bGVOYW1lLAogICAgbG9hZFNjcmlwdCwKICAgIHNjcmlwdExvYWRpbmdUYXNrcwogIH07Cn0KdmFyIElFdmVudFR5cGVzID0gLyogQF9fUFVSRV9fICovICgoSUV2ZW50VHlwZXMyKSA9PiB7CiAgSUV2ZW50VHlwZXMyWyJNb2R1bGVVcGRhdGUiXSA9ICJtb2R1bGUtdXBkYXRlIjsKICBJRXZlbnRUeXBlczJbIkxvYWRpbmdTY3JpcHQiXSA9ICJsb2FkaW5nLXNjcmlwdCI7CiAgSUV2ZW50VHlwZXMyWyJNb2R1bGVEZXBzIl0gPSAibW9kdWxlLWRlcHMiOwogIHJldHVybiBJRXZlbnRUeXBlczI7Cn0pKElFdmVudFR5cGVzIHx8IHt9KTsKZnVuY3Rpb24gYmluZERlZmluZVRvQ3R4KGN0eDIpIHsKICBmdW5jdGlvbiBkZWZpbmUobW9kdWxlTmFtZTIsIGRlcGVuZGVuY2llc18sIGZhY3RvcnkyKSB7CiAgICBpZiAodHlwZW9mIG1vZHVsZU5hbWUyID09PSAiZnVuY3Rpb24iKSB7CiAgICAgIGZhY3RvcnkyID0gbW9kdWxlTmFtZTI7CiAgICAgIGRlcGVuZGVuY2llc18gPSBbInJlcXVpcmUiLCAiZXhwb3J0cyIsICJtb2R1bGUiXTsKICAgICAgbW9kdWxlTmFtZTIgPSBjdHgyLnNjcmlwdExvYWRlci5nZXRMb2FkaW5nTW9kdWxlTmFtZSgpOwogICAgfQogICAgaWYgKEFycmF5LmlzQXJyYXkobW9kdWxlTmFtZTIpKSB7CiAgICAgIGZhY3RvcnkyID0gZGVwZW5kZW5jaWVzXzsKICAgICAgZGVwZW5kZW5jaWVzXyA9IG1vZHVsZU5hbWUyOwogICAgICBtb2R1bGVOYW1lMiA9IGN0eDIuc2NyaXB0TG9hZGVyLmdldExvYWRpbmdNb2R1bGVOYW1lKCk7CiAgICB9CiAgICBjdHgyLmxvZ2dlci5sb2coIlthbWRdIGRlZmluZSBtb2R1bGUiLCBtb2R1bGVOYW1lMiwgZGVwZW5kZW5jaWVzXyk7CiAgICBjb25zdCBtb2R1bGVQYXRoMiA9IGN0eDIucmVxdWlyZS5yZXNvbHZlKG1vZHVsZU5hbWUyKTsKICAgIGNvbnN0IHsgZmFjdG9yaWVzOiBmYWN0b3JpZXMyLCBjYWNoZTogY2FjaGUyLCBkZXBlbmRlbmNpZXM6IGRlcGVuZGVuY2llczIgfSA9IGN0eDIucmVxdWlyZTsKICAgIGlmIChmYWN0b3JpZXMyLmhhcyhtb2R1bGVQYXRoMikpIHsKICAgICAgZmFjdG9yaWVzMi5kZWxldGUobW9kdWxlUGF0aDIpOwogICAgfQogICAgaWYgKGNhY2hlMi5oYXMobW9kdWxlUGF0aDIpKSB7CiAgICAgIGNhY2hlMi5kZWxldGUobW9kdWxlUGF0aDIpOwogICAgfQogICAgaWYgKGRlcGVuZGVuY2llczIuaGFzKG1vZHVsZVBhdGgyKSkgewogICAgICBkZXBlbmRlbmNpZXMyLmRlbGV0ZShtb2R1bGVQYXRoMik7CiAgICB9CiAgICBjdHgyLmV2ZW50U3Vic2NyaWJlTWFuYWdlci50cmlnZ2VyKElFdmVudFR5cGVzLk1vZHVsZVVwZGF0ZSwgbW9kdWxlUGF0aDIpOwogICAgZmFjdG9yaWVzMi5zZXQobW9kdWxlUGF0aDIsIGZhY3RvcnkyKTsKICAgIGRlcGVuZGVuY2llczIuc2V0KG1vZHVsZVBhdGgyLCBkZXBlbmRlbmNpZXNfKTsKICAgIHJldHVybiAoKSA9PiB7CiAgICAgIGN0eDIubG9nZ2VyLmxvZygiW2FtZF0gbW9kdWxlIGRpc3Bvc2UiLCBtb2R1bGVOYW1lMik7CiAgICAgIGZhY3RvcmllczIuZGVsZXRlKG1vZHVsZVBhdGgyKTsKICAgIH07CiAgfQogIGN0eDIuZGVmaW5lID0gT2JqZWN0LmFzc2lnbihkZWZpbmUsIHsKICAgIGFtZDoge30KICB9KTsKfQpmdW5jdGlvbiBhc3NlcnRQYXRoKHBhdGgpIHsKICBpZiAodHlwZW9mIHBhdGggIT09ICJzdHJpbmciKSB7CiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCJQYXRoIG11c3QgYmUgYSBzdHJpbmcuIFJlY2VpdmVkICIgKyBKU09OLnN0cmluZ2lmeShwYXRoKSk7CiAgfQp9CmZ1bmN0aW9uIG5vcm1hbGl6ZVN0cmluZ1Bvc2l4KHBhdGgsIGFsbG93QWJvdmVSb290KSB7CiAgdmFyIHJlcyA9ICIiOwogIHZhciBsYXN0U2VnbWVudExlbmd0aCA9IDA7CiAgdmFyIGxhc3RTbGFzaCA9IC0xOwogIHZhciBkb3RzID0gMDsKICB2YXIgY29kZTsKICBmb3IgKHZhciBpID0gMDsgaSA8PSBwYXRoLmxlbmd0aDsgKytpKSB7CiAgICBpZiAoaSA8IHBhdGgubGVuZ3RoKQogICAgICBjb2RlID0gcGF0aC5jaGFyQ29kZUF0KGkpOwogICAgZWxzZSBpZiAoY29kZSA9PT0gNDcpCiAgICAgIGJyZWFrOwogICAgZWxzZQogICAgICBjb2RlID0gNDc7CiAgICBpZiAoY29kZSA9PT0gNDcpIHsKICAgICAgaWYgKGxhc3RTbGFzaCA9PT0gaSAtIDEgfHwgZG90cyA9PT0gMSkKICAgICAgICA7CiAgICAgIGVsc2UgaWYgKGxhc3RTbGFzaCAhPT0gaSAtIDEgJiYgZG90cyA9PT0gMikgewogICAgICAgIGlmIChyZXMubGVuZ3RoIDwgMiB8fCBsYXN0U2VnbWVudExlbmd0aCAhPT0gMiB8fCByZXMuY2hhckNvZGVBdChyZXMubGVuZ3RoIC0gMSkgIT09IDQ2IHx8IHJlcy5jaGFyQ29kZUF0KHJlcy5sZW5ndGggLSAyKSAhPT0gNDYpIHsKICAgICAgICAgIGlmIChyZXMubGVuZ3RoID4gMikgewogICAgICAgICAgICB2YXIgbGFzdFNsYXNoSW5kZXggPSByZXMubGFzdEluZGV4T2YoIi8iKTsKICAgICAgICAgICAgaWYgKGxhc3RTbGFzaEluZGV4ICE9PSByZXMubGVuZ3RoIC0gMSkgewogICAgICAgICAgICAgIGlmIChsYXN0U2xhc2hJbmRleCA9PT0gLTEpIHsKICAgICAgICAgICAgICAgIHJlcyA9ICIiOwogICAgICAgICAgICAgICAgbGFzdFNlZ21lbnRMZW5ndGggPSAwOwogICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICByZXMgPSByZXMuc2xpY2UoMCwgbGFzdFNsYXNoSW5kZXgpOwogICAgICAgICAgICAgICAgbGFzdFNlZ21lbnRMZW5ndGggPSByZXMubGVuZ3RoIC0gMSAtIHJlcy5sYXN0SW5kZXhPZigiLyIpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBsYXN0U2xhc2ggPSBpOwogICAgICAgICAgICAgIGRvdHMgPSAwOwogICAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgICB9CiAgICAgICAgICB9IGVsc2UgaWYgKHJlcy5sZW5ndGggPT09IDIgfHwgcmVzLmxlbmd0aCA9PT0gMSkgewogICAgICAgICAgICByZXMgPSAiIjsKICAgICAgICAgICAgbGFzdFNlZ21lbnRMZW5ndGggPSAwOwogICAgICAgICAgICBsYXN0U2xhc2ggPSBpOwogICAgICAgICAgICBkb3RzID0gMDsKICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGlmIChhbGxvd0Fib3ZlUm9vdCkgewogICAgICAgICAgaWYgKHJlcy5sZW5ndGggPiAwKQogICAgICAgICAgICByZXMgKz0gIi8uLiI7CiAgICAgICAgICBlbHNlCiAgICAgICAgICAgIHJlcyA9ICIuLiI7CiAgICAgICAgICBsYXN0U2VnbWVudExlbmd0aCA9IDI7CiAgICAgICAgfQogICAgICB9IGVsc2UgewogICAgICAgIGlmIChyZXMubGVuZ3RoID4gMCkKICAgICAgICAgIHJlcyArPSAiLyIgKyBwYXRoLnNsaWNlKGxhc3RTbGFzaCArIDEsIGkpOwogICAgICAgIGVsc2UKICAgICAgICAgIHJlcyA9IHBhdGguc2xpY2UobGFzdFNsYXNoICsgMSwgaSk7CiAgICAgICAgbGFzdFNlZ21lbnRMZW5ndGggPSBpIC0gbGFzdFNsYXNoIC0gMTsKICAgICAgfQogICAgICBsYXN0U2xhc2ggPSBpOwogICAgICBkb3RzID0gMDsKICAgIH0gZWxzZSBpZiAoY29kZSA9PT0gNDYgJiYgZG90cyAhPT0gLTEpIHsKICAgICAgKytkb3RzOwogICAgfSBlbHNlIHsKICAgICAgZG90cyA9IC0xOwogICAgfQogIH0KICByZXR1cm4gcmVzOwp9CmZ1bmN0aW9uIF9mb3JtYXQoc2VwLCBwYXRoT2JqZWN0KSB7CiAgdmFyIGRpciA9IHBhdGhPYmplY3QuZGlyIHx8IHBhdGhPYmplY3Qucm9vdDsKICB2YXIgYmFzZSA9IHBhdGhPYmplY3QuYmFzZSB8fCAocGF0aE9iamVjdC5uYW1lIHx8ICIiKSArIChwYXRoT2JqZWN0LmV4dCB8fCAiIik7CiAgaWYgKCFkaXIpIHsKICAgIHJldHVybiBiYXNlOwogIH0KICBpZiAoZGlyID09PSBwYXRoT2JqZWN0LnJvb3QpIHsKICAgIHJldHVybiBkaXIgKyBiYXNlOwogIH0KICByZXR1cm4gZGlyICsgc2VwICsgYmFzZTsKfQp2YXIgcG9zaXggPSB7CiAgLy8gcGF0aC5yZXNvbHZlKFtmcm9tIC4uLl0sIHRvKQogIHJlc29sdmU6IGZ1bmN0aW9uIHJlc29sdmUyKCkgewogICAgdmFyIHJlc29sdmVkUGF0aCA9ICIiOwogICAgdmFyIHJlc29sdmVkQWJzb2x1dGUgPSBmYWxzZTsKICAgIHZhciBjd2Q7CiAgICBmb3IgKHZhciBpID0gYXJndW1lbnRzLmxlbmd0aCAtIDE7IGkgPj0gLTEgJiYgIXJlc29sdmVkQWJzb2x1dGU7IGktLSkgewogICAgICB2YXIgcGF0aDsKICAgICAgaWYgKGkgPj0gMCkKICAgICAgICBwYXRoID0gYXJndW1lbnRzW2ldOwogICAgICBlbHNlIHsKICAgICAgICBpZiAoY3dkID09PSB2b2lkIDApCiAgICAgICAgICBjd2QgPSBwcm9jZXNzLmN3ZCgpOwogICAgICAgIHBhdGggPSBjd2Q7CiAgICAgIH0KICAgICAgYXNzZXJ0UGF0aChwYXRoKTsKICAgICAgaWYgKHBhdGgubGVuZ3RoID09PSAwKSB7CiAgICAgICAgY29udGludWU7CiAgICAgIH0KICAgICAgcmVzb2x2ZWRQYXRoID0gcGF0aCArICIvIiArIHJlc29sdmVkUGF0aDsKICAgICAgcmVzb2x2ZWRBYnNvbHV0ZSA9IHBhdGguY2hhckNvZGVBdCgwKSA9PT0gNDc7CiAgICB9CiAgICByZXNvbHZlZFBhdGggPSBub3JtYWxpemVTdHJpbmdQb3NpeChyZXNvbHZlZFBhdGgsICFyZXNvbHZlZEFic29sdXRlKTsKICAgIGlmIChyZXNvbHZlZEFic29sdXRlKSB7CiAgICAgIGlmIChyZXNvbHZlZFBhdGgubGVuZ3RoID4gMCkKICAgICAgICByZXR1cm4gIi8iICsgcmVzb2x2ZWRQYXRoOwogICAgICBlbHNlCiAgICAgICAgcmV0dXJuICIvIjsKICAgIH0gZWxzZSBpZiAocmVzb2x2ZWRQYXRoLmxlbmd0aCA+IDApIHsKICAgICAgcmV0dXJuIHJlc29sdmVkUGF0aDsKICAgIH0gZWxzZSB7CiAgICAgIHJldHVybiAiLiI7CiAgICB9CiAgfSwKICBub3JtYWxpemU6IGZ1bmN0aW9uIG5vcm1hbGl6ZShwYXRoKSB7CiAgICBhc3NlcnRQYXRoKHBhdGgpOwogICAgaWYgKHBhdGgubGVuZ3RoID09PSAwKQogICAgICByZXR1cm4gIi4iOwogICAgdmFyIGlzQWJzb2x1dGUyID0gcGF0aC5jaGFyQ29kZUF0KDApID09PSA0NzsKICAgIHZhciB0cmFpbGluZ1NlcGFyYXRvciA9IHBhdGguY2hhckNvZGVBdChwYXRoLmxlbmd0aCAtIDEpID09PSA0NzsKICAgIHBhdGggPSBub3JtYWxpemVTdHJpbmdQb3NpeChwYXRoLCAhaXNBYnNvbHV0ZTIpOwogICAgaWYgKHBhdGgubGVuZ3RoID09PSAwICYmICFpc0Fic29sdXRlMikKICAgICAgcGF0aCA9ICIuIjsKICAgIGlmIChwYXRoLmxlbmd0aCA+IDAgJiYgdHJhaWxpbmdTZXBhcmF0b3IpCiAgICAgIHBhdGggKz0gIi8iOwogICAgaWYgKGlzQWJzb2x1dGUyKQogICAgICByZXR1cm4gIi8iICsgcGF0aDsKICAgIHJldHVybiBwYXRoOwogIH0sCiAgaXNBYnNvbHV0ZTogZnVuY3Rpb24gaXNBYnNvbHV0ZShwYXRoKSB7CiAgICBhc3NlcnRQYXRoKHBhdGgpOwogICAgcmV0dXJuIHBhdGgubGVuZ3RoID4gMCAmJiBwYXRoLmNoYXJDb2RlQXQoMCkgPT09IDQ3OwogIH0sCiAgam9pbjogZnVuY3Rpb24gam9pbigpIHsKICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKQogICAgICByZXR1cm4gIi4iOwogICAgdmFyIGpvaW5lZDsKICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgKytpKSB7CiAgICAgIHZhciBhcmcgPSBhcmd1bWVudHNbaV07CiAgICAgIGFzc2VydFBhdGgoYXJnKTsKICAgICAgaWYgKGFyZy5sZW5ndGggPiAwKSB7CiAgICAgICAgaWYgKGpvaW5lZCA9PT0gdm9pZCAwKQogICAgICAgICAgam9pbmVkID0gYXJnOwogICAgICAgIGVsc2UKICAgICAgICAgIGpvaW5lZCArPSAiLyIgKyBhcmc7CiAgICAgIH0KICAgIH0KICAgIGlmIChqb2luZWQgPT09IHZvaWQgMCkKICAgICAgcmV0dXJuICIuIjsKICAgIHJldHVybiBwb3NpeC5ub3JtYWxpemUoam9pbmVkKTsKICB9LAogIHJlbGF0aXZlOiBmdW5jdGlvbiByZWxhdGl2ZShmcm9tLCB0bykgewogICAgYXNzZXJ0UGF0aChmcm9tKTsKICAgIGFzc2VydFBhdGgodG8pOwogICAgaWYgKGZyb20gPT09IHRvKQogICAgICByZXR1cm4gIiI7CiAgICBmcm9tID0gcG9zaXgucmVzb2x2ZShmcm9tKTsKICAgIHRvID0gcG9zaXgucmVzb2x2ZSh0byk7CiAgICBpZiAoZnJvbSA9PT0gdG8pCiAgICAgIHJldHVybiAiIjsKICAgIHZhciBmcm9tU3RhcnQgPSAxOwogICAgZm9yICg7IGZyb21TdGFydCA8IGZyb20ubGVuZ3RoOyArK2Zyb21TdGFydCkgewogICAgICBpZiAoZnJvbS5jaGFyQ29kZUF0KGZyb21TdGFydCkgIT09IDQ3KQogICAgICAgIGJyZWFrOwogICAgfQogICAgdmFyIGZyb21FbmQgPSBmcm9tLmxlbmd0aDsKICAgIHZhciBmcm9tTGVuID0gZnJvbUVuZCAtIGZyb21TdGFydDsKICAgIHZhciB0b1N0YXJ0ID0gMTsKICAgIGZvciAoOyB0b1N0YXJ0IDwgdG8ubGVuZ3RoOyArK3RvU3RhcnQpIHsKICAgICAgaWYgKHRvLmNoYXJDb2RlQXQodG9TdGFydCkgIT09IDQ3KQogICAgICAgIGJyZWFrOwogICAgfQogICAgdmFyIHRvRW5kID0gdG8ubGVuZ3RoOwogICAgdmFyIHRvTGVuID0gdG9FbmQgLSB0b1N0YXJ0OwogICAgdmFyIGxlbmd0aCA9IGZyb21MZW4gPCB0b0xlbiA/IGZyb21MZW4gOiB0b0xlbjsKICAgIHZhciBsYXN0Q29tbW9uU2VwID0gLTE7CiAgICB2YXIgaSA9IDA7CiAgICBmb3IgKDsgaSA8PSBsZW5ndGg7ICsraSkgewogICAgICBpZiAoaSA9PT0gbGVuZ3RoKSB7CiAgICAgICAgaWYgKHRvTGVuID4gbGVuZ3RoKSB7CiAgICAgICAgICBpZiAodG8uY2hhckNvZGVBdCh0b1N0YXJ0ICsgaSkgPT09IDQ3KSB7CiAgICAgICAgICAgIHJldHVybiB0by5zbGljZSh0b1N0YXJ0ICsgaSArIDEpOwogICAgICAgICAgfSBlbHNlIGlmIChpID09PSAwKSB7CiAgICAgICAgICAgIHJldHVybiB0by5zbGljZSh0b1N0YXJ0ICsgaSk7CiAgICAgICAgICB9CiAgICAgICAgfSBlbHNlIGlmIChmcm9tTGVuID4gbGVuZ3RoKSB7CiAgICAgICAgICBpZiAoZnJvbS5jaGFyQ29kZUF0KGZyb21TdGFydCArIGkpID09PSA0NykgewogICAgICAgICAgICBsYXN0Q29tbW9uU2VwID0gaTsKICAgICAgICAgIH0gZWxzZSBpZiAoaSA9PT0gMCkgewogICAgICAgICAgICBsYXN0Q29tbW9uU2VwID0gMDsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgYnJlYWs7CiAgICAgIH0KICAgICAgdmFyIGZyb21Db2RlID0gZnJvbS5jaGFyQ29kZUF0KGZyb21TdGFydCArIGkpOwogICAgICB2YXIgdG9Db2RlID0gdG8uY2hhckNvZGVBdCh0b1N0YXJ0ICsgaSk7CiAgICAgIGlmIChmcm9tQ29kZSAhPT0gdG9Db2RlKQogICAgICAgIGJyZWFrOwogICAgICBlbHNlIGlmIChmcm9tQ29kZSA9PT0gNDcpCiAgICAgICAgbGFzdENvbW1vblNlcCA9IGk7CiAgICB9CiAgICB2YXIgb3V0ID0gIiI7CiAgICBmb3IgKGkgPSBmcm9tU3RhcnQgKyBsYXN0Q29tbW9uU2VwICsgMTsgaSA8PSBmcm9tRW5kOyArK2kpIHsKICAgICAgaWYgKGkgPT09IGZyb21FbmQgfHwgZnJvbS5jaGFyQ29kZUF0KGkpID09PSA0NykgewogICAgICAgIGlmIChvdXQubGVuZ3RoID09PSAwKQogICAgICAgICAgb3V0ICs9ICIuLiI7CiAgICAgICAgZWxzZQogICAgICAgICAgb3V0ICs9ICIvLi4iOwogICAgICB9CiAgICB9CiAgICBpZiAob3V0Lmxlbmd0aCA+IDApCiAgICAgIHJldHVybiBvdXQgKyB0by5zbGljZSh0b1N0YXJ0ICsgbGFzdENvbW1vblNlcCk7CiAgICBlbHNlIHsKICAgICAgdG9TdGFydCArPSBsYXN0Q29tbW9uU2VwOwogICAgICBpZiAodG8uY2hhckNvZGVBdCh0b1N0YXJ0KSA9PT0gNDcpCiAgICAgICAgKyt0b1N0YXJ0OwogICAgICByZXR1cm4gdG8uc2xpY2UodG9TdGFydCk7CiAgICB9CiAgfSwKICBfbWFrZUxvbmc6IGZ1bmN0aW9uIF9tYWtlTG9uZyhwYXRoKSB7CiAgICByZXR1cm4gcGF0aDsKICB9LAogIGRpcm5hbWU6IGZ1bmN0aW9uIGRpcm5hbWUocGF0aCkgewogICAgYXNzZXJ0UGF0aChwYXRoKTsKICAgIGlmIChwYXRoLmxlbmd0aCA9PT0gMCkKICAgICAgcmV0dXJuICIuIjsKICAgIHZhciBjb2RlID0gcGF0aC5jaGFyQ29kZUF0KDApOwogICAgdmFyIGhhc1Jvb3QgPSBjb2RlID09PSA0NzsKICAgIHZhciBlbmQgPSAtMTsKICAgIHZhciBtYXRjaGVkU2xhc2ggPSB0cnVlOwogICAgZm9yICh2YXIgaSA9IHBhdGgubGVuZ3RoIC0gMTsgaSA+PSAxOyAtLWkpIHsKICAgICAgY29kZSA9IHBhdGguY2hhckNvZGVBdChpKTsKICAgICAgaWYgKGNvZGUgPT09IDQ3KSB7CiAgICAgICAgaWYgKCFtYXRjaGVkU2xhc2gpIHsKICAgICAgICAgIGVuZCA9IGk7CiAgICAgICAgICBicmVhazsKICAgICAgICB9CiAgICAgIH0gZWxzZSB7CiAgICAgICAgbWF0Y2hlZFNsYXNoID0gZmFsc2U7CiAgICAgIH0KICAgIH0KICAgIGlmIChlbmQgPT09IC0xKQogICAgICByZXR1cm4gaGFzUm9vdCA/ICIvIiA6ICIuIjsKICAgIGlmIChoYXNSb290ICYmIGVuZCA9PT0gMSkKICAgICAgcmV0dXJuICIvLyI7CiAgICByZXR1cm4gcGF0aC5zbGljZSgwLCBlbmQpOwogIH0sCiAgYmFzZW5hbWU6IGZ1bmN0aW9uIGJhc2VuYW1lKHBhdGgsIGV4dCkgewogICAgaWYgKGV4dCAhPT0gdm9pZCAwICYmIHR5cGVvZiBleHQgIT09ICJzdHJpbmciKQogICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCciZXh0IiBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nJyk7CiAgICBhc3NlcnRQYXRoKHBhdGgpOwogICAgdmFyIHN0YXJ0ID0gMDsKICAgIHZhciBlbmQgPSAtMTsKICAgIHZhciBtYXRjaGVkU2xhc2ggPSB0cnVlOwogICAgdmFyIGk7CiAgICBpZiAoZXh0ICE9PSB2b2lkIDAgJiYgZXh0Lmxlbmd0aCA+IDAgJiYgZXh0Lmxlbmd0aCA8PSBwYXRoLmxlbmd0aCkgewogICAgICBpZiAoZXh0Lmxlbmd0aCA9PT0gcGF0aC5sZW5ndGggJiYgZXh0ID09PSBwYXRoKQogICAgICAgIHJldHVybiAiIjsKICAgICAgdmFyIGV4dElkeCA9IGV4dC5sZW5ndGggLSAxOwogICAgICB2YXIgZmlyc3ROb25TbGFzaEVuZCA9IC0xOwogICAgICBmb3IgKGkgPSBwYXRoLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7CiAgICAgICAgdmFyIGNvZGUgPSBwYXRoLmNoYXJDb2RlQXQoaSk7CiAgICAgICAgaWYgKGNvZGUgPT09IDQ3KSB7CiAgICAgICAgICBpZiAoIW1hdGNoZWRTbGFzaCkgewogICAgICAgICAgICBzdGFydCA9IGkgKyAxOwogICAgICAgICAgICBicmVhazsKICAgICAgICAgIH0KICAgICAgICB9IGVsc2UgewogICAgICAgICAgaWYgKGZpcnN0Tm9uU2xhc2hFbmQgPT09IC0xKSB7CiAgICAgICAgICAgIG1hdGNoZWRTbGFzaCA9IGZhbHNlOwogICAgICAgICAgICBmaXJzdE5vblNsYXNoRW5kID0gaSArIDE7CiAgICAgICAgICB9CiAgICAgICAgICBpZiAoZXh0SWR4ID49IDApIHsKICAgICAgICAgICAgaWYgKGNvZGUgPT09IGV4dC5jaGFyQ29kZUF0KGV4dElkeCkpIHsKICAgICAgICAgICAgICBpZiAoLS1leHRJZHggPT09IC0xKSB7CiAgICAgICAgICAgICAgICBlbmQgPSBpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICBleHRJZHggPSAtMTsKICAgICAgICAgICAgICBlbmQgPSBmaXJzdE5vblNsYXNoRW5kOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICAgIGlmIChzdGFydCA9PT0gZW5kKQogICAgICAgIGVuZCA9IGZpcnN0Tm9uU2xhc2hFbmQ7CiAgICAgIGVsc2UgaWYgKGVuZCA9PT0gLTEpCiAgICAgICAgZW5kID0gcGF0aC5sZW5ndGg7CiAgICAgIHJldHVybiBwYXRoLnNsaWNlKHN0YXJ0LCBlbmQpOwogICAgfSBlbHNlIHsKICAgICAgZm9yIChpID0gcGF0aC5sZW5ndGggLSAxOyBpID49IDA7IC0taSkgewogICAgICAgIGlmIChwYXRoLmNoYXJDb2RlQXQoaSkgPT09IDQ3KSB7CiAgICAgICAgICBpZiAoIW1hdGNoZWRTbGFzaCkgewogICAgICAgICAgICBzdGFydCA9IGkgKyAxOwogICAgICAgICAgICBicmVhazsKICAgICAgICAgIH0KICAgICAgICB9IGVsc2UgaWYgKGVuZCA9PT0gLTEpIHsKICAgICAgICAgIG1hdGNoZWRTbGFzaCA9IGZhbHNlOwogICAgICAgICAgZW5kID0gaSArIDE7CiAgICAgICAgfQogICAgICB9CiAgICAgIGlmIChlbmQgPT09IC0xKQogICAgICAgIHJldHVybiAiIjsKICAgICAgcmV0dXJuIHBhdGguc2xpY2Uoc3RhcnQsIGVuZCk7CiAgICB9CiAgfSwKICBleHRuYW1lOiBmdW5jdGlvbiBleHRuYW1lKHBhdGgpIHsKICAgIGFzc2VydFBhdGgocGF0aCk7CiAgICB2YXIgc3RhcnREb3QgPSAtMTsKICAgIHZhciBzdGFydFBhcnQgPSAwOwogICAgdmFyIGVuZCA9IC0xOwogICAgdmFyIG1hdGNoZWRTbGFzaCA9IHRydWU7CiAgICB2YXIgcHJlRG90U3RhdGUgPSAwOwogICAgZm9yICh2YXIgaSA9IHBhdGgubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHsKICAgICAgdmFyIGNvZGUgPSBwYXRoLmNoYXJDb2RlQXQoaSk7CiAgICAgIGlmIChjb2RlID09PSA0NykgewogICAgICAgIGlmICghbWF0Y2hlZFNsYXNoKSB7CiAgICAgICAgICBzdGFydFBhcnQgPSBpICsgMTsKICAgICAgICAgIGJyZWFrOwogICAgICAgIH0KICAgICAgICBjb250aW51ZTsKICAgICAgfQogICAgICBpZiAoZW5kID09PSAtMSkgewogICAgICAgIG1hdGNoZWRTbGFzaCA9IGZhbHNlOwogICAgICAgIGVuZCA9IGkgKyAxOwogICAgICB9CiAgICAgIGlmIChjb2RlID09PSA0NikgewogICAgICAgIGlmIChzdGFydERvdCA9PT0gLTEpCiAgICAgICAgICBzdGFydERvdCA9IGk7CiAgICAgICAgZWxzZSBpZiAocHJlRG90U3RhdGUgIT09IDEpCiAgICAgICAgICBwcmVEb3RTdGF0ZSA9IDE7CiAgICAgIH0gZWxzZSBpZiAoc3RhcnREb3QgIT09IC0xKSB7CiAgICAgICAgcHJlRG90U3RhdGUgPSAtMTsKICAgICAgfQogICAgfQogICAgaWYgKHN0YXJ0RG90ID09PSAtMSB8fCBlbmQgPT09IC0xIHx8IC8vIFdlIHNhdyBhIG5vbi1kb3QgY2hhcmFjdGVyIGltbWVkaWF0ZWx5IGJlZm9yZSB0aGUgZG90CiAgICBwcmVEb3RTdGF0ZSA9PT0gMCB8fCAvLyBUaGUgKHJpZ2h0LW1vc3QpIHRyaW1tZWQgcGF0aCBjb21wb25lbnQgaXMgZXhhY3RseSAnLi4nCiAgICBwcmVEb3RTdGF0ZSA9PT0gMSAmJiBzdGFydERvdCA9PT0gZW5kIC0gMSAmJiBzdGFydERvdCA9PT0gc3RhcnRQYXJ0ICsgMSkgewogICAgICByZXR1cm4gIiI7CiAgICB9CiAgICByZXR1cm4gcGF0aC5zbGljZShzdGFydERvdCwgZW5kKTsKICB9LAogIGZvcm1hdDogZnVuY3Rpb24gZm9ybWF0KHBhdGhPYmplY3QpIHsKICAgIGlmIChwYXRoT2JqZWN0ID09PSBudWxsIHx8IHR5cGVvZiBwYXRoT2JqZWN0ICE9PSAib2JqZWN0IikgewogICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgInBhdGhPYmplY3QiIGFyZ3VtZW50IG11c3QgYmUgb2YgdHlwZSBPYmplY3QuIFJlY2VpdmVkIHR5cGUgJyArIHR5cGVvZiBwYXRoT2JqZWN0KTsKICAgIH0KICAgIHJldHVybiBfZm9ybWF0KCIvIiwgcGF0aE9iamVjdCk7CiAgfSwKICBwYXJzZTogZnVuY3Rpb24gcGFyc2UocGF0aCkgewogICAgYXNzZXJ0UGF0aChwYXRoKTsKICAgIHZhciByZXQgPSB7IHJvb3Q6ICIiLCBkaXI6ICIiLCBiYXNlOiAiIiwgZXh0OiAiIiwgbmFtZTogIiIgfTsKICAgIGlmIChwYXRoLmxlbmd0aCA9PT0gMCkKICAgICAgcmV0dXJuIHJldDsKICAgIHZhciBjb2RlID0gcGF0aC5jaGFyQ29kZUF0KDApOwogICAgdmFyIGlzQWJzb2x1dGUyID0gY29kZSA9PT0gNDc7CiAgICB2YXIgc3RhcnQ7CiAgICBpZiAoaXNBYnNvbHV0ZTIpIHsKICAgICAgcmV0LnJvb3QgPSAiLyI7CiAgICAgIHN0YXJ0ID0gMTsKICAgIH0gZWxzZSB7CiAgICAgIHN0YXJ0ID0gMDsKICAgIH0KICAgIHZhciBzdGFydERvdCA9IC0xOwogICAgdmFyIHN0YXJ0UGFydCA9IDA7CiAgICB2YXIgZW5kID0gLTE7CiAgICB2YXIgbWF0Y2hlZFNsYXNoID0gdHJ1ZTsKICAgIHZhciBpID0gcGF0aC5sZW5ndGggLSAxOwogICAgdmFyIHByZURvdFN0YXRlID0gMDsKICAgIGZvciAoOyBpID49IHN0YXJ0OyAtLWkpIHsKICAgICAgY29kZSA9IHBhdGguY2hhckNvZGVBdChpKTsKICAgICAgaWYgKGNvZGUgPT09IDQ3KSB7CiAgICAgICAgaWYgKCFtYXRjaGVkU2xhc2gpIHsKICAgICAgICAgIHN0YXJ0UGFydCA9IGkgKyAxOwogICAgICAgICAgYnJlYWs7CiAgICAgICAgfQogICAgICAgIGNvbnRpbnVlOwogICAgICB9CiAgICAgIGlmIChlbmQgPT09IC0xKSB7CiAgICAgICAgbWF0Y2hlZFNsYXNoID0gZmFsc2U7CiAgICAgICAgZW5kID0gaSArIDE7CiAgICAgIH0KICAgICAgaWYgKGNvZGUgPT09IDQ2KSB7CiAgICAgICAgaWYgKHN0YXJ0RG90ID09PSAtMSkKICAgICAgICAgIHN0YXJ0RG90ID0gaTsKICAgICAgICBlbHNlIGlmIChwcmVEb3RTdGF0ZSAhPT0gMSkKICAgICAgICAgIHByZURvdFN0YXRlID0gMTsKICAgICAgfSBlbHNlIGlmIChzdGFydERvdCAhPT0gLTEpIHsKICAgICAgICBwcmVEb3RTdGF0ZSA9IC0xOwogICAgICB9CiAgICB9CiAgICBpZiAoc3RhcnREb3QgPT09IC0xIHx8IGVuZCA9PT0gLTEgfHwgLy8gV2Ugc2F3IGEgbm9uLWRvdCBjaGFyYWN0ZXIgaW1tZWRpYXRlbHkgYmVmb3JlIHRoZSBkb3QKICAgIHByZURvdFN0YXRlID09PSAwIHx8IC8vIFRoZSAocmlnaHQtbW9zdCkgdHJpbW1lZCBwYXRoIGNvbXBvbmVudCBpcyBleGFjdGx5ICcuLicKICAgIHByZURvdFN0YXRlID09PSAxICYmIHN0YXJ0RG90ID09PSBlbmQgLSAxICYmIHN0YXJ0RG90ID09PSBzdGFydFBhcnQgKyAxKSB7CiAgICAgIGlmIChlbmQgIT09IC0xKSB7CiAgICAgICAgaWYgKHN0YXJ0UGFydCA9PT0gMCAmJiBpc0Fic29sdXRlMikKICAgICAgICAgIHJldC5iYXNlID0gcmV0Lm5hbWUgPSBwYXRoLnNsaWNlKDEsIGVuZCk7CiAgICAgICAgZWxzZQogICAgICAgICAgcmV0LmJhc2UgPSByZXQubmFtZSA9IHBhdGguc2xpY2Uoc3RhcnRQYXJ0LCBlbmQpOwogICAgICB9CiAgICB9IGVsc2UgewogICAgICBpZiAoc3RhcnRQYXJ0ID09PSAwICYmIGlzQWJzb2x1dGUyKSB7CiAgICAgICAgcmV0Lm5hbWUgPSBwYXRoLnNsaWNlKDEsIHN0YXJ0RG90KTsKICAgICAgICByZXQuYmFzZSA9IHBhdGguc2xpY2UoMSwgZW5kKTsKICAgICAgfSBlbHNlIHsKICAgICAgICByZXQubmFtZSA9IHBhdGguc2xpY2Uoc3RhcnRQYXJ0LCBzdGFydERvdCk7CiAgICAgICAgcmV0LmJhc2UgPSBwYXRoLnNsaWNlKHN0YXJ0UGFydCwgZW5kKTsKICAgICAgfQogICAgICByZXQuZXh0ID0gcGF0aC5zbGljZShzdGFydERvdCwgZW5kKTsKICAgIH0KICAgIGlmIChzdGFydFBhcnQgPiAwKQogICAgICByZXQuZGlyID0gcGF0aC5zbGljZSgwLCBzdGFydFBhcnQgLSAxKTsKICAgIGVsc2UgaWYgKGlzQWJzb2x1dGUyKQogICAgICByZXQuZGlyID0gIi8iOwogICAgcmV0dXJuIHJldDsKICB9LAogIHNlcDogIi8iLAogIGRlbGltaXRlcjogIjoiLAogIHdpbjMyOiBudWxsLAogIHBvc2l4OiBudWxsCn07CnBvc2l4LnBvc2l4ID0gcG9zaXg7CnZhciBwYXRoQnJvd3NlcmlmeSA9IHBvc2l4OwpmdW5jdGlvbiBiaW5kUmVxdWlyZVRvQ3R4KGN0eCkgewogIGNvbnN0IGNhY2hlID0gLyogQF9fUFVSRV9fICovIG5ldyBNYXAoKTsKICBjb25zdCBmYWN0b3JpZXMgPSAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpOwogIGNvbnN0IGRlcGVuZGVuY2llcyA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgTWFwKCk7CiAgY29uc3QgbW9kdWxlUmVxdWlyaW5nVGFza3MgPSAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpOwogIGNvbnN0IHBhcnNlTW9kdWxlTmFtZSA9IGZ1bmN0aW9uKG1vZHVsZU5hbWUyKSB7CiAgICBjb25zdCBbLCBuYW1lLCB2ZXJzaW9uLCBmaWxlXSA9IG1vZHVsZU5hbWUyLm1hdGNoKC8oXkA/W14vQF0rKSg/OkAoW14vXSspKT8oLiopLykgfHwgW107CiAgICByZXR1cm4gW25hbWUsIHZlcnNpb24sIGZpbGVdOwogIH07CiAgY29uc3QgcmVzb2x2ZSA9IChtb2R1bGVOYW1lMiwgX19maWxlcGF0aCkgPT4gewogICAgaWYgKFsicmVxdWlyZSIsICJtb2R1bGUiLCAiZXhwb3J0cyJdLmluY2x1ZGVzKG1vZHVsZU5hbWUyKSkgewogICAgICByZXR1cm4gbW9kdWxlTmFtZTI7CiAgICB9CiAgICBpZiAocGF0aEJyb3dzZXJpZnkuaXNBYnNvbHV0ZShtb2R1bGVOYW1lMikpIHsKICAgICAgcmV0dXJuIG1vZHVsZU5hbWUyOwogICAgfQogICAgaWYgKG1vZHVsZU5hbWUyLnN0YXJ0c1dpdGgoIi4iKSkgewogICAgICBpZiAoIV9fZmlsZXBhdGgpIHsKICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFthbWRdIGNhbid0IG5vdCByZXNvbHZlIHJlbGF0aXZlIHBhdGggJHttb2R1bGVOYW1lMn0gd2l0aG91dCBfX2Rpcm5hbWVgKTsKICAgICAgfQogICAgICByZXR1cm4gcGF0aEJyb3dzZXJpZnkucmVzb2x2ZShwYXRoQnJvd3NlcmlmeS5kaXJuYW1lKF9fZmlsZXBhdGgpLCBtb2R1bGVOYW1lMik7CiAgICB9CiAgICBpZiAobW9kdWxlTmFtZTIuc3RhcnRzV2l0aCgiLyIpKSB7CiAgICAgIHJldHVybiBwYXRoQnJvd3NlcmlmeS5yZXNvbHZlKGN0eC5yb290LCBtb2R1bGVOYW1lMik7CiAgICB9CiAgICBjb25zdCBbbW9kdWxlUGF0aDJdID0gcGFyc2VNb2R1bGVOYW1lKG1vZHVsZU5hbWUyKTsKICAgIHJldHVybiBwYXRoQnJvd3NlcmlmeS5yZXNvbHZlKGN0eC5yb290LCAibm9kZV9tb2R1bGVzIiwgbW9kdWxlUGF0aDIpOwogIH07CiAgY29uc3QgcmVzb2x2ZURlcHMgPSBhc3luYyAoX3BhY2thZ2VOYW1lLCBfdmVyc2lvbiwgX2ZpbGUpID0+IHsKICAgIGNvbnN0IHBhcmFtcyA9IHsKICAgICAgcGFja2FnZU5hbWU6IF9wYWNrYWdlTmFtZSwKICAgICAgdmVyc2lvbjogX3ZlcnNpb24sCiAgICAgIGZpbGU6IF9maWxlCiAgICB9OwogICAgY29uc3QgcmVzID0gYXdhaXQgY3R4LnBsdWdpblJlZHVjZSgKICAgICAgYXN5bmMgKHByZVZhbHVlLCBwbHVnaW4pID0+IHsKICAgICAgICBjb25zdCByZXMyID0gYXdhaXQgcGx1Z2luLnJlc29sdmVNb2R1bGVVcmwocHJlVmFsdWUpOwogICAgICAgIGlmICh0eXBlb2YgcmVzMiA9PT0gInN0cmluZyIpIHsKICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgIHJlc3VsdDogcmVzMiwKICAgICAgICAgICAgYnJlYWs6IHRydWUKICAgICAgICAgIH07CiAgICAgICAgfQogICAgICAgIHJldHVybiB7IHJlc3VsdDogcmVzMiB9OwogICAgICB9LAogICAgICBwYXJhbXMKICAgICk7CiAgICByZXR1cm4gcmVzOwogIH07CiAgY29uc3QgbW9kdWxlRmFjdG9yeSA9IGFzeW5jIChtb2R1bGVOYW1lLCBfdGhpcykgPT4gewogICAgY29uc3QgbW9kdWxlUGF0aCA9IHJlc29sdmUobW9kdWxlTmFtZSwgX3RoaXMuX19kaXJuYW1lKTsKICAgIGlmIChtb2R1bGVSZXF1aXJpbmdUYXNrcy5oYXMobW9kdWxlUGF0aCkpIHsKICAgICAgcmV0dXJuIGF3YWl0IG5ldyBQcm9taXNlKChyZXNvbHZlMjIsIHJlamVjdCkgPT4gewogICAgICAgIGNvbnN0IHRhc2tzID0gbW9kdWxlUmVxdWlyaW5nVGFza3MuZ2V0KG1vZHVsZVBhdGgpOwogICAgICAgIHRhc2tzLnB1c2goW3Jlc29sdmUyMiwgcmVqZWN0XSk7CiAgICAgICAgY3R4LmxvZ2dlci5sb2coYFthbWRdIHJlcXVpcmUgJHttb2R1bGVOYW1lfSwgYWxyZWFkeSBoYXMgdGFzayByZXF1aXJpbmcsIHdhaXRpbmcgdGFza3M6ICR7dGFza3MubGVuZ3RofS5gKTsKICAgICAgfSk7CiAgICB9CiAgICBjdHgubG9nZ2VyLmxvZygiW2FtZF0gc3RhcnQgcmVxdWlyZSIsIG1vZHVsZVBhdGgpOwogICAgbW9kdWxlUmVxdWlyaW5nVGFza3Muc2V0KG1vZHVsZVBhdGgsIFtdKTsKICAgIGNvbnN0IGNsZWFyQWxsVGFza3MgPSAoZXJyLCBtb2R1bGVfMikgPT4gewogICAgICBjb25zdCB0YXNrcyA9IG1vZHVsZVJlcXVpcmluZ1Rhc2tzLmdldChtb2R1bGVQYXRoKTsKICAgICAgaWYgKHRhc2tzID09IG51bGwgPyB2b2lkIDAgOiB0YXNrcy5sZW5ndGgpIHsKICAgICAgICB0YXNrcy5mb3JFYWNoKChbcmVzb2x2ZTIyLCByZWplY3RdLCBpbmRleCkgPT4gewogICAgICAgICAgY3R4LmxvZ2dlci5sb2coIlthbWRdIHJlc29sdmUgaXRlbSIsIGluZGV4LCBtb2R1bGVOYW1lKTsKICAgICAgICAgIGlmIChlcnIpIHsKICAgICAgICAgICAgcmVqZWN0KGVycik7CiAgICAgICAgICB9CiAgICAgICAgICByZXNvbHZlMjIobW9kdWxlXzIpOwogICAgICAgIH0pOwogICAgICB9CiAgICAgIG1vZHVsZVJlcXVpcmluZ1Rhc2tzLmRlbGV0ZShtb2R1bGVQYXRoKTsKICAgICAgaWYgKGVycikgewogICAgICAgIHRocm93IGVycjsKICAgICAgfQogICAgICByZXR1cm4gbW9kdWxlXzI7CiAgICB9OwogICAgaWYgKGNhY2hlLmhhcyhtb2R1bGVQYXRoKSkgewogICAgICBjdHgubG9nZ2VyLmxvZyhgW2FtZF0gcmVxdWlyZSAke21vZHVsZU5hbWV9LCByZXNvbHZlZCBmcm9tIGNhY2hlYCk7CiAgICAgIHJldHVybiBjbGVhckFsbFRhc2tzKHZvaWQgMCwgY2FjaGUuZ2V0KG1vZHVsZVBhdGgpKTsKICAgIH0KICAgIGxldCBmYWN0b3J5ID0gZmFjdG9yaWVzLmdldChtb2R1bGVQYXRoKTsKICAgIGlmICghZmFjdG9yeSkgewogICAgICBpZiAoIW1vZHVsZU5hbWUuc3RhcnRzV2l0aCgiLiIpICYmICFwYXRoQnJvd3NlcmlmeS5pc0Fic29sdXRlKG1vZHVsZU5hbWUpKSB7CiAgICAgICAgY29uc3QgW25hbWUsIHZlcnNpb24sIGZpbGVdID0gcGFyc2VNb2R1bGVOYW1lKG1vZHVsZU5hbWUpOwogICAgICAgIGNvbnN0IHNjcmlwdFVybCA9IGF3YWl0IHJlc29sdmVEZXBzKG5hbWUsIHZlcnNpb24sIGZpbGUpOwogICAgICAgIGN0eC5ldmVudFN1YnNjcmliZU1hbmFnZXIudHJpZ2dlcihJRXZlbnRUeXBlcy5Mb2FkaW5nU2NyaXB0LCBtb2R1bGVOYW1lLCBzY3JpcHRVcmwpOwogICAgICAgIGlmICh0eXBlb2Ygc2NyaXB0VXJsID09PSAic3RyaW5nIikgewogICAgICAgICAgYXdhaXQgY3R4LnNjcmlwdExvYWRlci5sb2FkU2NyaXB0KGRvY3VtZW50LmJvZHksIHNjcmlwdFVybCwgbW9kdWxlTmFtZSk7CiAgICAgICAgICBmYWN0b3J5ID0gZmFjdG9yaWVzLmdldChtb2R1bGVQYXRoKTsKICAgICAgICAgIGN0eC5sb2dnZXIubG9nKCJbYW1kXSBzY3JpcHQgbG9hZGVkIiwgZmFjdG9yeSwgbW9kdWxlUGF0aCk7CiAgICAgICAgfQogICAgICB9IGVsc2UgewogICAgICAgIGNvbnN0IFtleGlzdCwgZmlsZV0gPSBjdHguZnMucGF0aFJlZHVjZShtb2R1bGVQYXRoKTsKICAgICAgICBpZiAoZXhpc3QgJiYgUmVmbGVjdC5oYXMoZmlsZSwgImNvbnRlbnQiKSkgewogICAgICAgICAgY29uc3QgY29udGVudCA9IGZpbGUuY29udGVudDsKICAgICAgICAgIGZhY3Rvcmllcy5zZXQobW9kdWxlUGF0aCwgY29udGVudCk7CiAgICAgICAgICBmYWN0b3J5ID0gY29udGVudDsKICAgICAgICB9CiAgICAgIH0KICAgICAgaWYgKCFmYWN0b3J5KSB7CiAgICAgICAgY29uc3QgZXJyID0gbmV3IEVycm9yKGBbYW1kXSBtb2R1bGUgZXJyb3I6ICR7bW9kdWxlUGF0aH0gZG9lcyBub3QgZXhpc3QuYCk7CiAgICAgICAgcmV0dXJuIGNsZWFyQWxsVGFza3MoZXJyKTsKICAgICAgfQogICAgfQogICAgY29uc3QgbW9kdWxlRGVwcyA9IFtdOwogICAgY29uc3QgcmVxdWlyZUN0eCA9IHsgX19kaXJuYW1lOiBtb2R1bGVQYXRoLCBkZXBzOiBtb2R1bGVEZXBzIH07CiAgICBjb25zdCByZXF1aXJlXyA9IGdldFJlcXVpcmVGdW5jKHJlcXVpcmVDdHgpOwogICAgbGV0IGRlcE1vZHVsZU5hbWVzID0gZGVwZW5kZW5jaWVzLmdldChtb2R1bGVQYXRoKTsKICAgIGlmICh0eXBlb2YgZmFjdG9yeSA9PT0gInN0cmluZyIpIHsKICAgICAgY29uc3QgeyBkZXBzOiBfZGVwTW9kdWxlTmFtZXMsIGZhY3Rvcnk6IGZhY3RvcnlfIH0gPSBhd2FpdCBjdHgucGx1Z2luUmVkdWNlKGFzeW5jIChwcmVWYWx1ZSwgcGx1Z2luKSA9PiB7CiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgcGx1Z2luLmJlZm9yZU1vZHVsZUdlbmVyYXRlKF90aGlzLCBwcmVWYWx1ZSk7CiAgICAgICAgcmV0dXJuIHsgcmVzdWx0OiB7IC4uLnJlc3VsdCwgbmFtZTogbW9kdWxlTmFtZSB9IH07CiAgICAgIH0sIHsgbmFtZTogbW9kdWxlTmFtZSwgZGVwczogZGVwTW9kdWxlTmFtZXMsIGZhY3RvcnkgfSk7CiAgICAgIGZhY3RvcnkgPSBmYWN0b3J5XzsKICAgICAgZGVwTW9kdWxlTmFtZXMgPSBfZGVwTW9kdWxlTmFtZXM7CiAgICB9CiAgICBjb25zdCBfZXhwb3J0cyA9IHt9OwogICAgY29uc3QgY29tbW9uanMgPSB7CiAgICAgIHJlcXVpcmU6IHJlcXVpcmVfLAogICAgICBtb2R1bGU6IHsgZXhwb3J0czogX2V4cG9ydHMgfSwKICAgICAgZXhwb3J0czogX2V4cG9ydHMKICAgIH07CiAgICBsZXQgZGVwcyA9IFtdOwogICAgaWYgKGRlcE1vZHVsZU5hbWVzID09IG51bGwgPyB2b2lkIDAgOiBkZXBNb2R1bGVOYW1lcy5sZW5ndGgpIHsKICAgICAgZGVwcyA9IGF3YWl0IFByb21pc2UuYWxsKGRlcE1vZHVsZU5hbWVzLm1hcCgoZGVwTmFtZSkgPT4gewogICAgICAgIGlmIChjb21tb25qc1tkZXBOYW1lXSkKICAgICAgICAgIHJldHVybiBjb21tb25qc1tkZXBOYW1lXTsKICAgICAgICByZXR1cm4gcmVxdWlyZV8oZGVwTmFtZSk7CiAgICAgIH0pKTsKICAgIH0KICAgIHRyeSB7CiAgICAgIGxldCBleHBvcnRzUmV0dXJuOwogICAgICBpZiAodHlwZW9mIGZhY3RvcnkgPT09ICJzdHJpbmciKSB7CiAgICAgICAgZXhwb3J0c1JldHVybiA9IGF3YWl0IGV2YWwoZmFjdG9yeSkoLi4uZGVwcyk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgZXhwb3J0c1JldHVybiA9IGF3YWl0IGZhY3RvcnkoLi4uZGVwcyk7CiAgICAgIH0KICAgICAgY3R4LmV2ZW50U3Vic2NyaWJlTWFuYWdlci50cmlnZ2VyKElFdmVudFR5cGVzLk1vZHVsZURlcHMsIHJlcXVpcmVDdHgpOwogICAgICBjb25zdCBtb2R1bGVfID0gKCgpID0+IHsKICAgICAgICBpZiAoT2JqZWN0LmtleXMoY29tbW9uanMubW9kdWxlLmV4cG9ydHMpLmxlbmd0aCB8fCB0eXBlb2YgY29tbW9uanMubW9kdWxlLmV4cG9ydHMgIT09ICJvYmplY3QiKSB7CiAgICAgICAgICByZXR1cm4gY29tbW9uanMubW9kdWxlLmV4cG9ydHM7CiAgICAgICAgfQogICAgICAgIHJldHVybiBleHBvcnRzUmV0dXJuOwogICAgICB9KSgpOwogICAgICBjYWNoZS5zZXQobW9kdWxlUGF0aCwgbW9kdWxlXyk7CiAgICAgIGN0eC5sb2dnZXIubG9nKCJbYW1kXSByZXNvbHZlIG1vZHVsZSB0YXNrcyBoZWFkIiwgbW9kdWxlUGF0aCwgbW9kdWxlXyk7CiAgICAgIHJldHVybiBjbGVhckFsbFRhc2tzKHZvaWQgMCwgbW9kdWxlXyk7CiAgICB9IGNhdGNoIChlcnIpIHsKICAgICAgcmV0dXJuIGNsZWFyQWxsVGFza3MoZXJyLCB2b2lkIDApOwogICAgfQogIH07CiAgY29uc3QgZ2V0UmVxdWlyZUZ1bmMgPSAoX3RoaXMyKSA9PiB7CiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihhc3luYyAoLi4uYXJncykgPT4gewogICAgICB2YXIgX2EsIF9iOwogICAgICBjb25zdCBbbW9kdWxlTmFtZXNfLCBjYl0gPSBhcmdzOwogICAgICBjb25zdCBtb2R1bGVOYW1lcyA9IGF3YWl0IGN0eC5wbHVnaW5SZWR1Y2UoYXN5bmMgKHByZVZhbHVlLCBwbHVnaW4pID0+IHsKICAgICAgICByZXR1cm4gewogICAgICAgICAgcmVzdWx0OiBhd2FpdCBwbHVnaW4ucmVxdWlyZShfdGhpczIsIHByZVZhbHVlKQogICAgICAgIH07CiAgICAgIH0sIG1vZHVsZU5hbWVzXyk7CiAgICAgIGlmICh0eXBlb2YgbW9kdWxlTmFtZXMgPT09ICJzdHJpbmciKSB7CiAgICAgICAgKF9hID0gX3RoaXMyLmRlcHMpID09IG51bGwgPyB2b2lkIDAgOiBfYS5wdXNoKHJlc29sdmUobW9kdWxlTmFtZXMsIF90aGlzMi5fX2Rpcm5hbWUpKTsKICAgICAgfSBlbHNlIHsKICAgICAgICAoX2IgPSBfdGhpczIuZGVwcykgPT0gbnVsbCA/IHZvaWQgMCA6IF9iLnB1c2goLi4ubW9kdWxlTmFtZXMucmVkdWNlKChwcmV2aW91c1ZhbHVlLCBjdXJyZW50VmFsdWUpID0+IHsKICAgICAgICAgIHByZXZpb3VzVmFsdWUucHVzaChyZXNvbHZlKGN1cnJlbnRWYWx1ZSwgX3RoaXMyLl9fZGlybmFtZSkpOwogICAgICAgICAgcmV0dXJuIHByZXZpb3VzVmFsdWU7CiAgICAgICAgfSwgW10pKTsKICAgICAgfQogICAgICBsZXQgbW9kdWxlczsKICAgICAgaWYgKEFycmF5LmlzQXJyYXkobW9kdWxlTmFtZXMpKSB7CiAgICAgICAgbW9kdWxlcyA9IGF3YWl0IFByb21pc2UuYWxsKG1vZHVsZU5hbWVzLm1hcCgobmFtZSkgPT4gbW9kdWxlRmFjdG9yeShuYW1lLCBfdGhpczIpKSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgbW9kdWxlcyA9IGF3YWl0IG1vZHVsZUZhY3RvcnkobW9kdWxlTmFtZXMsIF90aGlzMik7CiAgICAgIH0KICAgICAgY2IgPT0gbnVsbCA/IHZvaWQgMCA6IGNiKG1vZHVsZXMpOwogICAgICByZXR1cm4gbW9kdWxlczsKICAgIH0sIHsKICAgICAgY2FjaGUsCiAgICAgIGZhY3RvcmllcywKICAgICAgcmVzb2x2ZSwKICAgICAgZGVwZW5kZW5jaWVzLAogICAgICBtb2R1bGVSZXF1aXJpbmdUYXNrcywKICAgICAgcmVzb2x2ZURlcHMKICAgIH0pOwogIH07CiAgY3R4LnJlcXVpcmUgPSBnZXRSZXF1aXJlRnVuYyh7IF9fZGlybmFtZTogY3R4LnJvb3QgfSk7Cn0KY29uc3QgY3JlYXRlRXZlbnRTdWJzY3JpYmVNYW5hZ2VyID0gKCkgPT4gewogIGNvbnN0IGV2ZW50c0hhbmRsZXJzTWFwID0gLyogQF9fUFVSRV9fICovIG5ldyBNYXAoKTsKICBjb25zdCB0cmlnZ2VyID0gKGtleSwgLi4ucGFyYW1zKSA9PiB7CiAgICBjb25zdCBoYW5kbGVycyA9IGV2ZW50c0hhbmRsZXJzTWFwLmdldChrZXkpOwogICAgaWYgKGhhbmRsZXJzKSB7CiAgICAgIGNvbnN0IGRyb3BzID0gLyogQF9fUFVSRV9fICovIG5ldyBNYXAoKTsKICAgICAgaGFuZGxlcnMuZm9yRWFjaCgoaGFuZGxlciwgaW5kZXgpID0+IHsKICAgICAgICBpZiAoaGFuZGxlci5maWx0ZXIgJiYgIWhhbmRsZXIuZmlsdGVyKC4uLnBhcmFtcykpIHsKICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICAgICAgaGFuZGxlciguLi5wYXJhbXMpOwogICAgICAgIGlmIChoYW5kbGVyLm9uY2UpIHsKICAgICAgICAgIGRyb3BzLnNldChpbmRleCwgdHJ1ZSk7CiAgICAgICAgfQogICAgICB9KTsKICAgICAgZXZlbnRzSGFuZGxlcnNNYXAuc2V0KGtleSwgaGFuZGxlcnMuZmlsdGVyKChfLCBpbmRleCkgPT4gIWRyb3BzLmdldChpbmRleCkpKTsKICAgIH0KICB9OwogIGNvbnN0IGxpc3RlbiA9IChrZXksIGNiLCBmaWx0ZXIpID0+IHsKICAgIHZhciBfYSwgX2I7CiAgICBpZiAoIWV2ZW50c0hhbmRsZXJzTWFwLmhhcyhrZXkpKSB7CiAgICAgIGV2ZW50c0hhbmRsZXJzTWFwLnNldChrZXksIFtdKTsKICAgIH0KICAgIChfYiA9IChfYSA9IGV2ZW50c0hhbmRsZXJzTWFwLmdldChrZXkpKSA9PSBudWxsID8gdm9pZCAwIDogX2EucHVzaCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9iLmNhbGwoX2EsIE9iamVjdC5hc3NpZ24oY2IsIHsKICAgICAgZmlsdGVyCiAgICB9KSk7CiAgICByZXR1cm4gKCkgPT4gewogICAgICB2YXIgX2EyOwogICAgICAoX2EyID0gZXZlbnRzSGFuZGxlcnNNYXAuZ2V0KGtleSkpID09IG51bGwgPyB2b2lkIDAgOiBfYTIuZmlsdGVyKChoYW5kbGVyKSA9PiBoYW5kbGVyICE9PSBjYik7CiAgICB9OwogIH07CiAgY29uc3Qgb25jZSA9IChrZXksIGNiLCBmaWx0ZXIsIG9uVGltZW91dCwgdGltZW91dCA9IC0xKSA9PiB7CiAgICB2YXIgX2EsIF9iOwogICAgaWYgKCFldmVudHNIYW5kbGVyc01hcC5oYXMoa2V5KSkgewogICAgICBldmVudHNIYW5kbGVyc01hcC5zZXQoa2V5LCBbXSk7CiAgICB9CiAgICBjb25zdCBkaXNwb3NlID0gKCkgPT4gewogICAgICB2YXIgX2EyOwogICAgICAoX2EyID0gZXZlbnRzSGFuZGxlcnNNYXAuZ2V0KGtleSkpID09IG51bGwgPyB2b2lkIDAgOiBfYTIuZmlsdGVyKChoYW5kbGVyKSA9PiBoYW5kbGVyICE9PSBjYik7CiAgICB9OwogICAgbGV0IF90aW1lb3V0OwogICAgaWYgKHRpbWVvdXQgIT09IC0xKSB7CiAgICAgIF90aW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB7CiAgICAgICAgZGlzcG9zZSgpOwogICAgICAgIG9uVGltZW91dCA9PSBudWxsID8gdm9pZCAwIDogb25UaW1lb3V0KCk7CiAgICAgIH0sIHRpbWVvdXQpOwogICAgfQogICAgKF9iID0gKF9hID0gZXZlbnRzSGFuZGxlcnNNYXAuZ2V0KGtleSkpID09IG51bGwgPyB2b2lkIDAgOiBfYS5wdXNoKSA9PSBudWxsID8gdm9pZCAwIDogX2IuY2FsbChfYSwgT2JqZWN0LmFzc2lnbigoLi4uYXJncykgPT4gewogICAgICBpZiAoX3RpbWVvdXQpCiAgICAgICAgY2xlYXJUaW1lb3V0KF90aW1lb3V0KTsKICAgICAgY2IoLi4uYXJncyk7CiAgICB9LCB7CiAgICAgIG9uY2U6IHRydWUsCiAgICAgIGZpbHRlcgogICAgfSkpOwogICAgcmV0dXJuIGRpc3Bvc2U7CiAgfTsKICByZXR1cm4geyB0cmlnZ2VyLCBsaXN0ZW4sIG9uY2UgfTsKfTsKZnVuY3Rpb24gY3JlYXRlQW1kTWFuYWdlcihmczIsIHJvb3QgPSAiLyIsIHNjcmlwdFRpbWVvdXQgPSAxZTQsIGxvZ2dlcjIgPSBjb25zb2xlKSB7CiAgY29uc3QgY3R4MiA9IHt9OwogIGN0eDIuZXZlbnRTdWJzY3JpYmVNYW5hZ2VyID0gY3JlYXRlRXZlbnRTdWJzY3JpYmVNYW5hZ2VyKCk7CiAgY3R4Mi5mcyA9IGZzMjsKICBjdHgyLnJvb3QgPSByb290OwogIGN0eDIuc2NyaXB0VGltZW91dCA9IHNjcmlwdFRpbWVvdXQ7CiAgY3R4Mi5sb2dnZXIgPSBsb2dnZXIyOwogIGN0eDIucGx1Z2lucyA9IFtdOwogIGN0eDIucGx1Z2luUmVkdWNlID0gYXN5bmMgKHJlZHVjZXIsIGluaXRWYWx1ZSkgPT4gewogICAgbGV0IHJlc3VsdCA9IGluaXRWYWx1ZTsKICAgIGZvciAoY29uc3QgcGx1Z2luIG9mIGN0eDIucGx1Z2lucykgewogICAgICBjb25zdCB7IHJlc3VsdDogcmVzLCBicmVhazogYnJlYWtfIH0gPSBhd2FpdCByZWR1Y2VyKHJlc3VsdCwgcGx1Z2luKTsKICAgICAgaWYgKGJyZWFrXykgewogICAgICAgIHJldHVybiByZXM7CiAgICAgIH0KICAgICAgcmVzdWx0ID0gcmVzOwogICAgfQogICAgcmV0dXJuIHJlc3VsdDsKICB9OwogIGJpbmRSZXF1aXJlVG9DdHgoY3R4Mik7CiAgYmluZERlZmluZVRvQ3R4KGN0eDIpOwogIGJpbmRTY3JpcHRMb2FkZXJUb0N0eChjdHgyKTsKICBmdW5jdGlvbiBpbXBvcnRHbG9iYWxPYmplY3RTY3JpcHQodGFyZ2V0LCB1cmwsIG5hbWUpIHsKICAgIHJldHVybiBhc3luYyAoX3JlcXVpcmUpID0+IHsKICAgICAgYXdhaXQgY3R4Mi5zY3JpcHRMb2FkZXIubG9hZFNjcmlwdCh0YXJnZXQsIHVybCk7CiAgICAgIHJldHVybiB7CiAgICAgICAgImRlZmF1bHQiOiBSZWZsZWN0LmdldCh3aW5kb3csIG5hbWUpLAogICAgICAgIC4uLlJlZmxlY3QuZ2V0KHdpbmRvdywgbmFtZSkKICAgICAgfTsKICAgIH07CiAgfQogIGNvbnN0IG1vZHVsZV8yID0gewogICAgcmVxdWlyZV86IGN0eDIucmVxdWlyZSwKICAgIGRlZmluZTogY3R4Mi5kZWZpbmUsCiAgICBfaW1wb3J0OiBpbXBvcnRHbG9iYWxPYmplY3RTY3JpcHQuYmluZChudWxsLCBkb2N1bWVudC5ib2R5KSwKICAgIG9uTW9kdWxlVXBkYXRlKHRhcmdldHMsIGNiKSB7CiAgICAgIHJldHVybiBjdHgyLmV2ZW50U3Vic2NyaWJlTWFuYWdlci5saXN0ZW4oSUV2ZW50VHlwZXMuTW9kdWxlVXBkYXRlLCAobW9kdWxlTmFtZTIpID0+IHsKICAgICAgICBpZiAoIXRhcmdldHMgfHwgdGFyZ2V0cy5pbmNsdWRlcyhtb2R1bGVOYW1lMikpIHsKICAgICAgICAgIGNiKFttb2R1bGVOYW1lMl0pOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9LAogICAgb25Nb2R1bGVMb2FkaW5nKGNiKSB7CiAgICAgIHJldHVybiBjdHgyLmV2ZW50U3Vic2NyaWJlTWFuYWdlci5saXN0ZW4oSUV2ZW50VHlwZXMuTG9hZGluZ1NjcmlwdCwgKG1vZHVsZU5hbWUyLCB1cmwpID0+IHsKICAgICAgICBjYihtb2R1bGVOYW1lMiwgdXJsKTsKICAgICAgfSk7CiAgICB9LAogICAgb25Nb2R1bGVEZXBzKGNiKSB7CiAgICAgIHJldHVybiBjdHgyLmV2ZW50U3Vic2NyaWJlTWFuYWdlci5saXN0ZW4oSUV2ZW50VHlwZXMuTW9kdWxlRGVwcywgKF90aGlzMikgPT4gewogICAgICAgIGlmICghX3RoaXMyLmRlcHMpIHsKICAgICAgICAgIGRlYnVnZ2VyOwogICAgICAgIH0KICAgICAgICBjYihfdGhpczIuZGVwcyB8fCBbXSwgX3RoaXMyLl9fZGlybmFtZSk7CiAgICAgIH0pOwogICAgfSwKICAgIG1vdW50VG9HbG9iYWwoZ2xvYmFsXyA9IHdpbmRvdykgewogICAgICBjb25zdCBjdXJyZW50RGVmaW5lID0gUmVmbGVjdC5nZXQoZ2xvYmFsXywgImRlZmluZSIpOwogICAgICBjb25zdCBjdXJyZW50UmVxdWlyZSA9IFJlZmxlY3QuZ2V0KGdsb2JhbF8sICJyZXF1aXJlIik7CiAgICAgIFJlZmxlY3Quc2V0KGdsb2JhbF8sICJkZWZpbmUiLCBjdHgyLmRlZmluZSk7CiAgICAgIFJlZmxlY3Quc2V0KGdsb2JhbF8sICJyZXF1aXJlIiwgY3R4Mi5yZXF1aXJlKTsKICAgICAgcmV0dXJuICgpID0+IHsKICAgICAgICBSZWZsZWN0LnNldChnbG9iYWxfLCAiZGVmaW5lIiwgY3VycmVudERlZmluZSk7CiAgICAgICAgUmVmbGVjdC5zZXQoZ2xvYmFsXywgInJlcXVpcmUiLCBjdXJyZW50UmVxdWlyZSk7CiAgICAgIH07CiAgICB9LAogICAgc2V0UGx1Z2lucyhwbHVnaW5zKSB7CiAgICAgIGN0eDIucGx1Z2lucyA9IHBsdWdpbnM7CiAgICB9CiAgfTsKICByZXR1cm4gbW9kdWxlXzI7Cn0KdmFyIEZpbGVzQ2hhbmdlVHlwZSA9IC8qIEBfX1BVUkVfXyAqLyAoKEZpbGVzQ2hhbmdlVHlwZTIpID0+IHsKICBGaWxlc0NoYW5nZVR5cGUyWyJEZWxldGUiXSA9ICJkZWxldGUiOwogIEZpbGVzQ2hhbmdlVHlwZTJbIkNoYW5nZSJdID0gImNoYW5nZSI7CiAgRmlsZXNDaGFuZ2VUeXBlMlsiTmV3Il0gPSAibmV3IjsKICByZXR1cm4gRmlsZXNDaGFuZ2VUeXBlMjsKfSkoRmlsZXNDaGFuZ2VUeXBlIHx8IHt9KTsKY29uc3QgZ2V0UGF0aEZpbGVOYW1lID0gKHBhdGhPYmplY3QpID0+IGAke3BhdGhPYmplY3QubmFtZX0ke3BhdGhPYmplY3QuZXh0fWA7CmNvbnN0IHRyYXZlcnNlID0gKGRpciA9ICIiLCBkaXJlY3RvcnksIGNiKSA9PiB7CiAgZGlyZWN0b3J5LmNoaWxkcmVuLmZvckVhY2goKGl0ZW0pID0+IHsKICAgIGlmIChSZWZsZWN0LmhhcyhpdGVtLCAiY2hpbGRyZW4iKSkgewogICAgICB0cmF2ZXJzZShgJHtwYXRoQnJvd3NlcmlmeX0vJHtpdGVtLm5hbWV9YCwgaXRlbSwgY2IpOwogICAgICByZXR1cm47CiAgICB9CiAgICBjYihgJHtwYXRoQnJvd3NlcmlmeX0vJHtpdGVtLm5hbWV9YCwgaXRlbSk7CiAgfSk7Cn07CmNsYXNzIEZpbGVzU3lzdGVtIHsKICBjb25zdHJ1Y3RvcigpIHsKICAgIHRoaXMucm9vdCA9IHsKICAgICAgbmFtZTogIiIsCiAgICAgIGNoaWxkcmVuOiB0aGlzLmdldFByb3h5TWFwKCIiLCBbXSkKICAgIH07CiAgICB0aGlzLmV2ZW50Q291bnQgPSAwOwogICAgdGhpcy5ldmVudCA9IGNyZWF0ZUV2ZW50U3Vic2NyaWJlTWFuYWdlcigpOwogICAgdGhpcy5jcCA9IHRoaXMuY3BPck12LmJpbmQodGhpcywgZmFsc2UpOwogICAgdGhpcy5tdiA9IHRoaXMuY3BPck12LmJpbmQodGhpcywgdHJ1ZSk7CiAgfQogIGdldFByb3h5TWFwKHBhdGgyLCBlbnRyaWVzKSB7CiAgICBjb25zdCBfdGhpczIgPSB0aGlzOwogICAgY29uc3QgbWFwID0gbmV3IE1hcChlbnRyaWVzKTsKICAgIGNvbnN0IHByb3h5TWV0aG9kID0gKG1ldGhvZE5hbWUsIGV2ZW50TmFtZSkgPT4gewogICAgICBjb25zdCBfbWV0aG9kID0gUmVmbGVjdC5nZXQobWFwLCBtZXRob2ROYW1lKTsKICAgICAgaWYgKHR5cGVvZiBfbWV0aG9kID09PSAiZnVuY3Rpb24iKSB7CiAgICAgICAgY29uc3QgbWV0aG9kID0gZnVuY3Rpb24oLi4uYXJncykgewogICAgICAgICAgX3RoaXMyLmV2ZW50LnRyaWdnZXIoZXZlbnROYW1lLCBfdGhpczIuZXZlbnRDb3VudCsrLCBwYXRoMiwgLi4uYXJncyk7CiAgICAgICAgICByZXR1cm4gX21ldGhvZC5jYWxsKG1hcCwgLi4uYXJncyk7CiAgICAgICAgfTsKICAgICAgICBSZWZsZWN0LnNldChtYXAsIG1ldGhvZE5hbWUsIG1ldGhvZCk7CiAgICAgIH0KICAgIH07CiAgICBwcm94eU1ldGhvZCgic2V0IiwgImRpci1zZXQiKTsKICAgIHByb3h5TWV0aG9kKCJkZWxldGUiLCAiZGlyLWRlbGV0ZSIpOwogICAgcHJveHlNZXRob2QoImNsZWFyIiwgImRpci1jbGVhciIpOwogICAgcmV0dXJuIG1hcDsKICB9CiAgcGF0aFJlZHVjZSh0YXJnZXQpIHsKICAgIGNvbnN0IHBhdGhzID0gdGFyZ2V0LnNwbGl0KHBhdGhCcm93c2VyaWZ5LnNlcCk7CiAgICByZXR1cm4gcGF0aHMucmVkdWNlKChbc3RhdHVzLCBkaXJdLCBjdXIsIGluZGV4LCBhcnIpID0+IHsKICAgICAgdmFyIF9hLCBfYjsKICAgICAgaWYgKGluZGV4ID09PSAwKSB7CiAgICAgICAgcmV0dXJuIFtzdGF0dXMsIGRpcl07CiAgICAgIH0KICAgICAgaWYgKGluZGV4ID09PSBhcnIubGVuZ3RoIC0gMSAmJiBjdXIgPT09ICIiKSB7CiAgICAgICAgcmV0dXJuIFtzdGF0dXMsIGRpcl07CiAgICAgIH0KICAgICAgcmV0dXJuIFtzdGF0dXMgJiYgKChfYSA9IGRpci5jaGlsZHJlbikgPT0gbnVsbCA/IHZvaWQgMCA6IF9hLmhhcyhjdXIpKSwgKF9iID0gZGlyLmNoaWxkcmVuKSA9PSBudWxsID8gdm9pZCAwIDogX2IuZ2V0KGN1cildOwogICAgfSwgW3RydWUsIHRoaXMucm9vdF0pOwogIH0KICBleGlzdCh0YXJnZXQpIHsKICAgIGNvbnN0IFtleGlzdF0gPSB0aGlzLnBhdGhSZWR1Y2UodGFyZ2V0KTsKICAgIHJldHVybiBleGlzdDsKICB9CiAgbWtkaXIodGFyZ2V0KSB7CiAgICBjb25zdCBwYXRoT2JqZWN0ID0gcGF0aEJyb3dzZXJpZnkucGFyc2UodGFyZ2V0KTsKICAgIGlmICh0aGlzLmV4aXN0KHRhcmdldCkpIHsKICAgICAgdGhyb3cgbmV3IEVycm9yKGBbZnNdIGZhaWxlZCB0byBta2RpciAke3RhcmdldH0sIGl0IGlzIGFscmVhZHkgZXhpc3RlZC5gKTsKICAgIH0KICAgIGNvbnN0IFtwYXJlbnRFeGlzdCwgcGFyZW50XSA9IHRoaXMucGF0aFJlZHVjZShwYXRoT2JqZWN0LmRpcik7CiAgICBpZiAoIXBhcmVudEV4aXN0KSB7CiAgICAgIHRocm93IG5ldyBFcnJvcihgW2ZzXSBmYWlsZWQgdG8gbWtkaXIgJHt0YXJnZXR9LCBwYXJlbnQgcGF0aCAke3BhdGhPYmplY3QuZGlyfSBpcyBub3QgZXhpc3RlZC5gKTsKICAgIH0KICAgIGlmICghUmVmbGVjdC5oYXMocGFyZW50LCAiY2hpbGRyZW4iKSB8fCBSZWZsZWN0LmhhcyhwYXJlbnQsICJjb250ZW50IikpIHsKICAgICAgdGhyb3cgbmV3IEVycm9yKGBbZnNdIGZhaWxlZCB0byBta2RpciAke3RhcmdldH0sIHBhcmVudCBwYXRoICR7cGF0aE9iamVjdC5kaXJ9IGlzIG5vdCBhIGRpcmVjdG9yeS5gKTsKICAgIH0KICAgIHBhcmVudC5jaGlsZHJlbi5zZXQoZ2V0UGF0aEZpbGVOYW1lKHBhdGhPYmplY3QpLCB7CiAgICAgIG5hbWU6IGdldFBhdGhGaWxlTmFtZShwYXRoT2JqZWN0KSwKICAgICAgY2hpbGRyZW46IHRoaXMuZ2V0UHJveHlNYXAocGF0aEJyb3dzZXJpZnkuZm9ybWF0KHBhdGhPYmplY3QpLCBbXSkKICAgIH0pOwogIH0KICByZWFkRGlyZWN0b3J5KHRhcmdldCkgewogICAgY29uc3QgcGF0aE9iamVjdCA9IHBhdGhCcm93c2VyaWZ5LnBhcnNlKHRhcmdldCk7CiAgICBjb25zdCBbcGFyZW50RXhpc3QsIHBhcmVudF0gPSB0aGlzLnBhdGhSZWR1Y2UocGF0aE9iamVjdC5kaXIpOwogICAgaWYgKCFwYXJlbnRFeGlzdCkgewogICAgICB0aHJvdyBuZXcgRXJyb3IoYFtmc10gZmFpbGVkIHRvIHJlYWQgZGlyZWN0b3J5ICR7dGFyZ2V0fSwgcGFyZW50IHBhdGggJHtwYXRoT2JqZWN0LmRpcn0gaXMgbm90IGV4aXN0ZWQuYCk7CiAgICB9CiAgICByZXR1cm4gcGFyZW50LmNoaWxkcmVuLmdldChnZXRQYXRoRmlsZU5hbWUocGF0aE9iamVjdCkpOwogIH0KICByZWFkRmlsZSh0YXJnZXQpIHsKICAgIGNvbnN0IFtleGlzdCwgZmlsZV0gPSB0aGlzLnBhdGhSZWR1Y2UodGFyZ2V0KTsKICAgIGlmICghZXhpc3QpIHsKICAgICAgdGhyb3cgbmV3IEVycm9yKGBbZnNdIGZhaWxlZCB0byByZWFkIGZpbGUgJHt0YXJnZXR9LCBpdCBpcyBub3QgZXhpc3RlZC5gKTsKICAgIH0KICAgIGlmIChSZWZsZWN0LmhhcyhmaWxlLCAiY2hpbGRyZW4iKSkgewogICAgICB0aHJvdyBuZXcgRXJyb3IoYFtmc10gZmFpbGVkIHRvIHJlYWQgZmlsZSAke3RhcmdldH0sIGl0IGlzIGEgZGlyZWN0b3J5LmApOwogICAgfQogICAgcmV0dXJuIGZpbGU7CiAgfQogIHdyaXRlRmlsZSh0YXJnZXQsIGNvbnRlbnRzKSB7CiAgICBjb25zdCBwYXRoT2JqZWN0ID0gcGF0aEJyb3dzZXJpZnkucGFyc2UodGFyZ2V0KTsKICAgIGNvbnN0IFtwYXJlbnRFeGlzdCwgcGFyZW50XSA9IHRoaXMucGF0aFJlZHVjZShwYXRoT2JqZWN0LmRpcik7CiAgICBpZiAoIXBhcmVudEV4aXN0KSB7CiAgICAgIHRocm93IG5ldyBFcnJvcihgW2ZzXSBmYWlsZWQgdG8gd3JpdGUgZmlsZSAke3RhcmdldH0sIHBhcmVudCBwYXRoICR7cGF0aE9iamVjdC5kaXJ9IGlzIG5vdCBleGlzdGVkLmApOwogICAgfQogICAgbGV0IHdyaXRlQ29udGVudCA9IGNvbnRlbnRzOwogICAgaWYgKHR5cGVvZiBjb250ZW50cyAhPT0gInN0cmluZyIpIHsKICAgICAgd3JpdGVDb250ZW50ID0gYnRvYShTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIG5ldyBVaW50OEFycmF5KGNvbnRlbnRzKSkpOwogICAgfQogICAgY29uc3QgZXhpc3RCZWZvcmUgPSBwYXJlbnQuY2hpbGRyZW4uaGFzKGdldFBhdGhGaWxlTmFtZShwYXRoT2JqZWN0KSk7CiAgICBwYXJlbnQuY2hpbGRyZW4uc2V0KGdldFBhdGhGaWxlTmFtZShwYXRoT2JqZWN0KSwgewogICAgICBuYW1lOiBnZXRQYXRoRmlsZU5hbWUocGF0aE9iamVjdCksCiAgICAgIGNvbnRlbnQ6IHdyaXRlQ29udGVudAogICAgfSk7CiAgICB0aGlzLmV2ZW50LnRyaWdnZXIoImZpbGVzLWNoYW5nZSIsIHRoaXMuZXZlbnRDb3VudCsrLCBleGlzdEJlZm9yZSA/ICJjaGFuZ2UiIDogIm5ldyIsIFt0YXJnZXRdKTsKICB9CiAgY3BPck12KGlzTXYgPSBmYWxzZSwgc291cmNlLCB0YXJnZXQpIHsKICAgIGNvbnN0IHNvdXJjZVBhdGhPYmplY3QgPSBwYXRoQnJvd3NlcmlmeS5wYXJzZShzb3VyY2UpOwogICAgY29uc3QgdGFyZ2V0UGF0aE9iamVjdCA9IHBhdGhCcm93c2VyaWZ5LnBhcnNlKHRhcmdldCk7CiAgICBjb25zdCBbc291cmNlUGFyZW50RXhpc3QsIHNvdXJjZVBhcmVudF0gPSB0aGlzLnBhdGhSZWR1Y2Uoc291cmNlUGF0aE9iamVjdC5kaXIpOwogICAgY29uc3QgW3RhcmdldFBhcmVudEV4aXN0LCB0YXJnZXRQYXJlbnRdID0gdGhpcy5wYXRoUmVkdWNlKHRhcmdldFBhdGhPYmplY3QuZGlyKTsKICAgIGlmICghc291cmNlUGFyZW50RXhpc3QgfHwgIXRhcmdldFBhcmVudEV4aXN0KSB7CiAgICAgIHRocm93IG5ldyBFcnJvcihgW2ZzXSBmYWlsZWQgdG8gJHtpc012ID8gIm12IiA6ICJjcCJ9ICR7c291cmNlfSB0byAke3RhcmdldH0sIHNvdXJjZSBvciB0YXJnZXQgcGF0aCBpcyBub3QgZXhpc3RlZC5gKTsKICAgIH0KICAgIGlmICh0YXJnZXRQYXJlbnQuY2hpbGRyZW4uaGFzKGdldFBhdGhGaWxlTmFtZSh0YXJnZXRQYXRoT2JqZWN0KSkpIHsKICAgICAgdGhyb3cgbmV3IEVycm9yKGBbZnNdIGZhaWxlZCB0byAke2lzTXYgPyAibXYiIDogImNwIn0gJHtzb3VyY2V9IHRvICR7dGFyZ2V0fSwgdGFyZ2V0IHBhdGggaXMgYWxyZWFkeSBleGlzdGVkLmApOwogICAgfQogICAgdGFyZ2V0UGFyZW50LmNoaWxkcmVuLnNldChnZXRQYXRoRmlsZU5hbWUodGFyZ2V0UGF0aE9iamVjdCksIHNvdXJjZVBhcmVudC5jaGlsZHJlbi5nZXQoZ2V0UGF0aEZpbGVOYW1lKHNvdXJjZVBhdGhPYmplY3QpKSk7CiAgICBjb25zdCBzb3VyY2VGaWxlT3JEaXJlY3RvcnkgPSBzb3VyY2VQYXJlbnQuY2hpbGRyZW4uZ2V0KHNvdXJjZSk7CiAgICBjb25zdCBkZWxldGVkRmlsZXMgPSBbXTsKICAgIGNvbnN0IG5ld0ZpbGVzID0gW107CiAgICBpZiAoUmVmbGVjdC5oYXMoc291cmNlRmlsZU9yRGlyZWN0b3J5LCAiY29udGVudCIpKSB7CiAgICAgIGRlbGV0ZWRGaWxlcy5wdXNoKHNvdXJjZSk7CiAgICAgIG5ld0ZpbGVzLnB1c2godGFyZ2V0KTsKICAgIH0gZWxzZSB7CiAgICAgIHRyYXZlcnNlKHZvaWQgMCwgc291cmNlRmlsZU9yRGlyZWN0b3J5LCAocGF0aF8pID0+IHsKICAgICAgICBkZWxldGVkRmlsZXMucHVzaChwYXRoQnJvd3NlcmlmeS5qb2luKHNvdXJjZVBhdGhPYmplY3QuZGlyLCBwYXRoXykpOwogICAgICAgIG5ld0ZpbGVzLnB1c2gocGF0aEJyb3dzZXJpZnkuam9pbih0YXJnZXRQYXRoT2JqZWN0LmRpciwgcGF0aF8pKTsKICAgICAgfSk7CiAgICB9CiAgICBpZiAoaXNNdikgewogICAgICBzb3VyY2VQYXJlbnQuY2hpbGRyZW4uZGVsZXRlKGdldFBhdGhGaWxlTmFtZShzb3VyY2VQYXRoT2JqZWN0KSk7CiAgICAgIHRoaXMuZXZlbnQudHJpZ2dlcigiZmlsZXMtY2hhbmdlIiwgdGhpcy5ldmVudENvdW50KyssICJkZWxldGUiLCBkZWxldGVkRmlsZXMpOwogICAgfQogICAgdGhpcy5ldmVudC50cmlnZ2VyKCJmaWxlcy1jaGFuZ2UiLCB0aGlzLmV2ZW50Q291bnQrKywgIm5ldyIsIG5ld0ZpbGVzKTsKICB9CiAgcm0odGFyZ2V0KSB7CiAgICBjb25zdCBwYXRoT2JqZWN0ID0gcGF0aEJyb3dzZXJpZnkucGFyc2UodGFyZ2V0KTsKICAgIGNvbnN0IFtwYXJlbnRFeGlzdCwgcGFyZW50XSA9IHRoaXMucGF0aFJlZHVjZShwYXRoT2JqZWN0LmRpcik7CiAgICBpZiAoIXBhcmVudEV4aXN0IHx8ICFwYXJlbnQuY2hpbGRyZW4uaGFzKGdldFBhdGhGaWxlTmFtZShwYXRoT2JqZWN0KSkpIHsKICAgICAgdGhyb3cgbmV3IEVycm9yKGBbZnNdIGZhaWxlZCB0byBybSAke3RhcmdldH0sIGl0IGlzIG5vdCBleGlzdGVkLmApOwogICAgfQogICAgY29uc3QgdGFyZ2V0RmlsZU9yRGlyZWN0b3J5ID0gcGFyZW50LmNoaWxkcmVuLmdldCh0YXJnZXQpOwogICAgY29uc3QgZGVsZXRlZEZpbGVzID0gW107CiAgICBpZiAoUmVmbGVjdC5oYXModGFyZ2V0RmlsZU9yRGlyZWN0b3J5LCAiY29udGVudCIpKSB7CiAgICAgIGRlbGV0ZWRGaWxlcy5wdXNoKHRhcmdldCk7CiAgICB9IGVsc2UgewogICAgICB0cmF2ZXJzZSh2b2lkIDAsIHRhcmdldEZpbGVPckRpcmVjdG9yeSwgKHBhdGhfKSA9PiB7CiAgICAgICAgZGVsZXRlZEZpbGVzLnB1c2gocGF0aEJyb3dzZXJpZnkuam9pbihwYXRoT2JqZWN0LmRpciwgcGF0aF8pKTsKICAgICAgfSk7CiAgICB9CiAgICBwYXJlbnQuY2hpbGRyZW4uZGVsZXRlKGdldFBhdGhGaWxlTmFtZShwYXRoT2JqZWN0KSk7CiAgICB0aGlzLmV2ZW50LnRyaWdnZXIoImZpbGVzLWNoYW5nZSIsIHRoaXMuZXZlbnRDb3VudCsrLCAiZGVsZXRlIiwgZGVsZXRlZEZpbGVzKTsKICB9CiAgLyoqCiAgICog5bqP5YiX5YyW5YaF6YOo5a2Y5YKo55qE5omA5pyJ5pWw5o2uCiAgICovCiAgZ2V0RGF0YVBheWxvYWQoKSB7CiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkodGhpcy5yb290LCAoa2V5LCB2YWx1ZSkgPT4gewogICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBNYXApIHsKICAgICAgICByZXR1cm4gewogICAgICAgICAgX19kYXRhVHlwZTogIk1hcCIsCiAgICAgICAgICBlbnRyaWVzOiBBcnJheS5mcm9tKHZhbHVlLmVudHJpZXMoKSkKICAgICAgICB9OwogICAgICB9CiAgICAgIHJldHVybiB2YWx1ZTsKICAgIH0pOwogIH0KICAvKioKICAgKiDop6blj5HlsIbmlofku7blr7nosaHlrZjlgqjnmoTmlbDmja7kvKDovpPliLDov5znq6/nmoTkuovku7YKICAgKi8KICB0cmFuc2ZlcigpIHsKICAgIGNvbnN0IHBheWxvYWQgPSB0aGlzLmdldERhdGFQYXlsb2FkKCk7CiAgICB0aGlzLmV2ZW50LnRyaWdnZXIoInRyYW5zZmVyIiwgdGhpcy5ldmVudENvdW50KyssICIiLCBwYXlsb2FkKTsKICB9CiAgLyoqCiAgICog5o6l5pS25aSW6YOo6K6+572u55qE5pWw5o2uCiAgICogQHBhcmFtIHBheWxvYWQg5bqV5bGC5pWw5o2uCiAgICovCiAgcmVjZWl2ZShwYXlsb2FkKSB7CiAgICBjb25zdCB0cmF2ZXJzZTIgPSAob2JqLCBwYXRoMiA9ICIiKSA9PiB7CiAgICAgIGlmIChvYmouY2hpbGRyZW4gJiYgUmVmbGVjdC5nZXQob2JqLmNoaWxkcmVuLCAiX19kYXRhVHlwZSIpID09PSAiTWFwIikgewogICAgICAgIGNvbnN0IGVudHJpZXMgPSBvYmouY2hpbGRyZW4uZW50cmllcy5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IFtrZXksIHRyYXZlcnNlMih2YWx1ZSwgW3BhdGgyLCBrZXldLmpvaW4oIi8iKSldKTsKICAgICAgICByZXR1cm4gewogICAgICAgICAgLi4ub2JqLAogICAgICAgICAgY2hpbGRyZW46IHRoaXMuZ2V0UHJveHlNYXAocGF0aDIsIGVudHJpZXMpCiAgICAgICAgfTsKICAgICAgfQogICAgICByZXR1cm4gb2JqOwogICAgfTsKICAgIHRoaXMucm9vdCA9IHRyYXZlcnNlMihKU09OLnBhcnNlKHBheWxvYWQpKTsKICB9Cn0KY29uc3QgTk9USUZJQ0FUSU9OX1NFUlZJQ0UgPSAiaWZyYW1lLW5vdGlmaWNhdGlvbi1zZXJ2aWNlIjsKY29uc3QgaWZyYW1lUmVhZHkgPSBhc3luYyAoKSA9PiB7CiAgcmVnaXN0ZXJQcm94eShOT1RJRklDQVRJT05fU0VSVklDRSwgewogICAgaWZyYW1lUmVhZHk6IGFzeW5jICgpID0+IHsKICAgICAgcmV0dXJuIHRydWU7CiAgICB9CiAgfSk7CiAgY29uc3QgcGFyZW50ID0gd2luZG93LnRvcCB8fCB3aW5kb3cucGFyZW50IHx8IHdpbmRvdy5vcGVuZXI7CiAgaWYgKCFwYXJlbnQpCiAgICByZXR1cm47CiAgcmV0dXJuIGNhbGxQcm94eSh7CiAgICB3aW46IHBhcmVudCwKICAgIHNlcnZpY2VJZDogTk9USUZJQ0FUSU9OX1NFUlZJQ0UsCiAgICBtZXRob2Q6ICJpZnJhbWVSZWFkeSIsCiAgICBwYXlsb2FkOiBbXQogIH0pOwp9Owpjb25zdCBpZnJhbWVMb2FkaW5nTW9kdWxlID0gYXN5bmMgKG1vZHVsZU5hbWUyLCBleHRyYUluZm8pID0+IHsKICBjb25zdCBwYXJlbnQgPSB3aW5kb3cudG9wIHx8IHdpbmRvdy5wYXJlbnQgfHwgd2luZG93Lm9wZW5lcjsKICBpZiAoIXBhcmVudCkKICAgIHJldHVybjsKICByZXR1cm4gY2FsbFByb3h5KHsKICAgIHdpbjogcGFyZW50LAogICAgc2VydmljZUlkOiBOT1RJRklDQVRJT05fU0VSVklDRSwKICAgIG1ldGhvZDogImlmcmFtZUxvYWRpbmdNb2R1bGUiLAogICAgcGF5bG9hZDogW21vZHVsZU5hbWUyLCBleHRyYUluZm9dCiAgfSk7Cn07CmNvbnN0IFN5bmNTZXJ2aWNlTmFtZSA9ICJjb2RlLXNhbmRib3gtc3luYy1maWxlcyI7CmFzeW5jIGZ1bmN0aW9uIGluaXRJZnJhbWVGaWxlc1N5bmNTZXJ2aWNlKGZzMikgewogIGNvbnN0IGNhY2hlUXVldWUgPSAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpOwogIGxldCBjdXJyZW50Q291bnQgPSAwOwogIHJlZ2lzdGVyUHJveHkoU3luY1NlcnZpY2VOYW1lLCB7CiAgICBzeW5jOiBhc3luYyAoZXZlbnRUeXBlLCBvcmRlckNvdW50LCBwYXRoLCAuLi5hcmdzKSA9PiB7CiAgICAgIGNhY2hlUXVldWUuc2V0KG9yZGVyQ291bnQsIFtldmVudFR5cGUsIHBhdGgsIC4uLmFyZ3NdKTsKICAgICAgd2hpbGUgKGNhY2hlUXVldWUuZ2V0KGN1cnJlbnRDb3VudCkpIHsKICAgICAgICBjb25zdCBbZXZlbnRUeXBlMiwgcGF0aDIsIC4uLmFyZ3MyXSA9IGNhY2hlUXVldWUuZ2V0KGN1cnJlbnRDb3VudCk7CiAgICAgICAgY2FjaGVRdWV1ZS5kZWxldGUoY3VycmVudENvdW50KTsKICAgICAgICBjdXJyZW50Q291bnQrKzsKICAgICAgICBjb25zdCBbLCBkaXJfXSA9IGZzMi5wYXRoUmVkdWNlKHBhdGgyKTsKICAgICAgICBjb25zdCBkaXIgPSBkaXJfOwogICAgICAgIHN3aXRjaCAoZXZlbnRUeXBlMikgewogICAgICAgICAgY2FzZSAidHJhbnNmZXIiOiB7CiAgICAgICAgICAgIGZzMi5yZWNlaXZlLmFwcGx5KGZzMiwgYXJnczIpOwogICAgICAgICAgICBicmVhazsKICAgICAgICAgIH0KICAgICAgICAgIGNhc2UgImRpci1jbGVhciI6IHsKICAgICAgICAgICAgZGlyLmNoaWxkcmVuLmNsZWFyKCk7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgfQogICAgICAgICAgY2FzZSAiZGlyLXNldCI6IHsKICAgICAgICAgICAgZGlyLmNoaWxkcmVuLnNldC5hcHBseShkaXIuY2hpbGRyZW4sIGFyZ3MyKTsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICB9CiAgICAgICAgICBjYXNlICJkaXItZGVsZXRlIjogewogICAgICAgICAgICBkaXIuY2hpbGRyZW4uZGVsZXRlLmFwcGx5KGRpci5jaGlsZHJlbiwgYXJnczIpOwogICAgICAgICAgICBicmVhazsKICAgICAgICAgIH0KICAgICAgICAgIGNhc2UgImZpbGVzLWNoYW5nZSI6IHsKICAgICAgICAgICAgZnMyLmV2ZW50LnRyaWdnZXIoZXZlbnRUeXBlMiwgcGF0aDIsIC4uLmFyZ3MyKTsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgfSk7CiAgY29uc3QgcGF5bG9hZCA9IGF3YWl0IGNhbGxQcm94eSh7CiAgICB3aW46IHNlbGYucGFyZW50IHx8IHNlbGYub3BlbmVyIHx8IHNlbGYudG9wLAogICAgbWV0aG9kOiAicmVxdWVzdEZzIiwKICAgIHNlcnZpY2VJZDogU3luY1NlcnZpY2VOYW1lLAogICAgcGF5bG9hZDogW10KICB9KTsKICBpZiAocGF5bG9hZCkgewogICAgY29uc29sZS5sb2coInJlY2VpdmUgcGF5bG9hZCIsIHBheWxvYWQpOwogICAgZnMyLnJlY2VpdmUocGF5bG9hZCk7CiAgICByZXR1cm47CiAgfQogIGNvbnNvbGUubG9nKCJub3QgcmVjZWl2ZSBwYXlsb2FkIiwgcGF5bG9hZCk7Cn0KY29uc3QgRGVtb1NlcnZpY2VOYW1lID0gImRlbW8tc2VydmljZSI7CmZ1bmN0aW9uIGdlbmVyYXRlUGx1Z2lucyhwbHVnaW5zU2VydmljZUlkKSB7CiAgY29uc3QgcGFyZW50ID0gd2luZG93LnBhcmVudCB8fCB3aW5kb3cudG9wIHx8IHdpbmRvdy5vcGVuZXI7CiAgY29uc3QgZ2VuZXJhdGVNZXRob2QgPSAoa2V5LCBzZXJ2aWNlSWQpID0+IGFzeW5jICguLi5hcmdzKSA9PiB7CiAgICBhd2FpdCB3YWl0UHJveHkocGFyZW50LCBzZXJ2aWNlSWQpOwogICAgcmV0dXJuIGF3YWl0IGNhbGxQcm94eSh7CiAgICAgIHdpbjogcGFyZW50LAogICAgICBzZXJ2aWNlSWQsCiAgICAgIG1ldGhvZDoga2V5LAogICAgICBwYXlsb2FkOiBhcmdzCiAgICB9KTsKICB9OwogIHJldHVybiBwbHVnaW5zU2VydmljZUlkLm1hcCgoc2VydmljZUlkKSA9PiB7CiAgICBjb25zdCBrZXlzID0gWyJyZXF1aXJlIiwgImJlZm9yZU1vZHVsZUdlbmVyYXRlIiwgInJlc29sdmVNb2R1bGVVcmwiXTsKICAgIHJldHVybiBrZXlzLnJlZHVjZSgocHJlLCBrZXkpID0+IHsKICAgICAgcmV0dXJuIHsKICAgICAgICAuLi5wcmUsCiAgICAgICAgW2tleV06IGdlbmVyYXRlTWV0aG9kKGtleSwgc2VydmljZUlkKQogICAgICB9OwogICAgfSwge30pOwogIH0pOwp9CmNsYXNzIERlcHNHcmFwaCB7CiAgY29uc3RydWN0b3IoKSB7CiAgICB0aGlzLkRlcE5vZGVJbmRleGVzID0gLyogQF9fUFVSRV9fICovIG5ldyBNYXAoKTsKICB9CiAgZ2V0RGVwTm9kZShfdGFyZ2V0LCBjcmVhdGUgPSBmYWxzZSkgewogICAgY29uc3QgdGFyZ2V0ID0gX3RhcmdldC5yZXBsYWNlKC9cLyQvLCAiIik7CiAgICBpZiAoIXRoaXMuRGVwTm9kZUluZGV4ZXMuaGFzKHRhcmdldCkgJiYgY3JlYXRlKSB7CiAgICAgIHRoaXMuRGVwTm9kZUluZGV4ZXMuc2V0KHRhcmdldCwgewogICAgICAgIHBhdGg6IHRhcmdldCwKICAgICAgICBjb21lOiAvKiBAX19QVVJFX18gKi8gbmV3IFNldCgpLAogICAgICAgIG91dDogLyogQF9fUFVSRV9fICovIG5ldyBTZXQoKQogICAgICB9KTsKICAgIH0KICAgIHJldHVybiB0aGlzLkRlcE5vZGVJbmRleGVzLmdldCh0YXJnZXQpOwogIH0KICAvKioKICAgKiDmm7TmlrAgZnJvbSAtPiB0byDnmoTot6/lvoQKICAgKiBAcGFyYW0gZnJvbSDotbfngrkgbm9kZSDmlbDnu4QKICAgKiBAcGFyYW0gdG8g57uI54K5IG5vZGUKICAgKi8KICB1cGRhdGVQYXRocyhmcm9tLCB0bykgewogICAgY29uc3QgdGFyZ2V0Tm9kZSA9IHRoaXMuZ2V0RGVwTm9kZSh0bywgdHJ1ZSk7CiAgICBpZiAodGFyZ2V0Tm9kZS5jb21lLnNpemUpIHsKICAgICAgdGFyZ2V0Tm9kZS5jb21lLmZvckVhY2goKGRlcE5vZGUpID0+IHsKICAgICAgICBkZXBOb2RlLm91dC5kZWxldGUodGFyZ2V0Tm9kZSk7CiAgICAgIH0pOwogICAgICB0YXJnZXROb2RlLmNvbWUuY2xlYXIoKTsKICAgIH0KICAgIGZyb20uZm9yRWFjaCgobm9kZVBhdGgpID0+IHsKICAgICAgY29uc3QgZGVwTm9kZSA9IHRoaXMuZ2V0RGVwTm9kZShub2RlUGF0aCwgdHJ1ZSk7CiAgICAgIHRhcmdldE5vZGUuY29tZS5hZGQoZGVwTm9kZSk7CiAgICAgIGRlcE5vZGUub3V0LmFkZCh0YXJnZXROb2RlKTsKICAgIH0pOwogIH0KICAvKioKICAgKiDliKDpmaQgZnJvbSAtPiB0byDnmoTot6/lvoQKICAgKiBAcGFyYW0gZnJvbSDotbfngrkgbm9kZSDmlbDnu4QKICAgKiBAcGFyYW0gdG8g57uI54K5IG5vZGUKICAgKi8KICBkZWxldGVQYXRocyhmcm9tLCB0bykgewogICAgY29uc3QgdGFyZ2V0Tm9kZSA9IHRoaXMuZ2V0RGVwTm9kZSh0byk7CiAgICBpZiAoIXRhcmdldE5vZGUpCiAgICAgIHJldHVybiBmYWxzZTsKICAgIGZyb20uZm9yRWFjaCgoc291cmNlUGF0aCkgPT4gewogICAgICBjb25zdCBzb3VyY2VOb2RlID0gdGhpcy5nZXREZXBOb2RlKHNvdXJjZVBhdGgpOwogICAgICBpZiAoIXNvdXJjZU5vZGUpCiAgICAgICAgcmV0dXJuOwogICAgICBzb3VyY2VOb2RlLm91dC5kZWxldGUodGFyZ2V0Tm9kZSk7CiAgICAgIHRhcmdldE5vZGUuY29tZS5kZWxldGUoc291cmNlTm9kZSk7CiAgICAgIHRoaXMuZGVsZXRlTm9kZShzb3VyY2VOb2RlLnBhdGgpOwogICAgfSk7CiAgfQogIC8qKgogICAqIOWIoOmZpOaMh+WumueahOS+nei1luiKgueCuQogICAqIEBwYXJhbSBzb3VyY2UKICAgKi8KICBkZWxldGVOb2RlKHNvdXJjZSkgewogICAgY29uc3Qgc291cmNlTm9kZSA9IHRoaXMuZ2V0RGVwTm9kZShzb3VyY2UpOwogICAgaWYgKCFzb3VyY2VOb2RlKQogICAgICByZXR1cm4gZmFsc2U7CiAgICB0aGlzLkRlcE5vZGVJbmRleGVzLmRlbGV0ZShzb3VyY2UpOwogICAgaWYgKHNvdXJjZU5vZGUuY29tZS5zaXplKSB7CiAgICAgIHNvdXJjZU5vZGUuY29tZS5mb3JFYWNoKChjb21lTm9kZSkgPT4gewogICAgICAgIGNvbWVOb2RlLm91dC5kZWxldGUoc291cmNlTm9kZSk7CiAgICAgICAgaWYgKCFjb21lTm9kZS5vdXQuc2l6ZSkgewogICAgICAgICAgdGhpcy5kZWxldGVOb2RlKGNvbWVOb2RlLnBhdGgpOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9CiAgICByZXR1cm4gdHJ1ZTsKICB9CiAgLyoqCiAgICog6YGN5Y6G5omA5pyJ55u05o6l5oiW6ICF6Ze05o6l5L6d6LWWIHNvdXJjZSDnmoToioLngrkKICAgKiBAcGFyYW0gc291cmNlIOimgemBjeWOhueahOiKgueCuQogICAqIEBwYXJhbSBjYiDlr7nmr4/kuKroioLngrnnmoTlpITnkIYKICAgKiBAcGFyYW0gdHJhY2tlZCDnlKjkuo7lrZjlgqjpgY3ljobov4fnmoToioLngrkKICAgKiBAcGFyYW0gd2FpdCDnlKjkuo7lrZjlgqjpnIDopoHpgY3ljobnmoToioLngrkKICAgKiBAcGFyYW0gb3JkZXIg5piv5ZCm5oyJ54Wn6aG65bqP5byA5aeL6YGN5Y6GCiAgICovCiAgdHJhdmVyc2Uoc291cmNlLCBjYiwgdHJhY2tlZCA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgU2V0KCksIHdhaXQgPSAvKiBAX19QVVJFX18gKi8gbmV3IFNldCgpLCBvcmRlciA9IHRydWUpIHsKICAgIGNvbnN0IGlzQWxsRGVwc1RyYWNrZWQgPSAobm9kZSkgPT4gQXJyYXkuZnJvbShub2RlLmNvbWUpLmV2ZXJ5KChkZXApID0+ICF3YWl0LmhhcyhkZXAucGF0aCkgfHwgdHJhY2tlZC5oYXMoZGVwLnBhdGgpKTsKICAgIGNvbnN0IHRyYXZlcnNlMiA9IChub2RlLCBvcmRlcjIgPSBmYWxzZSwgY2JfKSA9PiB7CiAgICAgIGlmICghb3JkZXIyKSB7CiAgICAgICAgd2FpdC5hZGQobm9kZS5wYXRoKTsKICAgICAgfSBlbHNlIHsKICAgICAgICBpZiAoIWlzQWxsRGVwc1RyYWNrZWQobm9kZSkpCiAgICAgICAgICByZXR1cm47CiAgICAgICAgdHJhY2tlZC5hZGQobm9kZS5wYXRoKTsKICAgICAgICBjYl8gPT0gbnVsbCA/IHZvaWQgMCA6IGNiXyhub2RlLCB0cmFja2VkLnNpemUsIHdhaXQuc2l6ZSk7CiAgICAgIH0KICAgICAgbm9kZS5vdXQuZm9yRWFjaCgoY2hpbGQpID0+IHsKICAgICAgICBpZiAoIW9yZGVyMiB8fCBpc0FsbERlcHNUcmFja2VkKGNoaWxkKSkgewogICAgICAgICAgdHJhdmVyc2UyKGNoaWxkLCBvcmRlcjIsIGNiXyk7CiAgICAgICAgfQogICAgICB9KTsKICAgIH07CiAgICBjb25zdCBzb3VyY2VOb2RlID0gdGhpcy5nZXREZXBOb2RlKHNvdXJjZSk7CiAgICBpZiAoIXNvdXJjZU5vZGUpCiAgICAgIHJldHVybjsKICAgIHRyYXZlcnNlMihzb3VyY2VOb2RlLCBmYWxzZSwgY2IpOwogICAgaWYgKG9yZGVyKSB7CiAgICAgIHRyYXZlcnNlMihzb3VyY2VOb2RlLCB0cnVlLCBjYik7CiAgICB9CiAgfQogIC8qKgogICAqIOaJuemHj+mBjeWOhuebtOaOpeaIluiAhemXtOaOpSBzb3VyY2VzIOiKgueCueeahOaJgOacieiKgueCuQogICAqIEBwYXJhbSBzb3VyY2VzIOiiq+S+nei1lueahOiKgueCueaVsOe7hAogICAqIEBwYXJhbSBjYiDlr7nmr4/kuKroioLngrnnmoTlpITnkIYKICAgKi8KICBiYXRjaFRyYXZlcnNlKHNvdXJjZXMsIGNiKSB7CiAgICBjb25zdCB0cmFja2VkID0gLyogQF9fUFVSRV9fICovIG5ldyBTZXQoKTsKICAgIGNvbnN0IHdhaXQgPSAvKiBAX19QVVJFX18gKi8gbmV3IFNldCgpOwogICAgc291cmNlcy5mb3JFYWNoKChzb3VyY2UpID0+IHsKICAgICAgdGhpcy50cmF2ZXJzZShzb3VyY2UsIGNiLCB0cmFja2VkLCB3YWl0LCBmYWxzZSk7CiAgICB9KTsKICAgIHNvdXJjZXMuZm9yRWFjaCgoc291cmNlKSA9PiB7CiAgICAgIHRoaXMudHJhdmVyc2Uoc291cmNlLCBjYiwgdHJhY2tlZCwgd2FpdCwgdHJ1ZSk7CiAgICB9KTsKICAgIHJldHVybiBBcnJheS5mcm9tKHRyYWNrZWQpOwogIH0KfQpjb25zdCBmcyA9IG5ldyBGaWxlc1N5c3RlbSgpOwppbml0SWZyYW1lRmlsZXNTeW5jU2VydmljZShmcyk7CmNvbnN0IGRlcHNHcmFwaCA9IG5ldyBEZXBzR3JhcGgoKTsKY29uc3QgbWFuYWdlciA9IGNyZWF0ZUFtZE1hbmFnZXIoZnMsIHZvaWQgMCwgdm9pZCAwLCBsb2dnZXIpOwptYW5hZ2VyLm1vdW50VG9HbG9iYWwoKTsKY29uc3Qgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJzdHlsZSIpOwpkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKHN0eWxlKTsKbWFuYWdlci5vbk1vZHVsZUxvYWRpbmcoaWZyYW1lTG9hZGluZ01vZHVsZSk7Cm1hbmFnZXIub25Nb2R1bGVEZXBzKGRlcHNHcmFwaC51cGRhdGVQYXRocy5iaW5kKGRlcHNHcmFwaCkpOwpmcy5ldmVudC5saXN0ZW4oImZpbGVzLWNoYW5nZSIsIGFzeW5jICh0eXBlLCBmaWxlcykgPT4gewogIGlmICh0eXBlID09PSBGaWxlc0NoYW5nZVR5cGUuQ2hhbmdlKSB7CiAgICBkZXBzR3JhcGguYmF0Y2hUcmF2ZXJzZShmaWxlcywgKG5vZGUpID0+IHsKICAgICAgbWFuYWdlci5yZXF1aXJlXy5mYWN0b3JpZXMuZGVsZXRlKG5vZGUucGF0aCk7CiAgICAgIG1hbmFnZXIucmVxdWlyZV8uY2FjaGUuZGVsZXRlKG5vZGUucGF0aCk7CiAgICAgIGlmIChub2RlLm91dC5zaXplKSB7CiAgICAgICAgbWFuYWdlci5yZXF1aXJlXyhub2RlLnBhdGgpOwogICAgICB9CiAgICB9KTsKICB9Cn0pOwpyZWdpc3RlclByb3h5KERlbW9TZXJ2aWNlTmFtZSwgewogIHJ1bjogYXN5bmMgKGpzRW50cnksIGh0bWxFbnRyeSwgc3R5bGVzRW50cnkpID0+IHsKICAgIGlmIChodG1sRW50cnkpIHsKICAgICAgY29uc3QgW2h0bWxFeGlzdCwgaHRtbF0gPSBmcy5wYXRoUmVkdWNlKGh0bWxFbnRyeSk7CiAgICAgIGlmICghaHRtbEV4aXN0KQogICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgZG9jdW1lbnQuYm9keS5pbm5lckhUTUwgPSBodG1sLmNvbnRlbnQ7CiAgICB9CiAgICBpZiAoc3R5bGVzRW50cnkpIHsKICAgICAgY29uc3QgW3N0eWxlc0V4aXN0LCBzdHlsZXNdID0gZnMucGF0aFJlZHVjZShzdHlsZXNFbnRyeSk7CiAgICAgIGlmICghc3R5bGVzRXhpc3QpCiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICBzdHlsZS5pbm5lckhUTUwgPSBzdHlsZXMuY29udGVudDsKICAgIH0KICAgIGNvbnN0IFtqc0V4aXN0XSA9IGZzLnBhdGhSZWR1Y2UoanNFbnRyeSk7CiAgICBpZiAoIWpzRXhpc3QpCiAgICAgIHJldHVybiBmYWxzZTsKICAgIGF3YWl0IG1hbmFnZXIucmVxdWlyZV8oanNFbnRyeSk7CiAgICByZXR1cm4gdHJ1ZTsKICB9LAogIHNldFBsdWdpbnM6IGFzeW5jIChwbHVnaW5JZHMpID0+IHsKICAgIGNvbnN0IHBsdWdpbnMgPSBnZW5lcmF0ZVBsdWdpbnMocGx1Z2luSWRzKTsKICAgIG1hbmFnZXIuc2V0UGx1Z2lucyhwbHVnaW5zKTsKICB9Cn0pOwp3aW5kb3cub25lcnJvciA9IChlcnIpID0+IHsKICBjb25zb2xlLmVycm9yKGVycik7Cn07CmlmcmFtZVJlYWR5KCk7Ci8vIyBzb3VyY2VNYXBwaW5nVVJMPWlmcmFtZS5qcy5tYXAK\"","export default \".code-sandbox-iframe {\\n    border-width: 0;\\n    width: 100%;\\n    height: 100%;\\n}\\n\"","import iframeScriptUrl from '@/iframe/iframe?url';\nimport iframeStyles_ from './iframe.css?raw';\n\nexport const getIframeHTML = () => {\n    const srcDoc =\n`<html lang=\"en\">\n    <head>\n        <title>Demo Sandbox</title>\n        <script type=\"module\" src=\"${iframeScriptUrl}\"></script>\n    </head>\n    <body></body>\n</html>`;\n    return [srcDoc];\n};\n\nexport const iframeStyles: string = iframeStyles_;\n","import {waitIframeReady} from \"../utils/iframe\";\nimport {callProxy, waitProxy} from \"../core/proxy\";\nimport {DemoServiceName, IDemoService} from \"../type\";\nimport {FilesSystem} from '../core/files-system';\n\nexport interface IOptions {\n    fs?: FilesSystem;\n    iframe: HTMLIFrameElement | null;\n}\n\nexport const JSEntry = '/index.js';\nexport const StylesEntry = '/styles.css';\nexport const HTMLEntry = '/index.html';\n\nexport const getSandboxRefresher = (opt: IOptions) => {\n    const iframe = opt.iframe;\n\n    return async () => {\n        if (!iframe) return;\n        // 等待 demo iframe 提供的服务准备好\n        await waitIframeReady(iframe);\n        await waitProxy(iframe.contentWindow, DemoServiceName);\n        // 调用 iframe 提供的服务\n        await callProxy<IDemoService, 'run'>({\n            win: iframe.contentWindow,\n            serviceId: DemoServiceName,\n            method: 'run',\n            payload: [JSEntry, HTMLEntry, StylesEntry]\n        });\n    };\n};\n\nexport { getIframeHTML, iframeStyles } from './html';\n\nexport const setSandboxPlugins = async (iframe: HTMLIFrameElement | null, pluginsId: string[]) => {\n    await waitIframeReady(iframe);\n    await waitProxy(iframe.contentWindow, DemoServiceName);\n    return await callProxy<IDemoService>({\n        win: iframe.contentWindow,\n        serviceId: DemoServiceName,\n        method: 'setPlugins',\n        payload: [pluginsId]\n    });\n};\n","export const DefaultDemoFileName = '/Demo.js';\nexport const DefaultDemoCode =\n`// ⚠️require function is asynchronous !\nconst React = await require('react');\n\n// if you register \\`EsmToAmdPlugin\\`, following statements will be support\n// import React from 'react';\n\nconst App = () => {\n    // if you register \\`JsxPlugin\\`, jsx can be used.\n    // return <div>hello world</div>;\n    return (\n        React.createElement(\n            'div',\n            {},\n            React.createElement(\n                'div',\n                {\n                    className: 'title'\n                },\n                'DemoSandbox'\n            ),\n            'welcome to use code sandbox'\n        )\n    );\n};\n\nmodule.exports.default = App\n// if you register \\`EsmToAmdPlugin\\`, following statements will be support\n// export default App;`;\n\nexport const DefaultIndexCode =\n`const React = await require('react');\nconst ReactDom = await require('react-dom');\nconst App = (await require('./Demo.js')).default;\n\n// if you register \\`EsmToAmdPlugin\\`, following statements will be support\n// import React from 'react';\n// import ReactDom from 'react-dom';\n// import App from './App';\n\nReactDom.render(React.createElement(App, {}), document.getElementById('root'));`;\n\nexport const DefaultHtml =\n`<noscript>Need javascript to run this demo page.</noscript>\n<div id=\"root\">\n    <h3> 🚀 Welcome to use code sandbox. </h3>\n</div>`;\n\nexport const DefaultCssCode =\n`.title { color: blue }`;\n","import { registerProxy } from '../core/proxy';\nimport { BasePlugin, IPlugin } from './types';\n\nlet pluginsId: string[] = [];\n\n/**\n * 默认的兜底插件\n */\nexport class DefaultPlugin extends BasePlugin {\n    constructor() {\n        super();\n        this.pluginId = 'default-plugin';\n    }\n\n    async resolveModuleUrl(meta) {\n        const { packageName, version, file } = meta;\n        const versionSuffix = version ? `@${version}` : '';\n        const fileSuffix = file ? `${file}` : '';\n        // `return false` to cancel auto require deps.\n        return `https://unpkg.com/${packageName}${versionSuffix}${fileSuffix}`;\n    }\n\n    async beforeModuleGenerate(ctx, meta) {\n        // 把代码段包装为函数\n        meta.factory = `async (require, exports, module) => {\\n${meta.factory}\\n}`;\n        meta.deps = ['require', 'exports', 'module'];\n        return meta;\n    }\n}\n\nexport const registerPlugins = (_plugins: IPlugin[]) => {\n    const plugins = _plugins.concat(new DefaultPlugin());\n    plugins.forEach(plugin => {\n        registerProxy(plugin.pluginId, plugin);\n    });\n    pluginsId = plugins.map(plugin => plugin.pluginId);\n    return pluginsId;\n};\n\nexport const getPlugins = () => {\n    return pluginsId;\n}\n","import {createEventSubscribeManager} from \"../event\";\nimport path, {PathObject} from \"path-browserify\";\n\nexport interface IFile {\n    name: string;\n    content: string;\n}\n\nexport interface IDirectory {\n    name: string;\n    children: Map<string, IDirectory | IFile>;\n}\n\nexport type EventTypes = 'transfer' | 'dir-set' | 'dir-delete' | 'dir-clear' | 'files-change';\nexport enum FilesChangeType {\n    Delete = 'delete',\n    Change = 'change',\n    New = 'new'\n}\n\nconst getPathFileName = (pathObject: PathObject) => `${pathObject.name}${pathObject.ext}`;\n\nconst traverse = (dir = '', directory: IDirectory, cb: (path: string, item: IFile) => void) => {\n    directory.children.forEach((item) => {\n        if (Reflect.has(item, 'children')) {\n            traverse(`${path}/${item.name}`, item as IDirectory, cb);\n            return;\n        }\n        cb(`${path}/${item.name}`, item as IFile);\n    });\n};\n\nexport class FilesSystem {\n    private root: IDirectory = {\n        name: '',\n        children: this.getProxyMap('', [])\n    };\n    // 保证同步消息执行顺序的 id\n    private eventCount: number = 0;\n    public event = createEventSubscribeManager<EventTypes>();\n\n    private getProxyMap(path: string, entries) {\n        const _this = this;\n        const map: IDirectory['children'] = new Map(entries);\n\n        const proxyMethod = (methodName: keyof typeof map, eventName: EventTypes) => {\n            const _method = Reflect.get(map, methodName);\n            if (typeof _method === 'function') {\n                const method = function (...args) {\n                    _this.event.trigger(eventName, _this.eventCount++, path, ...args);\n                    return _method.call(map, ...args);\n                }\n                Reflect.set(map, methodName, method);\n            }\n        };\n\n        // 可以改变 Map 值的方法，通知外部\n        proxyMethod('set', 'dir-set');\n        proxyMethod('delete', 'dir-delete');\n        proxyMethod('clear', 'dir-clear');\n\n        return map;\n    }\n\n    public pathReduce(target: string) {\n        const paths = target.split(path.sep);\n        return paths.reduce(([status, dir], cur, index, arr) => {\n            if (index === 0) {\n                return [status, dir] as const;\n            }\n            // 如果最后一个路径是空串，说明路径是 / 结尾，忽略\n            if (index === arr.length - 1 && cur === '') {\n                return [status, dir]  as const;\n            }\n            return [status && dir.children?.has(cur), dir.children?.get(cur)] as const;\n        }, [true, this.root] as const);\n    }\n\n    public exist(target) {\n        const [exist] = this.pathReduce(target);\n        return exist;\n    }\n\n    public mkdir(target: string) {\n        const pathObject = path.parse(target);\n        if (this.exist(target)) {\n            throw new Error(`[fs] failed to mkdir ${target}, it is already existed.`);\n        }\n        const [parentExist, parent] = this.pathReduce(pathObject.dir);\n        if (!parentExist) {\n            throw new Error(`[fs] failed to mkdir ${target}, parent path ${pathObject.dir} is not existed.`);\n        }\n        if (!Reflect.has(parent, 'children') || Reflect.has(parent, 'content')) {\n            throw new Error(`[fs] failed to mkdir ${target}, parent path ${pathObject.dir} is not a directory.`);\n        }\n        (parent as IDirectory).children.set(getPathFileName(pathObject), {\n            name: getPathFileName(pathObject),\n            children: this.getProxyMap(path.format(pathObject), []),\n        });\n    }\n\n    public readDirectory(target: string) {\n        const pathObject = path.parse(target);\n        const [parentExist, parent] = this.pathReduce(pathObject.dir);\n        if (!parentExist) {\n            throw new Error(`[fs] failed to read directory ${target}, parent path ${pathObject.dir} is not existed.`);\n        }\n        return (parent as IDirectory).children.get(getPathFileName(pathObject));\n    }\n\n    public readFile(target: string) {\n        const [exist, file] = this.pathReduce(target);\n        if (!exist) {\n            throw new Error(`[fs] failed to read file ${target}, it is not existed.`);\n        }\n        if (Reflect.has(file, 'children')) {\n            throw new Error(`[fs] failed to read file ${target}, it is a directory.`);\n        }\n        return file as IFile;\n    }\n\n    public writeFile(target: string, contents: ArrayBuffer | string) {\n        const pathObject = path.parse(target);\n        const [parentExist, parent] = this.pathReduce(pathObject.dir);\n        if (!parentExist) {\n            throw new Error(`[fs] failed to write file ${target}, parent path ${pathObject.dir} is not existed.`);\n        }\n        let writeContent = contents as string;\n        if (typeof contents !== 'string') {\n            writeContent = btoa(String.fromCharCode.apply(null, new Uint8Array(contents)));\n        }\n        const existBefore = (parent as IDirectory).children.has(getPathFileName(pathObject));\n        (parent as IDirectory).children.set(getPathFileName(pathObject), {\n            name: getPathFileName(pathObject),\n            content: writeContent,\n        });\n        this.event.trigger('files-change', this.eventCount++, existBefore ? FilesChangeType.Change : FilesChangeType.New, [target]);\n    }\n\n    private cpOrMv(isMv: boolean = false, source: string, target: string) {\n        const sourcePathObject = path.parse(source);\n        const targetPathObject = path.parse(target);\n        const [sourceParentExist, sourceParent] = this.pathReduce(sourcePathObject.dir);\n        const [targetParentExist, targetParent] = this.pathReduce(targetPathObject.dir);\n        if (!sourceParentExist || !targetParentExist) {\n            throw new Error(`[fs] failed to ${isMv ? 'mv' : 'cp'} ${source} to ${target}, source or target path is not existed.`);\n        }\n        if ((targetParent as IDirectory).children.has(getPathFileName(targetPathObject))) {\n            throw new Error(`[fs] failed to ${isMv ? 'mv' : 'cp'} ${source} to ${target}, target path is already existed.`);\n        }\n        (targetParent as IDirectory).children.set(getPathFileName(targetPathObject), (sourceParent as IDirectory).children.get(getPathFileName(sourcePathObject)));\n\n        const sourceFileOrDirectory = (sourceParent as IDirectory).children.get(source);\n        const deletedFiles = [];\n        const newFiles = [];\n        if (Reflect.has(sourceFileOrDirectory, 'content')) {\n            deletedFiles.push(source);\n            newFiles.push(target);\n        }\n        else {\n            traverse(undefined, sourceFileOrDirectory as IDirectory, (path_) => {\n                deletedFiles.push(path.join(sourcePathObject.dir, path_));\n                newFiles.push(path.join(targetPathObject.dir, path_));\n            });\n        }\n\n        if (isMv) {\n            (sourceParent as IDirectory).children.delete(getPathFileName(sourcePathObject));\n            this.event.trigger('files-change', this.eventCount++, FilesChangeType.Delete, deletedFiles);\n        }\n\n        this.event.trigger('files-change', this.eventCount++, FilesChangeType.New, newFiles);\n    }\n\n    public cp: (source: string, target: string) => void = this.cpOrMv.bind(this, false);\n\n    public mv: (source: string, target: string) => void = this.cpOrMv.bind(this, true);\n\n    public rm(target: string) {\n        const pathObject = path.parse(target);\n        const [parentExist, parent] = this.pathReduce(pathObject.dir);\n        if (!parentExist || !(parent as IDirectory).children.has(getPathFileName(pathObject))) {\n            throw new Error(`[fs] failed to rm ${target}, it is not existed.`);\n        }\n\n        const targetFileOrDirectory = (parent as IDirectory).children.get(target);\n        const deletedFiles = [];\n        if (Reflect.has(targetFileOrDirectory, 'content')) {\n            deletedFiles.push(target);\n        }\n        else {\n            traverse(undefined, targetFileOrDirectory as IDirectory, (path_) => {\n                deletedFiles.push(path.join(pathObject.dir, path_));\n            });\n        }\n\n        (parent as IDirectory).children.delete(getPathFileName(pathObject));\n        this.event.trigger('files-change', this.eventCount++, FilesChangeType.Delete, deletedFiles);\n    }\n\n    /**\n     * 序列化内部存储的所有数据\n     */\n    public getDataPayload() {\n        return JSON.stringify(this.root, (key, value) => {\n            if (value instanceof Map) {\n                return {\n                    __dataType: 'Map',\n                    entries: Array.from(value.entries())\n                };\n            }\n            return value;\n        });\n    }\n\n    /**\n     * 触发将文件对象存储的数据传输到远端的事件\n     */\n    public transfer() {\n        const payload = this.getDataPayload();\n        this.event.trigger('transfer', this.eventCount++, '', payload);\n    }\n\n    /**\n     * 接收外部设置的数据\n     * @param payload 底层数据\n     */\n    public receive(payload: string) {\n        // 遍历所有文件，设置监听目录变化\n        const traverse = (obj, path = '') => {\n            if (obj.children && Reflect.get(obj.children, '__dataType') === 'Map') {\n                const entries = obj.children.entries.forEach(([key, value]) => [key, traverse(value, [path, key].join('/'))]);\n                return {\n                    ...obj,\n                    children: this.getProxyMap(path, entries)\n                };\n            }\n            return obj;\n        };\n        this.root = traverse(JSON.parse(payload));\n    }\n\n}\n","// 同步 iframe 和 页面内的两个 FS 对象\nimport {callProxy, registerProxy, waitProxy} from '../proxy';\nimport {EventTypes, FilesSystem, IDirectory} from './types';\nimport {waitIframeReady} from \"../../utils/iframe\";\n\nexport const SyncServiceName = 'code-sandbox-sync-files';\n\ninterface IIframeSyncService {\n    sync: (eventType: EventTypes, orderCount: number, path: string, ...args: unknown[]) => Promise<void>;\n}\n\ninterface IMainSyncService {\n    requestFs: () => Promise<string>;\n}\n\n/**\n * 在 iframe 内调用，处理来自宿主窗口的同步消息，保持 iframe 内的 fs 和 外部页面的一致\n * @param fs iframe 内部的fs 对象\n */\nexport async function initIframeFilesSyncService(fs: FilesSystem) {\n    const cacheQueue: Map<number, [eventType: EventTypes, path: string, ...args: unknown[]]> = new Map();\n    let currentCount = 0;\n\n    registerProxy<IIframeSyncService>(SyncServiceName, {\n        sync: async (eventType, orderCount, path, ...args) => {\n            // 把消息放入到消息队列里，确保消息按照顺序执行\n            cacheQueue.set(orderCount, [eventType, path, ...args]);\n            // 将当前顺序可以处理的消息都处理掉\n            while (cacheQueue.get(currentCount)) {\n                const [eventType, path, ...args] = cacheQueue.get(currentCount);\n                cacheQueue.delete(currentCount);\n                currentCount++;\n\n                const [, dir_] = fs.pathReduce(path);\n                const dir = dir_ as IDirectory;\n                switch (eventType) {\n                    case \"transfer\": {\n                        fs.receive.apply(fs, args);\n                        break;\n                    }\n                    case \"dir-clear\": {\n                        dir.children.clear();\n                        break;\n                    }\n                    case \"dir-set\": {\n                        dir.children.set.apply(dir.children, args);\n                        break;\n                    }\n                    case \"dir-delete\": {\n                        dir.children.delete.apply(dir.children, args);\n                        break;\n                    }\n                    case \"files-change\": {\n                        fs.event.trigger(eventType, path, ...args);\n                        break;\n                    }\n                }\n            }\n        }\n    });\n\n    // 主动调用宿主窗口获取一次数据\n    const payload = await callProxy<IMainSyncService, 'requestFs'>({\n        win: self.parent || self.opener || self.top,\n        method: 'requestFs',\n        serviceId: SyncServiceName,\n        payload: []\n    }) as string;\n    if (payload) {\n        console.log('receive payload', payload);\n        fs.receive(payload);\n        return;\n    }\n    console.log('not receive payload', payload);\n}\n\n/**\n * 在宿主页面内调用，分发 fs 的状态给 iframe 内的 fs 对象\n * @param fs 宿主页面的 fs 对象\n * @param iframe 要分发到的 iframe\n */\nexport function initMainFilesSyncCaller(fs: FilesSystem, iframe: HTMLIFrameElement) {\n    // 监听 fs 的事件，并调用 iframe 的服务，同步给 iframe\n    const onEvent = (eventType: EventTypes) => {\n        fs.event.listen(eventType, async (...args) => {\n            await waitIframeReady(iframe);\n            await waitProxy(iframe.contentWindow, SyncServiceName);\n            await callProxy<IIframeSyncService>({\n                win: iframe.contentWindow,\n                serviceId: SyncServiceName,\n                method: 'sync',\n                payload: [eventType, ...args]\n            });\n        });\n    };\n    onEvent('transfer');\n    onEvent('dir-delete');\n    onEvent('dir-set');\n    onEvent('dir-clear');\n    onEvent('files-change');\n    // 创建服务，用于回应 iframe 主动发起的数据同步请求\n    registerProxy<IMainSyncService>(SyncServiceName, {\n        requestFs: async () => {\n            // 将 fs 内的数据序列化之后传递给 iframe\n            return fs.getDataPayload();\n        }\n    });\n}\n","import {\n    getIframeHTML,\n    iframeStyles,\n    getSandboxRefresher,\n    setSandboxPlugins,\n    HTMLEntry,\n    JSEntry,\n    StylesEntry\n} from './iframe';\nimport * as DefaultCodes from './default';\nimport {onIframeLoadingModule, initMainThreadService, waitIframeReady} from './utils/iframe';\nimport { getPlugins, registerPlugins } from './plugins';\nimport { FilesSystem, initMainFilesSyncCaller } from \"./core/files-system\";\nimport React from \"react\";\n\ninitMainThreadService();\n\nexport type IAttributes = React.HTMLAttributes<CodeSandbox> & {\n    html?: string;\n    css?: string;\n    index?: string;\n    code?: string;\n    title?: string;\n}\n\ndeclare global {\n    namespace JSX {\n        interface IntrinsicElements {\n            'code-sandbox': React.DetailedHTMLProps<IAttributes, CodeSandbox>\n        }\n    }\n}\n\nclass CodeSandbox extends HTMLElement {\n    public iframe: HTMLIFrameElement;\n    private styleElement: HTMLStyleElement;\n    private fs_: FilesSystem = new FilesSystem();\n    private fsMode: 'fs' | 'code' = 'code';\n    public root: ShadowRoot = null;\n\n    constructor() {\n        super();\n        this.root = this.attachShadow({ mode: 'open' });\n        this.initIframe();\n    }\n\n    public set fs(fs: FilesSystem) {\n        this.fsMode = 'fs';\n        this.fs_ = fs;\n    }\n\n    public get fs() {\n        return this.fs_;\n    }\n\n    public addEventListener<K extends keyof (HTMLElementEventMap & { 'ready': unknown; 'loading-module': unknown; })>(type: K, listener, options?) {\n        super.addEventListener(type, listener, options);\n    }\n\n    public removeEventListener<K extends keyof (HTMLElementEventMap & { 'ready': unknown; 'loading-module': unknown; })>(type: K, listener, options?) {\n        super.removeEventListener(type, listener, options);\n    }\n\n    private initIframe() {\n        if (this.iframe) {\n            this.root.removeChild(this.iframe);\n        }\n        const [srcDoc] = getIframeHTML();\n\n        this.iframe = document.createElement('iframe');\n        this.iframe.srcdoc = srcDoc;\n        this.iframe.setAttribute('title', this.iframe.getAttribute('title'));\n        this.iframe.setAttribute('sandbox', 'allow-scripts');\n        this.iframe.setAttribute('class', `code-sandbox-iframe ${this.getAttribute('class') || ''}`);\n        this.iframe.setAttribute('style', this.getAttribute('style'));\n\n        // 监听 iframe 内加载模块，并分发对象的事件\n        onIframeLoadingModule(this.iframe, (moduleName, extraInfo) => {\n            this.dispatchEvent(new CustomEvent('loading-module', {\n                detail: {\n                    moduleName,\n                    url: extraInfo\n                }\n            }));\n        });\n\n        initMainFilesSyncCaller(this.fs, this.iframe);\n\n        this.styleElement = document.createElement('style');\n        this.styleElement.innerHTML = iframeStyles;\n\n        this.root.append(this.styleElement, this.iframe);\n        setSandboxPlugins(this.iframe, getPlugins());\n        this.writeFile('html');\n        this.writeFile('css');\n        this.writeFile('code');\n        this.writeFile('index');\n    }\n\n    static get observedAttributes() {\n        return ['code', 'css', 'index', 'html', 'class', 'style'];\n    }\n\n    private async execute() {\n        await getSandboxRefresher({ iframe: this.iframe })();\n        this.dispatchEvent(new CustomEvent('ready'));\n    }\n\n    public async attributeChangedCallback(name: string, oldValue, newValue) {\n        if (['html', 'code', 'index', 'css'].includes(name)) {\n            // 等待 iframe 环境准备好之后再执行代码\n            waitIframeReady(this.iframe).then(() => {\n                this.writeFile(name);\n                this.execute();\n            });\n        }\n        else {\n            this.iframe.setAttribute(name, newValue);\n        }\n    }\n\n    public async refresh() {\n        this.initIframe();\n        await waitIframeReady(this.iframe);\n        return this.execute();\n    }\n\n    private async writeFile(name: string) {\n        await waitIframeReady(this.iframe);\n        const defaultCodes = {\n            html: [HTMLEntry, DefaultCodes.DefaultHtml],\n            code: [DefaultCodes.DefaultDemoFileName, DefaultCodes.DefaultDemoCode],\n            index: [JSEntry, DefaultCodes.DefaultIndexCode],\n            css: [StylesEntry, DefaultCodes.DefaultCssCode]\n        };\n        const [fileName, defaultCode] = defaultCodes[name];\n        this.fs.writeFile(fileName, this.getAttribute(name) || defaultCode);\n    }\n}\n\nexport { DefaultCodes, CodeSandbox, registerPlugins };\n"],"names":["pluginsId","path","traverse","DefaultCodes.DefaultHtml","DefaultCodes.DefaultDemoFileName","DefaultCodes.DefaultDemoCode","DefaultCodes.DefaultIndexCode","DefaultCodes.DefaultCssCode"],"mappings":"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"}