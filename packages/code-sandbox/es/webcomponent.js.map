{"version":3,"file":"webcomponent.js","sources":["../src/utils/iframe.ts","../src/type.ts","../.cache/iframe/iframe.js?url","../src/iframe/iframe.css?used&raw","../src/iframe/html.ts","../src/iframe/index.ts","../src/default.ts","../src/plugins/index.ts","../src/core/files-system/types.ts","../src/core/files-system/sync.ts","../src/webcomponent.tsx"],"sourcesContent":["import { createEventSubscribeManager } from '../core/event';\nimport { callProxy, registerProxy } from '../core/proxy';\n\nconst EVENT_KEY = 'iframe-message-type';\nconst NOTIFICATION_SERVICE = 'iframe-notification-service';\n\ninterface INotificationService {\n    /** iframe 加载完成 */\n    iframeReady: (e: MessageEvent) => Promise<boolean>;\n    iframeLoadingModule: (moduleName: string, moduleUrl: string, e: MessageEvent) => Promise<void>;\n}\n\nconst emitter = createEventSubscribeManager<keyof INotificationService>();\n\n/**\n * 注册主进程中的服务，监听消息\n */\nexport const initMainThreadService = () => {\n    const service: INotificationService = {\n        iframeReady: async (e) => {\n            emitter.trigger('iframeReady', e);\n            return true;\n        },\n        iframeLoadingModule: async (moduleName, moduleUrl, e) => {\n            emitter.trigger('iframeLoadingModule', moduleName, moduleUrl, e);\n        }\n    }\n    return registerProxy(NOTIFICATION_SERVICE, service);\n};\n\n/**\n * 主页面中，等待指定的 iframe 运行环境加载完成\n * @param iframe 要等待的 iframe\n * @param timeout 超时时间\n */\nexport const waitIframeReady = async (iframe: HTMLIFrameElement, timeout=10000) => {\n    // 被动监听 iframe 发送的消息来得知 iframe 已经加载，避免调用时 iframe 端还未准备好而导致的消息丢失\n    const listenTask = new Promise<null>((resolve, reject) => {\n        if (iframe.getAttribute('data-iframe-status') !== 'ready') {\n            emitter.once(\n                'iframeReady',\n                (...args) => {\n                    iframe.setAttribute('data-iframe-status', 'ready');\n                    resolve(null);\n                },\n                (e: MessageEvent) => e.source === iframe.contentWindow,\n                reject,\n                timeout\n            );\n        }\n        else {\n            resolve(null);\n        }\n    });\n    // 主动调用 iframe 暴露的接口查询是否准备好\n    const queryTask = async () => {\n        // 先等待 iframe 加载好\n        await new Promise(resolve => {\n            const onload = () => {\n                iframe.setAttribute('data-iframe-status', 'loaded');\n                resolve(null);\n                iframe.removeEventListener('load', onload);\n            };\n            iframe.addEventListener('load', onload);\n        });\n        // 等待 iframe 内的 js 环境准备好\n        await callProxy<Pick<INotificationService, 'iframeReady'>>({\n            win: iframe.contentWindow,\n            serviceId: NOTIFICATION_SERVICE,\n            method: 'iframeReady',\n            payload: [],\n            timeout\n        });\n    };\n    // 两个查询方式 race，取返回快的结果\n    return Promise.race([listenTask, queryTask()]);\n}\n\n/**\n * 通知外部容器，iframe 内部已经加载完成的函数\n */\nexport const iframeReady = async () => {\n    registerProxy<Pick<INotificationService, 'iframeReady'>>(NOTIFICATION_SERVICE, {\n        iframeReady: async () => {\n            return true;\n        }\n    });\n    const parent = window.top || window.parent || window.opener;\n    if (!parent) return;\n    return callProxy<INotificationService>({\n        win: parent,\n        serviceId: NOTIFICATION_SERVICE,\n        method: 'iframeReady',\n        payload: []\n    });\n}\n\n/**\n * 监听指定的 iframe 内加载模块\n * @param iframe 要监听的 iframe\n * @param cb 回调函数\n */\nexport const onIframeLoadingModule = (iframe: HTMLIFrameElement, cb: (moduleName: string, extraInfo: string) => void) => {\n    emitter.listen('iframeLoadingModule', cb, (moduleName, extraInfo, e: MessageEvent) => e.source === iframe.contentWindow);\n};\n\n/**\n * 通知外部容器，iframe 内部正在加载模块的函数\n * @param moduleName\n * @param extraInfo\n */\nexport const iframeLoadingModule = async (moduleName: string, extraInfo: string) => {\n    const parent = window.top || window.parent || window.opener;\n    if (!parent) return;\n    return callProxy<INotificationService>({\n        win: parent,\n        serviceId: NOTIFICATION_SERVICE,\n        method: 'iframeLoadingModule',\n        payload: [moduleName, extraInfo]\n    });\n};\n","export const DemoServiceName = 'demo-service';\n\n\nexport interface IDemoService {\n    run: (jsEntry: string, htmlEntry?: string, stylesEntry?: string) => Promise<boolean>;\n    setPlugins: (pluginsId: string[]) => Promise<void>;\n}\n","export default \"data:application/javascript;base64,\"","export default \".code-sandbox-iframe {\\n    border-width: 0;\\n    width: 100%;\\n    height: 100%;\\n}\\n\"","import iframeScriptUrl from '@/iframe/iframe?url';\nimport iframeStyles_ from './iframe.css?raw';\n\nexport const getIframeHTML = () => {\n    const srcDoc =\n`<html lang=\"en\">\n    <head>\n        <title>Demo Sandbox</title>\n        <script type=\"module\" src=\"${iframeScriptUrl}\"></script>\n    </head>\n    <body></body>\n</html>`;\n    return [srcDoc];\n};\n\nexport const iframeStyles: string = iframeStyles_;\n","import {waitIframeReady} from \"../utils/iframe\";\nimport {callProxy, waitProxy} from \"../core/proxy\";\nimport {DemoServiceName, IDemoService} from \"../type\";\nimport {FilesSystem} from '../core/files-system';\n\nexport interface IOptions {\n    fs?: FilesSystem;\n    iframe: HTMLIFrameElement | null;\n}\n\nexport const JSEntry = '/index.js';\nexport const StylesEntry = '/styles.css';\nexport const HTMLEntry = '/index.html';\n\nexport const getSandboxRefresher = (opt: IOptions) => {\n    const iframe = opt.iframe;\n\n    return async () => {\n        if (!iframe) return;\n        // 等待 demo iframe 提供的服务准备好\n        await waitIframeReady(iframe);\n        await waitProxy(iframe.contentWindow, DemoServiceName);\n        // 调用 iframe 提供的服务\n        await callProxy<IDemoService, 'run'>({\n            win: iframe.contentWindow,\n            serviceId: DemoServiceName,\n            method: 'run',\n            payload: [JSEntry, HTMLEntry, StylesEntry]\n        });\n    };\n};\n\nexport { getIframeHTML, iframeStyles } from './html';\n\nexport const setSandboxPlugins = async (iframe: HTMLIFrameElement | null, pluginsId: string[]) => {\n    await waitIframeReady(iframe);\n    await waitProxy(iframe.contentWindow, DemoServiceName);\n    return await callProxy<IDemoService>({\n        win: iframe.contentWindow,\n        serviceId: DemoServiceName,\n        method: 'setPlugins',\n        payload: [pluginsId]\n    });\n};\n","export const DefaultDemoFileName = '/Demo.js';\nexport const DefaultDemoCode =\n`// ⚠️require function is asynchronous !\nconst React = await require('react');\n\n// if you register \\`EsmToAmdPlugin\\`, following statements will be support\n// import React from 'react';\n\nconst App = () => {\n    // if you register \\`JsxPlugin\\`, jsx can be used.\n    // return <div>hello world</div>;\n    return (\n        React.createElement(\n            'div',\n            {},\n            React.createElement(\n                'div',\n                {\n                    className: 'title'\n                },\n                'DemoSandbox'\n            ),\n            'welcome to use code sandbox'\n        )\n    );\n};\n\nmodule.exports.default = App\n// if you register \\`EsmToAmdPlugin\\`, following statements will be support\n// export default App;`;\n\nexport const DefaultIndexCode =\n`const React = await require('react');\nconst ReactDom = await require('react-dom');\nconst App = (await require('./Demo.js')).default;\n\n// if you register \\`EsmToAmdPlugin\\`, following statements will be support\n// import React from 'react';\n// import ReactDom from 'react-dom';\n// import App from './App';\n\nReactDom.render(React.createElement(App, {}), document.getElementById('root'));`;\n\nexport const DefaultHtml =\n`<noscript>Need javascript to run this demo page.</noscript>\n<div id=\"root\">\n    <h3> 🚀 Welcome to use code sandbox. </h3>\n</div>`;\n\nexport const DefaultCssCode =\n`.title { color: blue }`;\n","import { registerProxy } from '../core/proxy';\nimport { BasePlugin, IPlugin } from './types';\n\nlet pluginsId: string[] = [];\n\n/**\n * 默认的兜底插件\n */\nexport class DefaultPlugin extends BasePlugin {\n    constructor() {\n        super();\n        this.pluginId = 'default-plugin';\n    }\n\n    async resolveModuleUrl(meta) {\n        const { packageName, version, file } = meta;\n        const versionSuffix = version ? `@${version}` : '';\n        const fileSuffix = file ? `${file}` : '';\n        // `return false` to cancel auto require deps.\n        return `https://unpkg.com/${packageName}${versionSuffix}${fileSuffix}`;\n    }\n\n    async beforeModuleGenerate(ctx, meta) {\n        // 把代码段包装为函数\n        meta.factory = `async (require, exports, module) => {\\n${meta.factory}\\n}`;\n        meta.deps = ['require', 'exports', 'module'];\n        return meta;\n    }\n}\n\nexport const registerPlugins = (_plugins: IPlugin[]) => {\n    const plugins = _plugins.concat(new DefaultPlugin());\n    plugins.forEach(plugin => {\n        registerProxy(plugin.pluginId, plugin);\n    });\n    pluginsId = plugins.map(plugin => plugin.pluginId);\n    return pluginsId;\n};\n\nexport const getPlugins = () => {\n    return pluginsId;\n}\n","import {createEventSubscribeManager} from \"../event\";\nimport path, {PathObject} from \"path-browserify\";\n\nexport interface IFile {\n    name: string;\n    content: string;\n}\n\nexport interface IDirectory {\n    name: string;\n    children: Map<string, IDirectory | IFile>;\n}\n\nexport type EventTypes = 'transfer' | 'receive' | 'dir-set' | 'dir-delete' | 'dir-clear' | 'files-change';\nexport enum FilesChangeType {\n    Delete = 'delete',\n    Change = 'change',\n    New = 'new'\n}\n\nconst getPathFileName = (pathObject: PathObject) => `${pathObject.name}${pathObject.ext}`;\n\nconst traverse = (dir = '', directory: IDirectory, cb: (path: string, item: IFile) => void) => {\n    directory.children.forEach((item) => {\n        if (Reflect.has(item, 'children')) {\n            traverse(`${path}/${item.name}`, item as IDirectory, cb);\n            return;\n        }\n        cb(`${path}/${item.name}`, item as IFile);\n    });\n};\n\nexport class FilesSystem {\n    private root: IDirectory = {\n        name: '',\n        children: this.getProxyMap('', [])\n    };\n    // 保证同步消息执行顺序的 id\n    private eventCount: number = 0;\n    public event = createEventSubscribeManager<EventTypes>();\n\n    private getProxyMap(path: string, entries) {\n        const _this = this;\n        const map: IDirectory['children'] = new Map(entries);\n\n        const proxyMethod = (methodName: keyof typeof map, eventName: EventTypes) => {\n            const _method = Reflect.get(map, methodName);\n            if (typeof _method === 'function') {\n                const method = function (...args) {\n                    _this.event.trigger(eventName, _this.eventCount++, path, ...args);\n                    return _method.call(map, ...args);\n                }\n                Reflect.set(map, methodName, method);\n            }\n        };\n\n        // 可以改变 Map 值的方法，通知外部\n        proxyMethod('set', 'dir-set');\n        proxyMethod('delete', 'dir-delete');\n        proxyMethod('clear', 'dir-clear');\n\n        return map;\n    }\n\n    public pathReduce(target: string) {\n        const paths = target.split(path.sep);\n        return paths.reduce(([status, dir], cur, index, arr) => {\n            if (index === 0) {\n                return [status, dir] as const;\n            }\n            // 如果最后一个路径是空串，说明路径是 / 结尾，忽略\n            if (index === arr.length - 1 && cur === '') {\n                return [status, dir]  as const;\n            }\n            return [status && dir.children?.has(cur), dir.children?.get(cur)] as const;\n        }, [true, this.root] as const);\n    }\n\n    public exist(target) {\n        const [exist] = this.pathReduce(target);\n        return exist;\n    }\n\n    public mkdir(target: string) {\n        const pathObject = path.parse(target);\n        if (this.exist(target)) {\n            throw new Error(`[fs] failed to mkdir ${target}, it is already existed.`);\n        }\n        const [parentExist, parent] = this.pathReduce(pathObject.dir);\n        if (!parentExist) {\n            throw new Error(`[fs] failed to mkdir ${target}, parent path ${pathObject.dir} is not existed.`);\n        }\n        if (!Reflect.has(parent, 'children') || Reflect.has(parent, 'content')) {\n            throw new Error(`[fs] failed to mkdir ${target}, parent path ${pathObject.dir} is not a directory.`);\n        }\n        (parent as IDirectory).children.set(getPathFileName(pathObject), {\n            name: getPathFileName(pathObject),\n            children: this.getProxyMap(path.format(pathObject), []),\n        });\n    }\n\n    public readDirectory(target: string) {\n        const pathObject = path.parse(target);\n        const [parentExist, parent] = this.pathReduce(pathObject.dir);\n        if (!parentExist) {\n            throw new Error(`[fs] failed to read directory ${target}, parent path ${pathObject.dir} is not existed.`);\n        }\n        return (parent as IDirectory).children.get(getPathFileName(pathObject));\n    }\n\n    public readFile(target: string) {\n        const [exist, file] = this.pathReduce(target);\n        if (!exist) {\n            throw new Error(`[fs] failed to read file ${target}, it is not existed.`);\n        }\n        if (Reflect.has(file, 'children')) {\n            throw new Error(`[fs] failed to read file ${target}, it is a directory.`);\n        }\n        return file as IFile;\n    }\n\n    public writeFile(target: string, contents: ArrayBuffer | string) {\n        const pathObject = path.parse(target);\n        const [parentExist, parent] = this.pathReduce(pathObject.dir);\n        if (!parentExist) {\n            throw new Error(`[fs] failed to write file ${target}, parent path ${pathObject.dir} is not existed.`);\n        }\n        let writeContent = contents as string;\n        if (typeof contents !== 'string') {\n            writeContent = btoa(String.fromCharCode.apply(null, new Uint8Array(contents)));\n        }\n        const existBefore = (parent as IDirectory).children.has(getPathFileName(pathObject));\n        (parent as IDirectory).children.set(getPathFileName(pathObject), {\n            name: getPathFileName(pathObject),\n            content: writeContent,\n        });\n        this.event.trigger('files-change', this.eventCount++, existBefore ? FilesChangeType.Change : FilesChangeType.New, [target]);\n    }\n\n    private cpOrMv(isMv: boolean = false, source: string, target: string) {\n        const sourcePathObject = path.parse(source);\n        const targetPathObject = path.parse(target);\n        const [sourceParentExist, sourceParent] = this.pathReduce(sourcePathObject.dir);\n        const [targetParentExist, targetParent] = this.pathReduce(targetPathObject.dir);\n        if (!sourceParentExist || !targetParentExist) {\n            throw new Error(`[fs] failed to ${isMv ? 'mv' : 'cp'} ${source} to ${target}, source or target path is not existed.`);\n        }\n        if ((targetParent as IDirectory).children.has(getPathFileName(targetPathObject))) {\n            throw new Error(`[fs] failed to ${isMv ? 'mv' : 'cp'} ${source} to ${target}, target path is already existed.`);\n        }\n        (targetParent as IDirectory).children.set(getPathFileName(targetPathObject), (sourceParent as IDirectory).children.get(getPathFileName(sourcePathObject)));\n\n        const sourceFileOrDirectory = (sourceParent as IDirectory).children.get(source);\n        const deletedFiles = [];\n        const newFiles = [];\n        if (Reflect.has(sourceFileOrDirectory, 'content')) {\n            deletedFiles.push(source);\n            newFiles.push(target);\n        }\n        else {\n            traverse(undefined, sourceFileOrDirectory as IDirectory, (path_) => {\n                deletedFiles.push(path.join(sourcePathObject.dir, path_));\n                newFiles.push(path.join(targetPathObject.dir, path_));\n            });\n        }\n\n        if (isMv) {\n            (sourceParent as IDirectory).children.delete(getPathFileName(sourcePathObject));\n            this.event.trigger('files-change', this.eventCount++, FilesChangeType.Delete, deletedFiles);\n        }\n\n        this.event.trigger('files-change', this.eventCount++, FilesChangeType.New, newFiles);\n    }\n\n    public cp: (source: string, target: string) => void = this.cpOrMv.bind(this, false);\n\n    public mv: (source: string, target: string) => void = this.cpOrMv.bind(this, true);\n\n    public rm(target: string) {\n        const pathObject = path.parse(target);\n        const [parentExist, parent] = this.pathReduce(pathObject.dir);\n        if (!parentExist || !(parent as IDirectory).children.has(getPathFileName(pathObject))) {\n            throw new Error(`[fs] failed to rm ${target}, it is not existed.`);\n        }\n\n        const targetFileOrDirectory = (parent as IDirectory).children.get(target);\n        const deletedFiles = [];\n        if (Reflect.has(targetFileOrDirectory, 'content')) {\n            deletedFiles.push(target);\n        }\n        else {\n            traverse(undefined, targetFileOrDirectory as IDirectory, (path_) => {\n                deletedFiles.push(path.join(pathObject.dir, path_));\n            });\n        }\n\n        (parent as IDirectory).children.delete(getPathFileName(pathObject));\n        this.event.trigger('files-change', this.eventCount++, FilesChangeType.Delete, deletedFiles);\n    }\n\n    /**\n     * 序列化内部存储的所有数据\n     */\n    public getDataPayload() {\n        return JSON.stringify(this.root, (key, value) => {\n            if (value instanceof Map) {\n                return {\n                    __dataType: 'Map',\n                    entries: Array.from(value.entries())\n                };\n            }\n            return value;\n        });\n    }\n\n    /**\n     * 触发将文件对象存储的数据传输到远端的事件\n     */\n    public transfer() {\n        const payload = this.getDataPayload();\n        this.event.trigger('transfer', this.eventCount++, '', payload);\n    }\n\n    /**\n     * 接收外部设置的数据\n     * @param payload 底层数据\n     */\n    public receive(payload: string) {\n        // 遍历所有文件，设置监听目录变化\n        const traverse = (obj, path = '') => {\n            if (obj.children && Reflect.get(obj.children, '__dataType') === 'Map') {\n                const entries = obj.children.entries.map(([key, value]) => [key, traverse(value, [path, key].join('/'))]);\n                return {\n                    ...obj,\n                    children: this.getProxyMap(path, entries)\n                };\n            }\n            return obj;\n        };\n        const root = traverse(JSON.parse(payload));\n        this.root = root;\n        console.log('this.root', root);\n        this.event.trigger('receive', this.eventCount++);\n    }\n\n}\n","// 同步 iframe 和 页面内的两个 FS 对象\nimport {callProxy, registerProxy, waitProxy} from '../proxy';\nimport {EventTypes, FilesSystem, IDirectory} from './types';\nimport {waitIframeReady} from \"../../utils/iframe\";\n\nexport const SyncServiceName = 'code-sandbox-sync-files';\n\ninterface IIframeSyncService {\n    sync: (eventType: EventTypes, orderCount: number, path: string, ...args: unknown[]) => Promise<void>;\n}\n\ninterface IMainSyncService {\n    requestFs: () => Promise<string>;\n}\n\n/**\n * 在 iframe 内调用，处理来自宿主窗口的同步消息，保持 iframe 内的 fs 和 外部页面的一致\n * @param fs iframe 内部的fs 对象\n */\nexport async function initIframeFilesSyncService(fs: FilesSystem) {\n    const cacheQueue: Map<number, [eventType: EventTypes, path: string, ...args: unknown[]]> = new Map();\n    let currentCount = 0;\n\n    const dispose = registerProxy<IIframeSyncService>(SyncServiceName, {\n        sync: async (eventType, orderCount, path, ...args) => {\n            // 把消息放入到消息队列里，确保消息按照顺序执行\n            cacheQueue.set(orderCount, [eventType, path, ...args]);\n            // 将当前顺序可以处理的消息都处理掉\n            while (cacheQueue.get(currentCount)) {\n                const [eventType, path, ...args] = cacheQueue.get(currentCount);\n                cacheQueue.delete(currentCount);\n                currentCount++;\n\n                const [, dir_] = fs.pathReduce(path);\n                const dir = dir_ as IDirectory;\n                switch (eventType) {\n                    case \"transfer\": {\n                        fs.receive.apply(fs, args);\n                        break;\n                    }\n                    case \"dir-clear\": {\n                        dir.children.clear();\n                        break;\n                    }\n                    case \"dir-set\": {\n                        dir.children.set.apply(dir.children, args);\n                        break;\n                    }\n                    case \"dir-delete\": {\n                        dir.children.delete.apply(dir.children, args);\n                        break;\n                    }\n                    case \"files-change\": {\n                        fs.event.trigger(eventType, path, ...args);\n                        break;\n                    }\n                }\n            }\n        }\n    });\n\n    // 主动调用宿主窗口获取一次数据\n    const payload = await callProxy<IMainSyncService, 'requestFs'>({\n        win: self.parent || self.opener || self.top,\n        method: 'requestFs',\n        serviceId: SyncServiceName,\n        payload: []\n    }) as string;\n    if (payload) {\n        fs.receive(payload);\n        console.log('receive', payload, fs);\n        return;\n    }\n    return dispose;\n}\n\n/**\n * 在宿主页面内调用，分发 fs 的状态给 iframe 内的 fs 对象\n * @param fs 宿主页面的 fs 对象\n * @param iframe 要分发到的 iframe\n */\nexport function initMainFilesSyncCaller(fs: FilesSystem, iframe: HTMLIFrameElement) {\n    // 监听 fs 的事件，并调用 iframe 的服务，同步给 iframe\n    const onEvent = (eventType: EventTypes) => {\n        return fs.event.listen(eventType, async (...args) => {\n            await waitIframeReady(iframe);\n            await waitProxy(iframe.contentWindow, SyncServiceName);\n            await callProxy<IIframeSyncService>({\n                win: iframe.contentWindow,\n                serviceId: SyncServiceName,\n                method: 'sync',\n                payload: [eventType, ...args]\n            });\n        });\n    };\n    const disposes: Array<() => void> = [];\n    disposes.push(onEvent('transfer'));\n    disposes.push(onEvent('dir-delete'));\n    disposes.push(onEvent('dir-set'));\n    disposes.push(onEvent('dir-clear'));\n    disposes.push(onEvent('files-change'));\n    // 创建服务，用于回应 iframe 主动发起的数据同步请求\n    disposes.push(registerProxy<IMainSyncService>(SyncServiceName, {\n        requestFs: async () => {\n            // 将 fs 内的数据序列化之后传递给 iframe\n            return fs.getDataPayload();\n        }\n    }));\n    return () => {\n        disposes.forEach(dispose => dispose());\n    };\n}\n","import {\n    getIframeHTML,\n    iframeStyles,\n    getSandboxRefresher,\n    setSandboxPlugins,\n    HTMLEntry,\n    JSEntry,\n    StylesEntry\n} from './iframe';\nimport * as DefaultCodes from './default';\nimport {onIframeLoadingModule, initMainThreadService, waitIframeReady} from './utils/iframe';\nimport { getPlugins, registerPlugins } from './plugins';\nimport { FilesSystem, initMainFilesSyncCaller } from \"./core/files-system\";\nimport React from \"react\";\n\nexport type IAttributes = React.HTMLAttributes<CodeSandbox> & {\n    html?: string;\n    css?: string;\n    index?: string;\n    code?: string;\n    title?: string;\n}\n\ndeclare global {\n    namespace JSX {\n        interface IntrinsicElements {\n            'code-sandbox': React.DetailedHTMLProps<IAttributes, CodeSandbox>\n        }\n    }\n}\n\nclass CodeSandbox extends HTMLElement {\n    public iframe: HTMLIFrameElement;\n    private styleElement: HTMLStyleElement;\n    public fs: FilesSystem = new FilesSystem();\n    private fsSyncServiceDispose: () => void = null;\n    private mainThreadServiceDispose: () => void = null;\n    public root: ShadowRoot = null;\n\n    constructor() {\n        super();\n        this.root = this.attachShadow({ mode: 'open' });\n        this.initIframe();\n    }\n\n    public addEventListener<K extends keyof (HTMLElementEventMap & { 'ready': unknown; 'loading-module': unknown; })>(type: K, listener, options?) {\n        super.addEventListener(type, listener, options);\n    }\n\n    public removeEventListener<K extends keyof (HTMLElementEventMap & { 'ready': unknown; 'loading-module': unknown; })>(type: K, listener, options?) {\n        super.removeEventListener(type, listener, options);\n    }\n\n    private initIframe() {\n        if (this.iframe) {\n            this.root.removeChild(this.iframe);\n        }\n        this.fsSyncServiceDispose?.();\n        this.mainThreadServiceDispose?.();\n\n        this.mainThreadServiceDispose = initMainThreadService();\n\n        const [srcDoc] = getIframeHTML();\n\n        this.iframe = document.createElement('iframe');\n        this.iframe.srcdoc = srcDoc;\n        this.iframe.setAttribute('title', this.iframe.getAttribute('title'));\n        this.iframe.setAttribute('sandbox', 'allow-scripts');\n        this.iframe.setAttribute('class', `code-sandbox-iframe ${this.getAttribute('class') || ''}`);\n        this.iframe.setAttribute('style', this.getAttribute('style'));\n\n        // 监听 iframe 内加载模块，并分发对象的事件\n        onIframeLoadingModule(this.iframe, (moduleName, extraInfo) => {\n            this.dispatchEvent(new CustomEvent('loading-module', {\n                detail: {\n                    moduleName,\n                    url: extraInfo\n                }\n            }));\n        });\n\n        this.styleElement = document.createElement('style');\n        this.styleElement.innerHTML = iframeStyles;\n\n        this.root.append(this.styleElement, this.iframe);\n        this.fsSyncServiceDispose = initMainFilesSyncCaller(this.fs, this.iframe);\n        setSandboxPlugins(this.iframe, getPlugins());\n        this.writeFile('html');\n        this.writeFile('css');\n        this.writeFile('code');\n        this.writeFile('index');\n    }\n\n    static get observedAttributes() {\n        return ['code', 'css', 'index', 'html', 'class', 'style'];\n    }\n\n    private async execute() {\n        await getSandboxRefresher({ iframe: this.iframe })();\n        this.dispatchEvent(new CustomEvent('ready'));\n    }\n\n    public async attributeChangedCallback(name: string, oldValue, newValue) {\n        if (['html', 'code', 'index', 'css'].includes(name)) {\n            // 等待 iframe 环境准备好之后再执行代码\n            waitIframeReady(this.iframe).then(() => {\n                this.writeFile(name);\n                this.execute();\n            });\n        }\n        else {\n            this.iframe.setAttribute(name, newValue);\n        }\n    }\n\n    public async refresh() {\n        this.initIframe();\n        await waitIframeReady(this.iframe);\n        return this.execute();\n    }\n\n    private async writeFile(name: string) {\n        await waitIframeReady(this.iframe);\n        const defaultCodes = {\n            html: [HTMLEntry, DefaultCodes.DefaultHtml],\n            code: [DefaultCodes.DefaultDemoFileName, DefaultCodes.DefaultDemoCode],\n            index: [JSEntry, DefaultCodes.DefaultIndexCode],\n            css: [StylesEntry, DefaultCodes.DefaultCssCode]\n        };\n        const [fileName, defaultCode] = defaultCodes[name];\n        this.fs.writeFile(fileName, this.getAttribute(name) || defaultCode);\n    }\n}\n\nexport { DefaultCodes, CodeSandbox, registerPlugins };\n"],"names":["pluginsId","path","traverse","DefaultCodes.DefaultHtml","DefaultCodes.DefaultDemoFileName","DefaultCodes.DefaultDemoCode","DefaultCodes.DefaultIndexCode","DefaultCodes.DefaultCssCode"],"mappings":"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"}