{"version":3,"file":"index.js","sources":["../../../src/core/amd/scriptLoader.ts","../../../src/core/amd/types.ts","../../../src/core/amd/define.ts","../../../src/core/amd/require.ts","../../../src/core/amd/index.ts"],"sourcesContent":["import { IAmdModuleManagerContext, IScriptLoader, IScriptLoadTask } from './types';\n\nexport default function bindScriptLoaderToCtx(ctx: IAmdModuleManagerContext) {\n    let loadingModuleName = '';\n    const scriptLoadingTasks: IScriptLoader['scriptLoadingTasks'] = [];\n    const loadScript = async (dom: HTMLElement, url: string, moduleName = 'globalObj') => {\n        // 由于有可能存在匿名模块，为了能区分开这些模块，一次只能加载一个脚本\n        if (loadingModuleName) {\n            await new Promise(resolve => {\n                (resolve as IScriptLoadTask).moduleName = moduleName;\n                scriptLoadingTasks.push(resolve as IScriptLoadTask);\n            });\n        }\n        return new Promise((resolve, reject) => {\n            const script = document.createElement('script');\n            // 设置一个超时时间\n            const timeout = setTimeout(() => {\n                    ctx.logger.log('[amd] script load timeout ' + moduleName);\n                    reject(new Error(`load module ${moduleName} timeout`));\n                    // 加载下一个脚本\n                    scriptLoadingTasks.shift()?.();\n                }, ctx.scriptTimeout);\n\n            script.onload = () => {\n                ctx.logger.log('[amd] script resolved', loadingModuleName);\n                clearTimeout(timeout);\n                resolve(null);\n                loadingModuleName = '';\n                // 加载下一个脚本\n                scriptLoadingTasks.shift()?.();\n            }\n\n            script.onerror = (err) => {\n                ctx.logger.log('[amd] script rejected', loadingModuleName);\n                clearTimeout(timeout);\n                reject(err);\n                loadingModuleName = '';\n                // 加载下一个脚本\n                scriptLoadingTasks.shift()?.();\n            }\n\n            script.crossOrigin = 'anonymous';\n            script.src = url;\n            script.type = 'text/javascript';\n\n            ctx.logger.log('[amd] start load script', moduleName);\n            loadingModuleName = moduleName;\n            dom.appendChild(script);\n        });\n    }\n\n    ctx.scriptLoader = {\n        getLoadingModuleName: () => loadingModuleName,\n        loadScript,\n        scriptLoadingTasks,\n    };\n}\n","import { createEventSubscribeManager } from \"../event\";\nimport { IPlugin } from \"../../plugins/types\";\nimport { FilesSystem } from \"../files-system\";\n\nexport interface IModule {\n    'default': any;\n    [key: string]: any;\n}\n\nexport type Factory = (...modules: unknown[]) => Promise<IModule>;\n\nexport interface IScriptLoadTask {\n    (...args: any): void;\n    moduleName: string;\n}\n\nexport interface IScriptLoader {\n    getLoadingModuleName: () => string;\n    scriptLoadingTasks: Array<IScriptLoadTask>;\n    loadScript: (dom: HTMLElement, url: string, moduleName?: string) => Promise<unknown>;\n}\n\nexport interface IRequireCtx {\n    __dirname: string;\n    deps?: string[];\n}\nexport type IRequireCallback = (modules: IModule | undefined | (IModule | undefined)[]) => void;\n\nexport interface IRequireFunc {\n    (names: string[] | string, cb?: IRequireCallback): Promise<IModule | undefined | (IModule | undefined)[]>;\n    cache: Map<string, IModule>;\n    factories: Map<string, Factory | string>;\n    dependencies: Map<string, string[]>;\n    resolve: (moduleName: string, __dirname?: string) => string;\n    moduleRequiringTasks: Map<string, [resolve: Function, reject: Function][]>;\n}\n\nexport interface IDefine {\n    (moduleName: string | Array<string> | Factory, dependencies_?: Factory | string | string[], factory?: Factory | string): IDefineDispose;\n    amd: any;\n}\n\nexport type IDefineDispose = () => void;\n\nexport interface IAmdModuleManagerContext {\n    fs: FilesSystem;\n    root: string;\n    scriptTimeout: number;\n    /**\n     * 事件触发\n     */\n    eventSubscribeManager: ReturnType<typeof createEventSubscribeManager<IEventTypes>>;\n    scriptLoader: IScriptLoader;\n    define: IDefine;\n    require: IRequireFunc;\n    logger: Pick<Console, 'log' | 'info' | 'debug' | 'error' | 'warn'>;\n    plugins: IPlugin[];\n    pluginReduce: <T=any>(reducer: (preValue: T, plugin: IPlugin) => Promise<{ result: T, break?: boolean; }>, initValue: T) => Promise<T>;\n}\n\nexport enum IEventTypes {\n    ModuleUpdate = 'module-update',\n    LoadingScript = 'loading-script',\n    ModuleDeps = 'module-deps',\n}\n","import { IAmdModuleManagerContext } from \"./types\";\nimport { IDefineDispose, IDefine, Factory, IEventTypes } from \"./types\";\n\nexport default function bindDefineToCtx(ctx: IAmdModuleManagerContext) {\n    function define(factory: Factory | string): IDefineDispose;\n    function define(dependencies_: string[], factory: Factory | string): IDefineDispose;\n    function define(moduleName: string, dependencies_: string[], factory: Factory | string): IDefineDispose;\n    function define(moduleName: string | Array<string> | Factory, dependencies_?: Factory | string | string[], factory?: Factory | string): IDefineDispose {\n        if (typeof moduleName === 'function') {\n            factory = moduleName;\n            dependencies_ = ['require', 'exports', 'module'];\n            moduleName = ctx.scriptLoader.getLoadingModuleName();\n        }\n        if (Array.isArray(moduleName)) {\n            factory = dependencies_ as (Factory | string);\n            dependencies_ = moduleName;\n            moduleName = ctx.scriptLoader.getLoadingModuleName();\n        }\n        ctx.logger.log('[amd] define module', moduleName, dependencies_);\n\n        const modulePath = ctx.require.resolve(moduleName);\n        const { factories, cache, dependencies } = ctx.require;\n\n        if (factories.has(modulePath)) {\n            factories.delete(modulePath);\n        }\n        if (cache.has(modulePath)) {\n            cache.delete(modulePath);\n        }\n        if (dependencies.has(modulePath)) {\n            dependencies.delete(modulePath);\n        }\n        // 通知该模块的更新\n        ctx.eventSubscribeManager.trigger(IEventTypes.ModuleUpdate, modulePath);\n        factories.set(modulePath, factory!);\n        dependencies.set(modulePath, dependencies_ as string[]);\n        return () => {\n            ctx.logger.log('[amd] module dispose', moduleName);\n            factories.delete(modulePath);\n        }\n    }\n\n    ctx.define = Object.assign(define, {\n        amd: {}\n    }) as IDefine;\n}\n","import path from 'path-browserify';\n\nimport { IAmdModuleManagerContext, IRequireCtx, IRequireFunc, IModule, IEventTypes } from \"./types\";\nimport { IFile } from \"../files-system/types\";\n\ntype PromiseRes<T> = T extends Promise<infer P> ? P : unknown;\n\nexport default function bindRequireToCtx (ctx: IAmdModuleManagerContext) {\n    const cache: IRequireFunc['cache'] = new Map();\n    const factories: IRequireFunc['factories'] = new Map();\n    const dependencies: IRequireFunc['dependencies'] = new Map();\n    const moduleRequiringTasks: IRequireFunc['moduleRequiringTasks'] = new Map();\n\n    const parseModuleName = function(moduleName: string): [string, string | undefined, string | undefined] {\n        const [, name, version, file] = moduleName.match(/(^@?[^/@]+)(?:@([^/]+))?(.*)/) || [];\n        return [name!, version, file];\n    }\n\n    const resolve: IRequireFunc['resolve'] = (moduleName, __filepath) => {\n        if (['require', 'module', 'exports'].includes(moduleName)) {\n            return moduleName;\n        }\n        if (path.isAbsolute(moduleName)) {\n            return moduleName;\n        }\n        if (moduleName.startsWith('.')) {\n            if (!__filepath) {\n                throw new Error(`[amd] can't not resolve relative path ${moduleName} without __dirname`);\n            }\n            return path.resolve(path.dirname(__filepath), moduleName);\n        }\n        if (moduleName.startsWith('/')) {\n            return path.resolve(ctx.root, moduleName);\n        }\n        const [modulePath] = parseModuleName(moduleName);\n        return path.resolve(ctx.root, 'node_modules', modulePath!);\n    };\n\n    const resolveDeps = async (_packageName: string, _version: string, _file: string) => {\n        const params = {\n            packageName: _packageName,\n            version: _version,\n            file: _file\n        };\n        // 调用插件的 resolveModuleUrl 钩子\n        const res = await ctx.pluginReduce(\n            async (preValue, plugin) => {\n                const res = await plugin.resolveModuleUrl(preValue as typeof params);\n                if (typeof res === 'string') {\n                    return {\n                        result: res as unknown as typeof preValue,\n                        break: true\n                    };\n                }\n                return { result: res as typeof preValue };\n            },\n            params as string | typeof params\n        );\n        return res as string;\n    };\n\n    const moduleFactory = async (moduleName: string, _this: IRequireCtx): Promise<IModule | undefined> => {\n        const modulePath = resolve(moduleName, _this.__dirname);\n\n        // 检查本模块是否有其他的 require 任务正在运行，如果有直接等待第一个任务的结果，避免重复生成模块\n        if (moduleRequiringTasks.has(modulePath)) {\n            return await new Promise((resolve, reject) => {\n                const tasks = moduleRequiringTasks.get(modulePath);\n                tasks!.push([resolve, reject]);\n                ctx.logger.log(`[amd] require ${moduleName}, already has task requiring, waiting tasks: ${tasks!.length}.`);\n            });\n        }\n        ctx.logger.log('[amd] start require', modulePath);\n        moduleRequiringTasks.set(modulePath, []);\n\n        // 加载到模块后调用这个函数\n        const clearAllTasks = (err: Error | undefined, module_?: IModule) => {\n            // resolve 掉在加载过程中又触发的其他加载请求\n            const tasks = moduleRequiringTasks.get(modulePath);\n            if (tasks?.length) {\n                tasks.forEach(([resolve, reject], index) => {\n                    ctx.logger.log('[amd] resolve item', index, moduleName);\n                    if (err) {\n                        reject(err);\n                    }\n                    resolve(module_!);\n                });\n            }\n            // 等到触发了其他任务的 resolve 后把 Error 抛出去\n            moduleRequiringTasks.delete(modulePath);\n            if (err) {\n                throw err;\n            }\n            return module_!;\n        }\n\n        // 检查缓存，如果缓存中有直接取缓存里的\n        if (cache.has(modulePath)) {\n            ctx.logger.log(`[amd] require ${moduleName}, resolved from cache`);\n            return clearAllTasks(undefined, cache.get(modulePath)!);\n        }\n\n        // 尝试获取模块的声明\n        let factory = factories.get(modulePath);\n        // 没有获取到的情况处理，会尝试自动解决依赖\n        if (!factory) {\n            // 对于不是本地模块的，尝试从远程加载模块\n            if (!moduleName.startsWith('.') && !path.isAbsolute(moduleName)) {\n                const [name, version, file] = parseModuleName(moduleName);\n                const scriptUrl = await resolveDeps(name, version, file);\n                // 分发加载模块的事件\n                ctx.eventSubscribeManager.trigger(IEventTypes.LoadingScript, moduleName, scriptUrl);\n                if (typeof scriptUrl === 'string') {\n                    await ctx.scriptLoader.loadScript(document.body, scriptUrl, moduleName);\n                    factory = factories.get(modulePath);\n                    ctx.logger.log('[amd] script loaded', factory, modulePath);\n                }\n            }\n            // 本地模块，尝试从 fs 里读取文件\n            else {\n                const [exist, file] = ctx.fs.pathReduce(modulePath);\n                if (exist && Reflect.has(file, 'content')) {\n                    const content = (file as IFile).content;\n                    factories.set(modulePath, content);\n                    factory = content;\n                }\n            }\n            // 加载完后，仍然没有模块声明的，抛出异常\n            if (!factory) {\n                const err = new Error(`[amd] module error: ${modulePath} does not exist.`);\n                return clearAllTasks(err);\n            }\n        }\n\n        // 记录模块所有的依赖\n        const moduleDeps: string[] = [];\n        const requireCtx = { __dirname: modulePath, deps: moduleDeps };\n        const require_ = getRequireFunc(requireCtx);\n        // 这是声明时预先给定的依赖\n        let depModuleNames = dependencies.get(modulePath);\n\n        // 拿到声明后，开始调用插件的钩子，修改模块的依赖信息或者声明\n        if (typeof factory === 'string') {\n            const { deps: _depModuleNames, factory: factory_ } = await ctx.pluginReduce(async (preValue, plugin) => {\n                const result = await plugin.beforeModuleGenerate(_this, preValue);\n                return { result: { ...result, name: moduleName } };\n            }, { name: moduleName, deps: depModuleNames, factory } as { name: string, deps?: string[]; factory: string; });\n            factory = factory_ as typeof factory;\n            depModuleNames = _depModuleNames;\n        }\n\n        // 拿到声明，开始生成模块，来一个 commonjs 三件套\n        const _exports = {};\n        const commonjs = {\n            require: require_,\n            module: { exports: _exports },\n            exports: _exports\n        };\n\n        // 先加载模块的依赖，特殊处理 commonjs 的三个依赖\n        let deps: IModule[] = [];\n        if (depModuleNames?.length) {\n            deps = await Promise.all(depModuleNames.map(depName => {\n                if (commonjs[depName]) return commonjs[depName];\n                return require_(depName);\n            }));\n        }\n\n        try {\n            // 执行 factory ，拿到模块\n            let exportsReturn: IModule;\n            if (typeof factory === 'string') {\n                // eslint-disable-next-line no-eval\n                exportsReturn = await eval(factory)(...deps);\n            }\n            else {\n                exportsReturn = await factory(...deps);\n            }\n\n            // 分发模块的依赖事件\n            ctx.eventSubscribeManager.trigger(IEventTypes.ModuleDeps, requireCtx);\n\n            // 先判断 exports 对象是否挂载了内容，如果没有就使用 factory 的返回值\n            const module_ = (() => {\n                if (Object.keys(commonjs.module.exports).length || typeof commonjs.module.exports !== 'object') {\n                    return commonjs.module.exports;\n                }\n                return exportsReturn;\n            })() as IModule;\n\n            cache.set(modulePath, module_);\n            ctx.logger.log('[amd] resolve module tasks head', modulePath, module_);\n            return clearAllTasks(undefined, module_);\n        } catch (err) {\n            return clearAllTasks(err as Error, undefined);\n        }\n    };\n\n    const getRequireFunc = (_this: IRequireCtx): IRequireFunc => {\n        return Object.assign(async (...args: Parameters<IRequireFunc>) => {\n            const [moduleNames_, cb] = args;\n\n            // 调用 插件 require 钩子，处理模块名称\n            const moduleNames = await ctx.pluginReduce(async (preValue, plugin) => {\n                return {\n                    result: await plugin.require(_this, preValue)\n                };\n            }, moduleNames_);\n\n            // 记录模块本次 require 的依赖\n            if (typeof moduleNames === 'string') {\n                _this.deps?.push(resolve(moduleNames, _this.__dirname));\n            }\n            else {\n                _this.deps?.push(...moduleNames.reduce((previousValue, currentValue) => {\n                    previousValue.push(resolve(currentValue, _this.__dirname));\n                    return previousValue;\n                },[]));\n            }\n\n            let modules: PromiseRes<ReturnType<IRequireFunc>>;\n            if (Array.isArray(moduleNames)) {\n                modules = await Promise.all(moduleNames.map(name => moduleFactory(name, _this)));\n            }\n            else {\n                modules = await moduleFactory(moduleNames, _this);\n            }\n            cb?.(modules);\n            return modules;\n        }, {\n            cache,\n            factories,\n            resolve,\n            dependencies,\n            moduleRequiringTasks,\n            resolveDeps\n        });\n    };\n\n    ctx.require = getRequireFunc({ __dirname: ctx.root });\n}\n","import bindScriptLoaderToCtx from './scriptLoader';\nimport bindDefineToCtx from \"./define\";\nimport bindRequireToCtx from \"./require\";\nimport {IAmdModuleManagerContext, IEventTypes, IRequireCtx} from './types';\nimport { createEventSubscribeManager } from \"../event\";\nimport { Factory } from \"./types\";\nimport { IPlugin } from \"../../plugins/types\";\nimport { FilesSystem } from \"../files-system\";\n\nexport function createAmdManager(fs: FilesSystem,root='/', scriptTimeout=10000, logger: IAmdModuleManagerContext['logger'] = console) {\n    const ctx = {} as IAmdModuleManagerContext;\n    ctx.eventSubscribeManager = createEventSubscribeManager();\n    ctx.fs = fs;\n    ctx.root = root;\n    ctx.scriptTimeout = scriptTimeout;\n    ctx.logger = logger;\n\n    ctx.plugins = [];\n    // 遍历插件的方法\n    ctx.pluginReduce = async (reducer, initValue) => {\n        let result: any = initValue;\n        for (const plugin of ctx.plugins) {\n            console.log('run plugin', plugin);\n            const { result: res, break: break_ } = await reducer(result, plugin);\n            if (break_) {\n                return res;\n            }\n            result = res;\n        }\n        return result;\n    };\n\n    bindRequireToCtx(ctx);\n    bindDefineToCtx(ctx);\n    bindScriptLoaderToCtx(ctx);\n\n    function importGlobalObjectScript(target: HTMLElement, url: string, name: string): Factory {\n        // 返回一个导入脚本的异步函数作为模块的声明\n        return async (_require) => {\n            await ctx.scriptLoader.loadScript(target, url);\n            return {\n                'default': Reflect.get(window, name),\n                ...Reflect.get(window, name)\n            };\n        };\n    }\n\n    const module_ = {\n        require_: ctx.require,\n        define: ctx.define,\n        _import: importGlobalObjectScript.bind(null, document.body),\n        onModuleUpdate(targets: string[] | undefined, cb: (moduleNames: string[]) => void) {\n            return ctx.eventSubscribeManager.listen(IEventTypes.ModuleUpdate, (moduleName) => {\n                if(!targets || targets.includes(moduleName as string)) {\n                    cb([moduleName as string]);\n                }\n            });\n        },\n        onModuleLoading(cb: (moduleName: string, url: string) => void) {\n            return ctx.eventSubscribeManager.listen(IEventTypes.LoadingScript, (moduleName, url) => {\n                cb(moduleName as string, url as string);\n            });\n        },\n        onModuleDeps(cb: (from: string[], to: string) => void) {\n            return ctx.eventSubscribeManager.listen(IEventTypes.ModuleDeps, (_this: IRequireCtx) => {\n                if (!_this.deps) {\n                    debugger;\n                }\n                cb(_this.deps || [], _this.__dirname);\n            });\n        },\n        mountToGlobal(global_ = window) {\n            const currentDefine = Reflect.get(global_, 'define');\n            const currentRequire = Reflect.get(global_, 'require');\n\n            Reflect.set(global_, 'define', ctx.define);\n            Reflect.set(global_, 'require', ctx.require);\n\n            return () => {\n                Reflect.set(global_, 'define', currentDefine);\n                Reflect.set(global_, 'require', currentRequire);\n            };\n        },\n        setPlugins(plugins: IPlugin[]) {\n            ctx.plugins = plugins;\n        }\n    };\n\n    return module_;\n}\n\nexport type IAmdManager = ReturnType<typeof createAmdManager>;\n"],"names":["ctx","moduleName","resolve","IEventTypes","factory","modulePath","factories","cache","dependencies","path","res","module_","_this"],"mappings":"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"}