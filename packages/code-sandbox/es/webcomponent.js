import { createEventSubscribeManager } from "./core/event/index.js";
import { registerProxy, callProxy, waitProxy } from "./core/proxy/index.js";
import { B as BasePlugin } from "./types-9fd137f3.js";
import { p as pathBrowserify } from "./index-a3b3cc38.js";
const NOTIFICATION_SERVICE = "iframe-notification-service";
const emitter = createEventSubscribeManager();
const initMainThreadService = () => {
  const service = {
    iframeReady: async (e) => {
      emitter.trigger("iframeReady", e);
      return true;
    },
    iframeLoadingModule: async (moduleName, moduleUrl, e) => {
      emitter.trigger("iframeLoadingModule", moduleName, moduleUrl, e);
    }
  };
  return registerProxy(NOTIFICATION_SERVICE, service);
};
const waitIframeReady = async (iframe, timeout = 1e4) => {
  const listenTask = new Promise((resolve, reject) => {
    if (iframe.getAttribute("data-iframe-status") !== "ready") {
      emitter.once(
        "iframeReady",
        (...args) => {
          iframe.setAttribute("data-iframe-status", "ready");
          resolve(null);
        },
        (e) => e.source === iframe.contentWindow,
        reject,
        timeout
      );
    } else {
      resolve(null);
    }
  });
  const queryTask = async () => {
    await new Promise((resolve) => {
      const onload = () => {
        iframe.setAttribute("data-iframe-status", "loaded");
        resolve(null);
        iframe.removeEventListener("load", onload);
      };
      iframe.addEventListener("load", onload);
    });
    await callProxy({
      win: iframe.contentWindow,
      serviceId: NOTIFICATION_SERVICE,
      method: "iframeReady",
      payload: [],
      timeout
    });
  };
  return Promise.race([listenTask, queryTask()]);
};
const onIframeLoadingModule = (iframe, cb) => {
  emitter.listen("iframeLoadingModule", cb, (moduleName, extraInfo, e) => e.source === iframe.contentWindow);
};
const DemoServiceName = "demo-service";
const iframeScriptUrl = "data:application/javascript;base64,";
const iframeStyles_ = ".code-sandbox-iframe {\n    border-width: 0;\n    width: 100%;\n    height: 100%;\n}\n";
const getIframeHTML = () => {
  const srcDoc = `<html lang="en">
    <head>
        <title>Demo Sandbox</title>
        <script type="module" src="${iframeScriptUrl}"><\/script>
    </head>
    <body></body>
</html>`;
  return [srcDoc];
};
const iframeStyles = iframeStyles_;
const JSEntry = "/index.js";
const StylesEntry = "/styles.css";
const HTMLEntry = "/index.html";
const getSandboxRefresher = (opt) => {
  const iframe = opt.iframe;
  return async () => {
    if (!iframe)
      return;
    await waitIframeReady(iframe);
    await waitProxy(iframe.contentWindow, DemoServiceName);
    await callProxy({
      win: iframe.contentWindow,
      serviceId: DemoServiceName,
      method: "run",
      payload: [JSEntry, HTMLEntry, StylesEntry]
    });
  };
};
const setSandboxPlugins = async (iframe, pluginsId2) => {
  await waitIframeReady(iframe);
  await waitProxy(iframe.contentWindow, DemoServiceName);
  return await callProxy({
    win: iframe.contentWindow,
    serviceId: DemoServiceName,
    method: "setPlugins",
    payload: [pluginsId2]
  });
};
const DefaultDemoFileName = "/Demo.js";
const DefaultDemoCode = `// ⚠️require function is asynchronous !
const React = await require('react');

// if you register \`EsmToAmdPlugin\`, following statements will be support
// import React from 'react';

const App = () => {
    // if you register \`JsxPlugin\`, jsx can be used.
    // return <div>hello world</div>;
    return (
        React.createElement(
            'div',
            {},
            React.createElement(
                'div',
                {
                    className: 'title'
                },
                'DemoSandbox'
            ),
            'welcome to use code sandbox'
        )
    );
};

module.exports.default = App
// if you register \`EsmToAmdPlugin\`, following statements will be support
// export default App;`;
const DefaultIndexCode = `const React = await require('react');
const ReactDom = await require('react-dom');
const App = (await require('./Demo.js')).default;

// if you register \`EsmToAmdPlugin\`, following statements will be support
// import React from 'react';
// import ReactDom from 'react-dom';
// import App from './App';

ReactDom.render(React.createElement(App, {}), document.getElementById('root'));`;
const DefaultHtml = `<noscript>Need javascript to run this demo page.</noscript>
<div id="root">
    <h3> 🚀 Welcome to use code sandbox. </h3>
</div>`;
const DefaultCssCode = `.title { color: blue }`;
const _default = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  DefaultCssCode,
  DefaultDemoCode,
  DefaultDemoFileName,
  DefaultHtml,
  DefaultIndexCode
}, Symbol.toStringTag, { value: "Module" }));
let pluginsId = [];
class DefaultPlugin extends BasePlugin {
  constructor() {
    super();
    this.pluginId = "default-plugin";
  }
  async resolveModuleUrl(meta) {
    const { packageName, version, file } = meta;
    const versionSuffix = version ? `@${version}` : "";
    const fileSuffix = file ? `${file}` : "";
    return `https://unpkg.com/${packageName}${versionSuffix}${fileSuffix}`;
  }
  async beforeModuleGenerate(ctx, meta) {
    meta.factory = `async (require, exports, module) => {
${meta.factory}
}`;
    meta.deps = ["require", "exports", "module"];
    return meta;
  }
}
const registerPlugins = (_plugins) => {
  const plugins = _plugins.concat(new DefaultPlugin());
  plugins.forEach((plugin) => {
    registerProxy(plugin.pluginId, plugin);
  });
  pluginsId = plugins.map((plugin) => plugin.pluginId);
  return pluginsId;
};
const getPlugins = () => {
  return pluginsId;
};
const getPathFileName = (pathObject) => `${pathObject.name}${pathObject.ext}`;
const traverse = (dir = "", directory, cb) => {
  directory.children.forEach((item) => {
    if (Reflect.has(item, "children")) {
      traverse(`${pathBrowserify}/${item.name}`, item, cb);
      return;
    }
    cb(`${pathBrowserify}/${item.name}`, item);
  });
};
class FilesSystem {
  constructor() {
    this.root = {
      name: "",
      children: this.getProxyMap("", [])
    };
    this.eventCount = 0;
    this.event = createEventSubscribeManager();
    this.cp = this.cpOrMv.bind(this, false);
    this.mv = this.cpOrMv.bind(this, true);
  }
  getProxyMap(path2, entries) {
    const _this = this;
    const map = new Map(entries);
    const proxyMethod = (methodName, eventName) => {
      const _method = Reflect.get(map, methodName);
      if (typeof _method === "function") {
        const method = function(...args) {
          _this.event.trigger(eventName, _this.eventCount++, path2, ...args);
          return _method.call(map, ...args);
        };
        Reflect.set(map, methodName, method);
      }
    };
    proxyMethod("set", "dir-set");
    proxyMethod("delete", "dir-delete");
    proxyMethod("clear", "dir-clear");
    return map;
  }
  pathReduce(target) {
    const paths = target.split(pathBrowserify.sep);
    return paths.reduce(([status, dir], cur, index, arr) => {
      var _a, _b;
      if (index === 0) {
        return [status, dir];
      }
      if (index === arr.length - 1 && cur === "") {
        return [status, dir];
      }
      return [status && ((_a = dir.children) == null ? void 0 : _a.has(cur)), (_b = dir.children) == null ? void 0 : _b.get(cur)];
    }, [true, this.root]);
  }
  exist(target) {
    const [exist] = this.pathReduce(target);
    return exist;
  }
  mkdir(target) {
    const pathObject = pathBrowserify.parse(target);
    if (this.exist(target)) {
      throw new Error(`[fs] failed to mkdir ${target}, it is already existed.`);
    }
    const [parentExist, parent] = this.pathReduce(pathObject.dir);
    if (!parentExist) {
      throw new Error(`[fs] failed to mkdir ${target}, parent path ${pathObject.dir} is not existed.`);
    }
    if (!Reflect.has(parent, "children") || Reflect.has(parent, "content")) {
      throw new Error(`[fs] failed to mkdir ${target}, parent path ${pathObject.dir} is not a directory.`);
    }
    parent.children.set(getPathFileName(pathObject), {
      name: getPathFileName(pathObject),
      children: this.getProxyMap(pathBrowserify.format(pathObject), [])
    });
  }
  readDirectory(target) {
    const pathObject = pathBrowserify.parse(target);
    const [parentExist, parent] = this.pathReduce(pathObject.dir);
    if (!parentExist) {
      throw new Error(`[fs] failed to read directory ${target}, parent path ${pathObject.dir} is not existed.`);
    }
    return parent.children.get(getPathFileName(pathObject));
  }
  readFile(target) {
    const [exist, file] = this.pathReduce(target);
    if (!exist) {
      throw new Error(`[fs] failed to read file ${target}, it is not existed.`);
    }
    if (Reflect.has(file, "children")) {
      throw new Error(`[fs] failed to read file ${target}, it is a directory.`);
    }
    return file;
  }
  writeFile(target, contents) {
    const pathObject = pathBrowserify.parse(target);
    const [parentExist, parent] = this.pathReduce(pathObject.dir);
    if (!parentExist) {
      throw new Error(`[fs] failed to write file ${target}, parent path ${pathObject.dir} is not existed.`);
    }
    let writeContent = contents;
    if (typeof contents !== "string") {
      writeContent = btoa(String.fromCharCode.apply(null, new Uint8Array(contents)));
    }
    const existBefore = parent.children.has(getPathFileName(pathObject));
    parent.children.set(getPathFileName(pathObject), {
      name: getPathFileName(pathObject),
      content: writeContent
    });
    this.event.trigger("files-change", this.eventCount++, existBefore ? "change" : "new", [target]);
  }
  cpOrMv(isMv = false, source, target) {
    const sourcePathObject = pathBrowserify.parse(source);
    const targetPathObject = pathBrowserify.parse(target);
    const [sourceParentExist, sourceParent] = this.pathReduce(sourcePathObject.dir);
    const [targetParentExist, targetParent] = this.pathReduce(targetPathObject.dir);
    if (!sourceParentExist || !targetParentExist) {
      throw new Error(`[fs] failed to ${isMv ? "mv" : "cp"} ${source} to ${target}, source or target path is not existed.`);
    }
    if (targetParent.children.has(getPathFileName(targetPathObject))) {
      throw new Error(`[fs] failed to ${isMv ? "mv" : "cp"} ${source} to ${target}, target path is already existed.`);
    }
    targetParent.children.set(getPathFileName(targetPathObject), sourceParent.children.get(getPathFileName(sourcePathObject)));
    const sourceFileOrDirectory = sourceParent.children.get(source);
    const deletedFiles = [];
    const newFiles = [];
    if (Reflect.has(sourceFileOrDirectory, "content")) {
      deletedFiles.push(source);
      newFiles.push(target);
    } else {
      traverse(void 0, sourceFileOrDirectory, (path_) => {
        deletedFiles.push(pathBrowserify.join(sourcePathObject.dir, path_));
        newFiles.push(pathBrowserify.join(targetPathObject.dir, path_));
      });
    }
    if (isMv) {
      sourceParent.children.delete(getPathFileName(sourcePathObject));
      this.event.trigger("files-change", this.eventCount++, "delete", deletedFiles);
    }
    this.event.trigger("files-change", this.eventCount++, "new", newFiles);
  }
  rm(target) {
    const pathObject = pathBrowserify.parse(target);
    const [parentExist, parent] = this.pathReduce(pathObject.dir);
    if (!parentExist || !parent.children.has(getPathFileName(pathObject))) {
      throw new Error(`[fs] failed to rm ${target}, it is not existed.`);
    }
    const targetFileOrDirectory = parent.children.get(target);
    const deletedFiles = [];
    if (Reflect.has(targetFileOrDirectory, "content")) {
      deletedFiles.push(target);
    } else {
      traverse(void 0, targetFileOrDirectory, (path_) => {
        deletedFiles.push(pathBrowserify.join(pathObject.dir, path_));
      });
    }
    parent.children.delete(getPathFileName(pathObject));
    this.event.trigger("files-change", this.eventCount++, "delete", deletedFiles);
  }
  /**
   * 序列化内部存储的所有数据
   */
  getDataPayload() {
    return JSON.stringify(this.root, (key, value) => {
      if (value instanceof Map) {
        return {
          __dataType: "Map",
          entries: Array.from(value.entries())
        };
      }
      return value;
    });
  }
  /**
   * 触发将文件对象存储的数据传输到远端的事件
   */
  transfer() {
    const payload = this.getDataPayload();
    this.event.trigger("transfer", this.eventCount++, "", payload);
  }
  /**
   * 接收外部设置的数据
   * @param payload 底层数据
   */
  receive(payload) {
    const traverse2 = (obj, path2 = "") => {
      if (obj.children && Reflect.get(obj.children, "__dataType") === "Map") {
        const entries = obj.children.entries.map(([key, value]) => [key, traverse2(value, [path2, key].join("/"))]);
        return {
          ...obj,
          children: this.getProxyMap(path2, entries)
        };
      }
      return obj;
    };
    const root = traverse2(JSON.parse(payload));
    this.root = root;
    console.log("this.root", root);
    this.event.trigger("receive", this.eventCount++);
  }
}
const SyncServiceName = "code-sandbox-sync-files";
function initMainFilesSyncCaller(fs, iframe) {
  const onEvent = (eventType) => {
    return fs.event.listen(eventType, async (...args) => {
      await waitIframeReady(iframe);
      await waitProxy(iframe.contentWindow, SyncServiceName);
      await callProxy({
        win: iframe.contentWindow,
        serviceId: SyncServiceName,
        method: "sync",
        payload: [eventType, ...args]
      });
    });
  };
  const disposes = [];
  disposes.push(onEvent("transfer"));
  disposes.push(onEvent("dir-delete"));
  disposes.push(onEvent("dir-set"));
  disposes.push(onEvent("dir-clear"));
  disposes.push(onEvent("files-change"));
  disposes.push(registerProxy(SyncServiceName, {
    requestFs: async () => {
      return fs.getDataPayload();
    }
  }));
  return () => {
    disposes.forEach((dispose) => dispose());
  };
}
class CodeSandbox extends HTMLElement {
  constructor() {
    super();
    this.fs = new FilesSystem();
    this.fsSyncServiceDispose = null;
    this.mainThreadServiceDispose = null;
    this.root = null;
    this.root = this.attachShadow({ mode: "open" });
    this.initIframe();
  }
  addEventListener(type, listener, options) {
    super.addEventListener(type, listener, options);
  }
  removeEventListener(type, listener, options) {
    super.removeEventListener(type, listener, options);
  }
  initIframe() {
    var _a, _b;
    if (this.iframe) {
      this.root.removeChild(this.iframe);
    }
    (_a = this.fsSyncServiceDispose) == null ? void 0 : _a.call(this);
    (_b = this.mainThreadServiceDispose) == null ? void 0 : _b.call(this);
    this.mainThreadServiceDispose = initMainThreadService();
    const [srcDoc] = getIframeHTML();
    this.iframe = document.createElement("iframe");
    this.iframe.srcdoc = srcDoc;
    this.iframe.setAttribute("title", this.iframe.getAttribute("title"));
    this.iframe.setAttribute("sandbox", "allow-scripts");
    this.iframe.setAttribute("class", `code-sandbox-iframe ${this.getAttribute("class") || ""}`);
    this.iframe.setAttribute("style", this.getAttribute("style"));
    onIframeLoadingModule(this.iframe, (moduleName, extraInfo) => {
      this.dispatchEvent(new CustomEvent("loading-module", {
        detail: {
          moduleName,
          url: extraInfo
        }
      }));
    });
    this.styleElement = document.createElement("style");
    this.styleElement.innerHTML = iframeStyles;
    this.root.append(this.styleElement, this.iframe);
    this.fsSyncServiceDispose = initMainFilesSyncCaller(this.fs, this.iframe);
    setSandboxPlugins(this.iframe, getPlugins());
    this.writeFile("html");
    this.writeFile("css");
    this.writeFile("code");
    this.writeFile("index");
  }
  static get observedAttributes() {
    return ["code", "css", "index", "html", "class", "style"];
  }
  async execute() {
    await getSandboxRefresher({ iframe: this.iframe })();
    this.dispatchEvent(new CustomEvent("ready"));
  }
  async attributeChangedCallback(name, oldValue, newValue) {
    if (["html", "code", "index", "css"].includes(name)) {
      waitIframeReady(this.iframe).then(() => {
        this.writeFile(name);
        this.execute();
      });
    } else {
      this.iframe.setAttribute(name, newValue);
    }
  }
  async refresh() {
    this.initIframe();
    await waitIframeReady(this.iframe);
    return this.execute();
  }
  async writeFile(name) {
    await waitIframeReady(this.iframe);
    const defaultCodes = {
      html: [HTMLEntry, DefaultHtml],
      code: [DefaultDemoFileName, DefaultDemoCode],
      index: [JSEntry, DefaultIndexCode],
      css: [StylesEntry, DefaultCssCode]
    };
    const [fileName, defaultCode] = defaultCodes[name];
    this.fs.writeFile(fileName, this.getAttribute(name) || defaultCode);
  }
}
export {
  CodeSandbox,
  _default as DefaultCodes,
  registerPlugins
};
//# sourceMappingURL=webcomponent.js.map
