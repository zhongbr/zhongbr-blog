{"version":3,"file":"index-bbd22918.js","sources":["../src/utils/iframe.ts","../src/type.ts","../.cache/iframe/iframe.js?url","../src/iframe/iframe.css?used&raw","../src/iframe/html.ts","../src/iframe/index.ts","../src/default.ts","../src/plugins/index.ts"],"sourcesContent":["import { createEventSubscribeManager } from '../core/event';\nimport { callProxy, registerProxy } from '../core/proxy';\n\nconst EVENT_KEY = 'iframe-message-type';\nconst NOTIFICATION_SERVICE = 'iframe-notification-service';\n\ninterface INotificationService {\n    /** iframe 加载完成 */\n    iframeReady: (e: MessageEvent) => Promise<boolean>;\n    iframeLoadingModule: (moduleName: string, moduleUrl: string, e: MessageEvent) => Promise<void>;\n}\n\nconst emitter = createEventSubscribeManager<keyof INotificationService>();\n\n/**\n * 注册主进程中的服务，监听消息\n */\nexport const initMainThreadService = async () => {\n    const service: INotificationService = {\n        iframeReady: async (e) => {\n            console.log('iframe ready', e);\n            emitter.trigger('iframeReady', e);\n            return true;\n        },\n        iframeLoadingModule: async (moduleName, moduleUrl, e) => {\n            emitter.trigger('iframeLoadingModule', moduleName, moduleUrl, e);\n        }\n    }\n    registerProxy(NOTIFICATION_SERVICE, service);\n};\n\n/**\n * 主页面中，等待指定的 iframe 运行环境加载完成\n * @param iframe 要等待的 iframe\n * @param timeout 超时时间\n */\nexport const waitIframeReady = async (iframe: HTMLIFrameElement, timeout=10000) => {\n    // 被动监听 iframe 发送的消息来得知 iframe 已经加载，避免调用时 iframe 端还未准备好而导致的消息丢失\n    const listenTask = new Promise<null>((resolve, reject) => {\n        if (iframe.getAttribute('data-iframe-status') !== 'loaded') {\n            emitter.once(\n                'iframeReady',\n                (...args) => {\n                    iframe.setAttribute('data-iframe-status', 'loaded');\n                    resolve(null);\n                },\n                (e: MessageEvent) => e.source === iframe.contentWindow,\n                reject,\n                timeout\n            );\n        }\n        else {\n            resolve(null);\n        }\n    });\n    // 主动调用 iframe 暴露的接口查询是否准备好\n    const queryTask = callProxy<Pick<INotificationService, 'iframeReady'>>({\n        win: iframe.contentWindow,\n        serviceId: NOTIFICATION_SERVICE,\n        method: 'iframeReady',\n        payload: [],\n        timeout\n    });\n    // 两个查询方式 race，取返回快的结果\n    return Promise.race([listenTask, queryTask]);\n}\n\n/**\n * 通知外部容器，iframe 内部已经加载完成的函数\n */\nexport const iframeReady = async () => {\n    registerProxy<Pick<INotificationService, 'iframeReady'>>(NOTIFICATION_SERVICE, {\n        iframeReady: async () => {\n            return true;\n        }\n    });\n    const parent = window.top || window.parent || window.opener;\n    if (!parent) return;\n    return callProxy<INotificationService>({\n        win: parent,\n        serviceId: NOTIFICATION_SERVICE,\n        method: 'iframeReady',\n        payload: []\n    });\n}\n\n/**\n * 监听指定的 iframe 内加载模块\n * @param iframe 要监听的 iframe\n * @param cb 回调函数\n */\nexport const onIframeLoadingModule = (iframe: HTMLIFrameElement, cb: (moduleName: string, extraInfo: string) => void) => {\n    emitter.listen('iframeLoadingModule', cb, (moduleName, extraInfo, e: MessageEvent) => e.source === iframe.contentWindow);\n};\n\n/**\n * 通知外部容器，iframe 内部正在加载模块的函数\n * @param moduleName\n * @param extraInfo\n */\nexport const iframeLoadingModule = async (moduleName: string, extraInfo: string) => {\n    const parent = window.top || window.parent || window.opener;\n    if (!parent) return;\n    return callProxy<INotificationService>({\n        win: parent,\n        serviceId: NOTIFICATION_SERVICE,\n        method: 'iframeLoadingModule',\n        payload: [moduleName, extraInfo]\n    });\n};\n","export const DemoServiceName = 'demo-service';\n\n\nexport interface IDemoService {\n    defineModule: (name: string, deps: string[], factory: string) => Promise<boolean>;\n    executeModule: (name: string) => Promise<boolean>;\n    setStyle: (name: string) => Promise<boolean>;\n    setPlugins: (pluginsId: string[]) => Promise<void>;\n    setBodyHtml: (html: string) => Promise<void>;\n}\n","export default \"data:application/javascript;base64,\"","export default \".code-sandbox-iframe {\\n    border-width: 0;\\n    background-color: #ffffff;\\n}\\n\"","import iframeScriptUrl from '@/iframe/iframe?url';\nimport iframeStyles_ from './iframe.css?raw';\n\nexport const getIframeHTML = () => {\n    const srcDoc =\n`<html lang=\"en\">\n    <head>\n        <title>Demo Sandbox</title>\n        <script type=\"module\" src=\"${iframeScriptUrl}\"></script>\n    </head>\n    <body></body>\n</html>`;\n    const src = `data:text/html,${encodeURIComponent(srcDoc)}`;\n    return [srcDoc, src];\n};\n\nexport const iframeStyles: string = iframeStyles_;\n","import { waitIframeReady } from \"../utils/iframe\";\nimport { callProxy, waitProxy } from \"../core/proxy\";\nimport { DemoServiceName, IDemoService } from \"../type\";\n\nexport interface IOptions {\n    iframe: HTMLIFrameElement | null;\n    index?: string;\n    code?: string;\n    html?: string;\n    css?: string;\n    className?: string;\n    style?: string;\n}\n\nexport const getSandboxRefresher = (opt: IOptions) => {\n    const { iframe, code, index, html, css, className, style } = opt;\n\n    /**\n     * 定义并运行一个模块\n     * @param name 模块的名称/路径\n     * @param deps 模块的依赖\n     * @param code 模块的代码\n     */\n    const defineAndRunModule = async (name: string, deps: string[], code: string) => {\n        if (!iframe || !code) return;\n        // 等待 demo iframe 提供的服务准备好\n        await waitIframeReady(iframe);\n        await waitProxy(iframe.contentWindow, DemoServiceName);\n        // 调用 iframe 提供的服务\n        await callProxy<IDemoService, 'defineModule'>({\n            win: iframe.contentWindow,\n            serviceId: DemoServiceName,\n            method: 'defineModule',\n            payload: [name, deps, code]\n        });\n        await callProxy<IDemoService, 'executeModule'>({\n            win: iframe.contentWindow,\n            serviceId: DemoServiceName,\n            method: 'executeModule',\n            payload: [name]\n        });\n    };\n\n    const refreshIndex = async () => {\n        await defineAndRunModule('/index', ['require'], index);\n    }\n\n    const refreshApp = async () => {\n        await defineAndRunModule('/App', ['require'], code);\n        await refreshIndex();\n    }\n\n    const refreshHtml = async () => {\n        // 等待 demo iframe 提供的服务准备好\n        await waitIframeReady(iframe);\n        await waitProxy(iframe.contentWindow, DemoServiceName);\n        await callProxy<IDemoService>({\n            win: iframe.contentWindow,\n            serviceId: DemoServiceName,\n            method: 'setBodyHtml',\n            payload: [html]\n        });\n        await refreshApp();\n    }\n\n    const refreshStyle = async () => {\n        if (!iframe || !css) return;\n        await waitIframeReady(iframe);\n        await waitProxy(iframe.contentWindow, DemoServiceName);\n        await callProxy<IDemoService, 'setStyle'>({\n            win: iframe.contentWindow,\n            serviceId: DemoServiceName,\n            method: 'setStyle',\n            payload: [css]\n        });\n    };\n\n    return { refreshApp, refreshIndex, refreshHtml, refreshStyle };\n};\nexport { getIframeHTML, iframeStyles } from './html';\n\nexport const setSandboxPlugins = async (iframe: HTMLIFrameElement | null, pluginsId: string[]) => {\n    await waitIframeReady(iframe);\n    await waitProxy(iframe.contentWindow, DemoServiceName);\n    return await callProxy<IDemoService>({\n        win: iframe.contentWindow,\n        serviceId: DemoServiceName,\n        method: 'setPlugins',\n        payload: [pluginsId]\n    });\n};\n","export const DefaultDemoCode =\n`// ⚠️require function is asynchronous !\n// const React = await require('react');\nimport React from 'react';\n\nconst App = () => {\n    return (\n        React.createElement(\n            'div',\n            {},\n            React.createElement(\n                'div',\n                {\n                    className: 'title'\n                },\n                'DemoSandbox'\n            ),\n            'welcome to use code sandbox'\n        )\n    );\n};\n\nmodule.exports = App`;\n\nexport const DefaultIndexCode =\n`const React = await require('react');\nconst ReactDom = await require('react-dom');\nconst App = await require('./App');\n\nReactDom.render(React.createElement(App, {}), document.getElementById('root'));`;\n\nexport const DefaultHtml =\n`<noscript>Need javascript to run this demo page.</noscript>\n<div id=\"root\">\n    <h3> 🚀 Welcome to use code sandbox. </h3>\n</div>`;\n\nexport const DefaultCssCode =\n`.title { color: blue }`;\n","import { registerProxy } from '../core/proxy';\nimport { BasePlugin, IPlugin } from './types';\n\nlet pluginsId: string[] = [];\n\n/**\n * 默认的兜底插件\n */\nexport class DefaultPlugin extends BasePlugin {\n    constructor() {\n        super();\n        this.pluginId = 'default-plugin';\n    }\n\n    async resolveModuleUrl(meta) {\n        const { packageName, version, file } = meta;\n        const versionSuffix = version ? `@${version}` : '';\n        const fileSuffix = file ? `${file}` : '';\n        // `return false` to cancel auto require deps.\n        return `https://unpkg.com/${packageName}${versionSuffix}${fileSuffix}`;\n    }\n\n    async beforeModuleGenerate(ctx, meta) {\n        // 把代码段包装为函数\n        meta.factory = `async (require, exports, module) => {\\n${meta.factory}\\n}`;\n        meta.deps = ['require', 'exports', 'module'];\n        return meta;\n    }\n}\n\nexport const registerPlugins = (_plugins: IPlugin[]) => {\n    const plugins = _plugins.concat(new DefaultPlugin());\n    plugins.forEach(plugin => {\n        registerProxy(plugin.pluginId, plugin);\n    });\n    pluginsId = plugins.map(plugin => plugin.pluginId);\n    return pluginsId;\n};\n\nexport const getPlugins = () => {\n    return pluginsId;\n}\n"],"names":["code","pluginsId"],"mappings":"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"}