!function(I,g){"object"==typeof exports&&"undefined"!=typeof module?g(exports,require("react")):"function"==typeof define&&define.amd?define(["exports","react"],g):g((I="undefined"!=typeof globalThis?globalThis:I||self).CodeSandbox={},I.React)}(this,(function(I,g){"use strict";var C,A={},l={};var e,c,o={};
/**
   * @license React
   * react-jsx-runtime.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */function i(){return e||(e=1,"production"!==process.env.NODE_ENV&&function(){var I=g,C=Symbol.for("react.element"),A=Symbol.for("react.portal"),l=Symbol.for("react.fragment"),e=Symbol.for("react.strict_mode"),c=Symbol.for("react.profiler"),i=Symbol.for("react.provider"),Z=Symbol.for("react.context"),s=Symbol.for("react.forward_ref"),b=Symbol.for("react.suspense"),t=Symbol.for("react.suspense_list"),n=Symbol.for("react.memo"),d=Symbol.for("react.lazy"),a=Symbol.for("react.offscreen"),G=Symbol.iterator;var m=I.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;function r(I){for(var g=arguments.length,C=new Array(g>1?g-1:0),A=1;A<g;A++)C[A-1]=arguments[A];y("error",I,C)}function y(I,g,C){var A=m.ReactDebugCurrentFrame.getStackAddendum();""!==A&&(g+="%s",C=C.concat([A]));var l=C.map((function(I){return String(I)}));l.unshift("Warning: "+g),Function.prototype.apply.call(console[I],console,l)}var W;function B(I){return I.displayName||"Context"}function u(I){if(null==I)return null;if("number"==typeof I.tag&&r("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue."),"function"==typeof I)return I.displayName||I.name||null;if("string"==typeof I)return I;switch(I){case l:return"Fragment";case A:return"Portal";case c:return"Profiler";case e:return"StrictMode";case b:return"Suspense";case t:return"SuspenseList"}if("object"==typeof I)switch(I.$$typeof){case Z:return B(I)+".Consumer";case i:return B(I._context)+".Provider";case s:return function(I,g,C){var A=I.displayName;if(A)return A;var l=g.displayName||g.name||"";return""!==l?C+"("+l+")":C}(I,I.render,"ForwardRef");case n:var g=I.displayName||null;return null!==g?g:u(I.type)||"Memo";case d:var C=I,o=C._payload,a=C._init;try{return u(a(o))}catch(G){return null}}return null}W=Symbol.for("react.module.reference");var V,p,Y,X,h,H,K,R=Object.assign,w=0;function f(){}f.__reactDisabledLog=!0;var N,S=m.ReactCurrentDispatcher;function F(I,g,C){if(void 0===N)try{throw Error()}catch(l){var A=l.stack.trim().match(/\n( *(at )?)/);N=A&&A[1]||""}return"\n"+N+I}var v,k=!1,J="function"==typeof WeakMap?WeakMap:Map;function T(I,g){if(!I||k)return"";var C,A=v.get(I);if(void 0!==A)return A;k=!0;var l,e=Error.prepareStackTrace;Error.prepareStackTrace=void 0,l=S.current,S.current=null,function(){if(0===w){V=console.log,p=console.info,Y=console.warn,X=console.error,h=console.group,H=console.groupCollapsed,K=console.groupEnd;var I={configurable:!0,enumerable:!0,value:f,writable:!0};Object.defineProperties(console,{info:I,log:I,warn:I,error:I,group:I,groupCollapsed:I,groupEnd:I})}w++}();try{if(g){var c=function(){throw Error()};if(Object.defineProperty(c.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(c,[])}catch(d){C=d}Reflect.construct(I,[],c)}else{try{c.call()}catch(d){C=d}I.call(c.prototype)}}else{try{throw Error()}catch(d){C=d}I()}}catch(a){if(a&&C&&"string"==typeof a.stack){for(var o=a.stack.split("\n"),i=C.stack.split("\n"),Z=o.length-1,s=i.length-1;Z>=1&&s>=0&&o[Z]!==i[s];)s--;for(;Z>=1&&s>=0;Z--,s--)if(o[Z]!==i[s]){if(1!==Z||1!==s)do{if(Z--,--s<0||o[Z]!==i[s]){var b="\n"+o[Z].replace(" at new "," at ");return I.displayName&&b.includes("<anonymous>")&&(b=b.replace("<anonymous>",I.displayName)),"function"==typeof I&&v.set(I,b),b}}while(Z>=1&&s>=0);break}}}finally{k=!1,S.current=l,function(){if(0==--w){var I={configurable:!0,enumerable:!0,writable:!0};Object.defineProperties(console,{log:R({},I,{value:V}),info:R({},I,{value:p}),warn:R({},I,{value:Y}),error:R({},I,{value:X}),group:R({},I,{value:h}),groupCollapsed:R({},I,{value:H}),groupEnd:R({},I,{value:K})})}w<0&&r("disabledDepth fell below zero. This is a bug in React. Please file an issue.")}(),Error.prepareStackTrace=e}var t=I?I.displayName||I.name:"",n=t?F(t):"";return"function"==typeof I&&v.set(I,n),n}function U(I,g,C){if(null==I)return"";if("function"==typeof I)return T(I,!(!(A=I.prototype)||!A.isReactComponent));var A;if("string"==typeof I)return F(I);switch(I){case b:return F("Suspense");case t:return F("SuspenseList")}if("object"==typeof I)switch(I.$$typeof){case s:return T(I.render,!1);case n:return U(I.type,g,C);case d:var l=I,e=l._payload,c=l._init;try{return U(c(e),g,C)}catch(o){}}return""}v=new J;var x=Object.prototype.hasOwnProperty,z={},Q=m.ReactDebugCurrentFrame;function D(I){if(I){var g=I._owner,C=U(I.type,I._source,g?g.type:null);Q.setExtraStackFrame(C)}else Q.setExtraStackFrame(null)}var P=Array.isArray;function L(I){return P(I)}function j(I){return""+I}function O(I){if(function(I){try{return j(I),!1}catch(g){return!0}}(I))return r("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.",function(I){return"function"==typeof Symbol&&Symbol.toStringTag&&I[Symbol.toStringTag]||I.constructor.name||"Object"}(I)),j(I)}var M,E,_,$=m.ReactCurrentOwner,q={key:!0,ref:!0,__self:!0,__source:!0};_={};function II(I,g,A,l,e){var c,o={},i=null,Z=null;for(c in void 0!==A&&(O(A),i=""+A),function(I){if(x.call(I,"key")){var g=Object.getOwnPropertyDescriptor(I,"key").get;if(g&&g.isReactWarning)return!1}return void 0!==I.key}(g)&&(O(g.key),i=""+g.key),function(I){if(x.call(I,"ref")){var g=Object.getOwnPropertyDescriptor(I,"ref").get;if(g&&g.isReactWarning)return!1}return void 0!==I.ref}(g)&&(Z=g.ref,function(I,g){if("string"==typeof I.ref&&$.current&&g&&$.current.stateNode!==g){var C=u($.current.type);_[C]||(r('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref',u($.current.type),I.ref),_[C]=!0)}}(g,e)),g)x.call(g,c)&&!q.hasOwnProperty(c)&&(o[c]=g[c]);if(I&&I.defaultProps){var s=I.defaultProps;for(c in s)void 0===o[c]&&(o[c]=s[c])}if(i||Z){var b="function"==typeof I?I.displayName||I.name||"Unknown":I;i&&function(I,g){var C=function(){M||(M=!0,r("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)",g))};C.isReactWarning=!0,Object.defineProperty(I,"key",{get:C,configurable:!0})}(o,b),Z&&function(I,g){var C=function(){E||(E=!0,r("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)",g))};C.isReactWarning=!0,Object.defineProperty(I,"ref",{get:C,configurable:!0})}(o,b)}return function(I,g,A,l,e,c,o){var i={$$typeof:C,type:I,key:g,ref:A,props:o,_owner:c,_store:{}};return Object.defineProperty(i._store,"validated",{configurable:!1,enumerable:!1,writable:!0,value:!1}),Object.defineProperty(i,"_self",{configurable:!1,enumerable:!1,writable:!1,value:l}),Object.defineProperty(i,"_source",{configurable:!1,enumerable:!1,writable:!1,value:e}),Object.freeze&&(Object.freeze(i.props),Object.freeze(i)),i}(I,i,Z,e,l,$.current,o)}var gI,CI=m.ReactCurrentOwner,AI=m.ReactDebugCurrentFrame;function lI(I){if(I){var g=I._owner,C=U(I.type,I._source,g?g.type:null);AI.setExtraStackFrame(C)}else AI.setExtraStackFrame(null)}function eI(I){return"object"==typeof I&&null!==I&&I.$$typeof===C}function cI(){if(CI.current){var I=u(CI.current.type);if(I)return"\n\nCheck the render method of `"+I+"`."}return""}gI=!1;var oI={};function iI(I,g){if(I._store&&!I._store.validated&&null==I.key){I._store.validated=!0;var C=function(I){var g=cI();if(!g){var C="string"==typeof I?I:I.displayName||I.name;C&&(g="\n\nCheck the top-level render call using <"+C+">.")}return g}(g);if(!oI[C]){oI[C]=!0;var A="";I&&I._owner&&I._owner!==CI.current&&(A=" It was passed a child from "+u(I._owner.type)+"."),lI(I),r('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.',C,A),lI(null)}}}function ZI(I,g){if("object"==typeof I)if(L(I))for(var C=0;C<I.length;C++){var A=I[C];eI(A)&&iI(A,g)}else if(eI(I))I._store&&(I._store.validated=!0);else if(I){var l=function(I){if(null===I||"object"!=typeof I)return null;var g=G&&I[G]||I["@@iterator"];return"function"==typeof g?g:null}(I);if("function"==typeof l&&l!==I.entries)for(var e,c=l.call(I);!(e=c.next()).done;)eI(e.value)&&iI(e.value,g)}}function sI(I){var g,C=I.type;if(null!=C&&"string"!=typeof C){if("function"==typeof C)g=C.propTypes;else{if("object"!=typeof C||C.$$typeof!==s&&C.$$typeof!==n)return;g=C.propTypes}if(g){var A=u(C);!function(I,g,C,A,l){var e=Function.call.bind(x);for(var c in I)if(e(I,c)){var o=void 0;try{if("function"!=typeof I[c]){var i=Error((A||"React class")+": "+C+" type `"+c+"` is invalid; it must be a function, usually from the `prop-types` package, but received `"+typeof I[c]+"`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");throw i.name="Invariant Violation",i}o=I[c](g,c,A,C,null,"SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED")}catch(Z){o=Z}!o||o instanceof Error||(D(l),r("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).",A||"React class",C,c,typeof o),D(null)),o instanceof Error&&!(o.message in z)&&(z[o.message]=!0,D(l),r("Failed %s type: %s",C,o.message),D(null))}}(g,I.props,"prop",A,I)}else if(void 0!==C.PropTypes&&!gI){gI=!0,r("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?",u(C)||"Unknown")}"function"!=typeof C.getDefaultProps||C.getDefaultProps.isReactClassApproved||r("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.")}}function bI(I,g,A,o,G,m){var y=function(I){return"string"==typeof I||"function"==typeof I||I===l||I===c||I===e||I===b||I===t||I===a||"object"==typeof I&&null!==I&&(I.$$typeof===d||I.$$typeof===n||I.$$typeof===i||I.$$typeof===Z||I.$$typeof===s||I.$$typeof===W||void 0!==I.getModuleId)}(I);if(!y){var B="";(void 0===I||"object"==typeof I&&null!==I&&0===Object.keys(I).length)&&(B+=" You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.");var V,p=function(I){return void 0!==I?"\n\nCheck your code at "+I.fileName.replace(/^.*[\\\/]/,"")+":"+I.lineNumber+".":""}(G);B+=p||cI(),null===I?V="null":L(I)?V="array":void 0!==I&&I.$$typeof===C?(V="<"+(u(I.type)||"Unknown")+" />",B=" Did you accidentally export a JSX literal instead of a component?"):V=typeof I,r("React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s",V,B)}var Y=II(I,g,A,G,m);if(null==Y)return Y;if(y){var X=g.children;if(void 0!==X)if(o)if(L(X)){for(var h=0;h<X.length;h++)ZI(X[h],I);Object.freeze&&Object.freeze(X)}else r("React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.");else ZI(X,I)}return I===l?function(I){for(var g=Object.keys(I.props),C=0;C<g.length;C++){var A=g[C];if("children"!==A&&"key"!==A){lI(I),r("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.",A),lI(null);break}}null!==I.ref&&(lI(I),r("Invalid attribute `ref` supplied to `React.Fragment`."),lI(null))}(Y):sI(Y),Y}var tI=function(I,g,C){return bI(I,g,C,!1)},nI=function(I,g,C){return bI(I,g,C,!0)};o.Fragment=l,o.jsx=tI,o.jsxs=nI}()),o}c={get exports(){return A},set exports(I){A=I}},"production"===process.env.NODE_ENV?c.exports=function(){if(C)return l;C=1;var I=g,A=Symbol.for("react.element"),e=Symbol.for("react.fragment"),c=Object.prototype.hasOwnProperty,o=I.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,i={key:!0,ref:!0,__self:!0,__source:!0};function Z(I,g,C){var l,e={},Z=null,s=null;for(l in void 0!==C&&(Z=""+C),void 0!==g.key&&(Z=""+g.key),void 0!==g.ref&&(s=g.ref),g)c.call(g,l)&&!i.hasOwnProperty(l)&&(e[l]=g[l]);if(I&&I.defaultProps)for(l in g=I.defaultProps)void 0===e[l]&&(e[l]=g[l]);return{$$typeof:A,type:I,key:Z,ref:s,props:e,_owner:o.current}}return l.Fragment=e,l.jsx=Z,l.jsxs=Z,l}():c.exports=i();const Z=A.Fragment,s=A.jsx,b=A.jsxs,t=["log","debug"].reduce(((I,g)=>Object.assign(I,{[g]:(...I)=>null})),{});let n=0;const d=()=>n++,a=new Set,G=new Map;function m(I,g){if(a.has(I))return;a.add(I);const C=G.get(I);C&&C.forEach((I=>I()));const A=async C=>{var A;const l=C.data;if("call"===Reflect.get(l,"__proxy_internal")&&l.receiver===I){const I=Reflect.get(g,l.method);I||(C.source||self).postMessage({__proxy_internal:"reply",id:l.id,error:!0,payload:[`[proxy] method \`${l.method}\` does not exist on remote object ${l.receiver} or it is not a function.`]});let e=I;"function"==typeof I&&(e=await I.call(g,...l.payload,C)),t.debug("[proxy] reply",(null==(A=null==self?void 0:self.location)?void 0:A.href)||"worker",C.source,l.receiver,l.method,C.source||self),(C.source||self).postMessage({__proxy_internal:"reply",id:l.id,error:!1,payload:[e]})}};return self.addEventListener("message",A),()=>{self.removeEventListener("message",A)}}async function r(I,g,C=1e4){return new Promise(((A,l)=>{const e=d(),c=setTimeout((()=>{self.removeEventListener("message",o),l(`[proxy] wait for ${g} timeout .`)}),C),o=g=>{if((g.source||self)!==I)return;const C=g.data;"wait-reply"===Reflect.get(C,"__proxy_internal")&&C.id===e&&(A(null),clearTimeout(c),self.removeEventListener("message",o))};self.addEventListener("message",o),I.postMessage({__proxy_internal:"wait",receiver:g,payload:[],error:!1,id:e})}))}async function y({win:I,serviceId:g,method:C,payload:A,timeout:l=1e4}){return new Promise(((e,c)=>{var o;const i=d();let Z=self;I instanceof Worker&&(Z=I);let s=setTimeout((()=>{c(`call remote object ${g} method ${C.toString()} timeout`),Z.removeEventListener("message",b)}),l);const b=g=>{var C;if(!(I instanceof Worker)&&(g.source||self)!==I)return;const A=g.data;"reply"===Reflect.get(A,"__proxy_internal")&&A.id===i&&(Z.removeEventListener("message",b),clearTimeout(s),t.debug("[proxy] receive reply",(null==(C=null==self?void 0:self.location)?void 0:C.href)||"worker",A.id),A.error?c(A.payload[0]):e(A.payload[0]))};Z.addEventListener("message",b),t.debug("[proxy] call",(null==(o=null==self?void 0:self.location)?void 0:o.href)||"worker",g,C),I.postMessage({id:i,__proxy_internal:"call",receiver:g,method:C,payload:A,error:!1})}))}self.addEventListener("message",(I=>{const g=I.data;if("wait"!==Reflect.get(g,"__proxy_internal"))return;const C=g.receiver,A=setTimeout((()=>{const A=(G.get(C)||[]).filter((I=>I!==l));G.set(C,A),(I.source||self).postMessage({__proxy_internal:"wait-reply",error:!0,id:g.id,payload:[`[proxy]wait for service ${C} timeout.`]})}),g.timeout),l=()=>{clearTimeout(A),(I.source||self).postMessage({__proxy_internal:"wait-reply",id:g.id,error:!1,payload:[]});const e=(G.get(C)||[]).filter((I=>I!==l));G.set(C,e)},e=G.get(C)||[];e.push(l),G.set(C,e),a.has(C)&&l()}));const W="iframe-notification-service",B=(()=>{const I=new Map;return{trigger:(g,...C)=>{const A=I.get(g);if(A){const l=new Map;A.forEach(((I,g)=>{I.filter&&!I.filter(...C)||(I(...C),I.once&&l.set(g,!0))})),I.set(g,A.filter(((I,g)=>!l.get(g))))}},listen:(g,C,A)=>{var l,e;return I.has(g)||I.set(g,[]),null==(e=null==(l=I.get(g))?void 0:l.push)||e.call(l,Object.assign(C,{filter:A})),()=>{var A;null==(A=I.get(g))||A.filter((I=>I!==C))}},once:(g,C,A,l,e=-1)=>{var c,o;I.has(g)||I.set(g,[]);const i=()=>{var A;null==(A=I.get(g))||A.filter((I=>I!==C))};let Z;return-1!==e&&(Z=setTimeout((()=>{i(),null==l||l()}),e)),null==(o=null==(c=I.get(g))?void 0:c.push)||o.call(c,Object.assign(((...I)=>{Z&&clearTimeout(Z),C(...I)}),{once:!0,filter:A})),i}}})(),u=async(I,g=1e4)=>{const C=new Promise(((C,A)=>{"loaded"!==I.getAttribute("data-iframe-status")?B.once("iframeReady",((...g)=>{I.setAttribute("data-iframe-status","loaded"),C(null)}),(g=>g.source===I.contentWindow),A,g):C(null)})),A=y({win:I.contentWindow,serviceId:W,method:"iframeReady",payload:[],timeout:g});return Promise.race([C,A])},V="demo-service",p="// ⚠️require function is asynchronous !\n// const React = await require('react');\nimport React from 'react';\n\nconst App = () => {\n    return (\n        React.createElement(\n            'div',\n            {},\n            React.createElement(\n                'div',\n                {\n                    className: 'title'\n                },\n                'DemoSandbox'\n            ),\n            'welcome to use code sandbox'\n        )\n    );\n};\n\nmodule.exports = App",Y="const React = await require('react');\nconst ReactDom = await require('react-dom');\nconst App = await require('./App');\n\nReactDom.render(React.createElement(App, {}), document.getElementById('root'));",X='<noscript>Need javascript to run this demo page.</noscript>\n<div id="root">\n    <h3> 🚀 Welcome to use code sandbox. </h3>\n</div>',h=".title { color: blue }",H=Object.freeze(Object.defineProperty({__proto__:null,DefaultCssCode:h,DefaultDemoCode:p,DefaultHtml:X,DefaultIndexCode:Y},Symbol.toStringTag,{value:"Module"}));class K{constructor(){this.pluginId="base"}async resolveModuleUrl(I){return I}async require(I,g){return g}async beforeModuleGenerate(I,g){return g}}let R=[];class w extends K{constructor(){super(),this.pluginId="default-plugin"}async resolveModuleUrl(I){const{packageName:g,version:C,file:A}=I;return`https://unpkg.com/${g}${C?`@${C}`:""}${A?`${A}`:""}`}async beforeModuleGenerate(I,g){return g.factory=`async (require, exports, module) => {\n${g.factory}\n}`,g.deps=["require","exports","module"],g}}(async()=>{m(W,{iframeReady:async I=>(console.log("iframe ready",I),B.trigger("iframeReady",I),!0),iframeLoadingModule:async(I,g,C)=>{B.trigger("iframeLoadingModule",I,g,C)}})})();const f=I=>{const{title:C="demo",className:A,code:l=p,index:e=Y,css:c=h,html:o=X,style:i,onLoadingModule:t,onReady:n}=I,d=g.useRef(null),a=g.useRef(null),G=[o,l,e,c];g.useLayoutEffect((()=>{(async()=>{const{refreshIndex:I,refreshApp:g,refreshHtml:C,refreshStyle:A}=(I=>{const{iframe:g,code:C,index:A,html:l,css:e,className:c,style:o}=I,i=async(I,C,A)=>{g&&A&&(await u(g),await r(g.contentWindow,V),await y({win:g.contentWindow,serviceId:V,method:"defineModule",payload:[I,C,A]}),await y({win:g.contentWindow,serviceId:V,method:"executeModule",payload:[I]}))},Z=async()=>{await i("/index",["require"],A)},s=async()=>{await i("/App",["require"],C),await Z()};return{refreshApp:s,refreshIndex:Z,refreshHtml:async()=>{await u(g),await r(g.contentWindow,V),await y({win:g.contentWindow,serviceId:V,method:"setBodyHtml",payload:[l]}),await s()},refreshStyle:async()=>{g&&e&&(await u(g),await r(g.contentWindow,V),await y({win:g.contentWindow,serviceId:V,method:"setStyle",payload:[e]}))}}})({iframe:d.current,code:l,index:e,css:c,html:o}),[i,Z,s,b]=a.current||[],t=[];switch(!0){case i!==o:t.push(C());break;case Z!==l:t.push(g());break;case s!==e:t.push(I())}t.push(A()),await Promise.all(t),null==n||n(),a.current=G})()}),G);const m=g.useRef(t);m.current=t,g.useLayoutEffect((()=>{d.current&&(((I,g)=>{B.listen("iframeLoadingModule",g,((g,C,A)=>A.source===I.contentWindow))})(d.current,((I,g)=>{m.current(I,g)})),(async(I,g)=>{await u(I),await r(I.contentWindow,V),await y({win:I.contentWindow,serviceId:V,method:"setPlugins",payload:[g]})})(d.current,R))}),[]);const[W,H]=(()=>{const I='<html lang="en">\n    <head>\n        <title>Demo Sandbox</title>\n        <script type="module" src="data:application/javascript;base64,"><\/script>\n    </head>\n    <body></body>\n</html>';return[I,`data:text/html,${encodeURIComponent(I)}`]})();return b(Z,{children:[s("style",{children:".code-sandbox-iframe {\n    border-width: 0;\n    background-color: #ffffff;\n}\n"}),s("iframe",{ref:d,className:`code-sandbox-iframe ${A||""}`,title:C,src:H,srcDoc:W,allowFullScreen:!0,style:i})]})};f.displayName="Demo",I.DefaultCodes=H,I.default=f,I.registerPlugins=I=>{const g=I.concat(new w);return g.forEach((I=>{m(I.pluginId,I)})),R=g.map((I=>I.pluginId)),R},Object.defineProperties(I,{__esModule:{value:!0},[Symbol.toStringTag]:{value:"Module"}})}));
//# sourceMappingURL=main.umd.cjs.map
