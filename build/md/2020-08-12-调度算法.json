{"ast":{"type":"Document","children":[{"type":"Yaml","value":"title: '调度算法'\ntags: ['操作系统','进程']","loc":{"start":{"line":1,"column":0},"end":{"line":4,"column":3}},"range":[0,41],"raw":"---\ntitle: '调度算法'\ntags: ['操作系统','进程']\n---"},{"type":"Header","depth":1,"children":[{"type":"Str","value":"调度算法","loc":{"start":{"line":5,"column":2},"end":{"line":5,"column":6}},"range":[44,48],"raw":"调度算法"}],"loc":{"start":{"line":5,"column":0},"end":{"line":5,"column":6}},"range":[42,48],"raw":"# 调度算法"},{"type":"Header","depth":2,"children":[{"type":"Str","value":"调度算法好坏的评价指标","loc":{"start":{"line":7,"column":3},"end":{"line":7,"column":14}},"range":[53,64],"raw":"调度算法好坏的评价指标"}],"loc":{"start":{"line":7,"column":0},"end":{"line":7,"column":14}},"range":[50,64],"raw":"## 调度算法好坏的评价指标"},{"type":"Header","depth":3,"children":[{"type":"Str","value":"CPU利用率","loc":{"start":{"line":9,"column":4},"end":{"line":9,"column":10}},"range":[70,76],"raw":"CPU利用率"}],"loc":{"start":{"line":9,"column":0},"end":{"line":9,"column":10}},"range":[66,76],"raw":"### CPU利用率"},{"type":"Paragraph","children":[{"type":"Str","value":"CPU的造价极其昂贵，因此人们会希望让CPU尽可能工作。","loc":{"start":{"line":11,"column":0},"end":{"line":11,"column":28}},"range":[78,106],"raw":"CPU的造价极其昂贵，因此人们会希望让CPU尽可能工作。"}],"loc":{"start":{"line":11,"column":0},"end":{"line":11,"column":28}},"range":[78,106],"raw":"CPU的造价极其昂贵，因此人们会希望让CPU尽可能工作。"},{"type":"Paragraph","children":[{"type":"Str","value":"CPU利用率：指CPU“忙碌”的时间站总时间的比例","loc":{"start":{"line":13,"column":0},"end":{"line":13,"column":25}},"range":[108,133],"raw":"CPU利用率：指CPU“忙碌”的时间站总时间的比例"}],"loc":{"start":{"line":13,"column":0},"end":{"line":13,"column":25}},"range":[108,133],"raw":"CPU利用率：指CPU“忙碌”的时间站总时间的比例"},{"type":"Paragraph","children":[{"type":"Str","value":"$利用率=\\frac{忙碌的时间}{总时间}$","loc":{"start":{"line":15,"column":0},"end":{"line":15,"column":23}},"range":[135,158],"raw":"$利用率=\\frac{忙碌的时间}{总时间}$"}],"loc":{"start":{"line":15,"column":0},"end":{"line":15,"column":23}},"range":[135,158],"raw":"$利用率=\\frac{忙碌的时间}{总时间}$"},{"type":"Header","depth":4,"children":[{"type":"Str","value":"甘特图","loc":{"start":{"line":17,"column":5},"end":{"line":17,"column":8}},"range":[165,168],"raw":"甘特图"}],"loc":{"start":{"line":17,"column":0},"end":{"line":17,"column":8}},"range":[160,168],"raw":"#### 甘特图"},{"type":"Paragraph","children":[{"type":"Str","value":"用于求多道程序并发执行的情况下的CPU利用率","loc":{"start":{"line":19,"column":0},"end":{"line":19,"column":22}},"range":[170,192],"raw":"用于求多道程序并发执行的情况下的CPU利用率"}],"loc":{"start":{"line":19,"column":0},"end":{"line":19,"column":22}},"range":[170,192],"raw":"用于求多道程序并发执行的情况下的CPU利用率"},{"type":"Header","depth":3,"children":[{"type":"Str","value":"系统吞吐量","loc":{"start":{"line":21,"column":4},"end":{"line":21,"column":9}},"range":[198,203],"raw":"系统吞吐量"}],"loc":{"start":{"line":21,"column":0},"end":{"line":21,"column":9}},"range":[194,203],"raw":"### 系统吞吐量"},{"type":"Paragraph","children":[{"type":"Str","value":"系统吞吐量：单位时间内完成作业的数量","loc":{"start":{"line":23,"column":0},"end":{"line":23,"column":18}},"range":[205,223],"raw":"系统吞吐量：单位时间内完成作业的数量"}],"loc":{"start":{"line":23,"column":0},"end":{"line":23,"column":18}},"range":[205,223],"raw":"系统吞吐量：单位时间内完成作业的数量"},{"type":"Paragraph","children":[{"type":"Str","value":"$系统吞吐量=\\frac{总共完成了多少道作业}{总共花了多少时间}$","loc":{"start":{"line":25,"column":0},"end":{"line":25,"column":35}},"range":[225,260],"raw":"$系统吞吐量=\\frac{总共完成了多少道作业}{总共花了多少时间}$"}],"loc":{"start":{"line":25,"column":0},"end":{"line":25,"column":35}},"range":[225,260],"raw":"$系统吞吐量=\\frac{总共完成了多少道作业}{总共花了多少时间}$"},{"type":"Header","depth":3,"children":[{"type":"Str","value":"周转时间","loc":{"start":{"line":27,"column":4},"end":{"line":27,"column":8}},"range":[266,270],"raw":"周转时间"}],"loc":{"start":{"line":27,"column":0},"end":{"line":27,"column":8}},"range":[262,270],"raw":"### 周转时间"},{"type":"Paragraph","children":[{"type":"Str","value":"周转时间：从作业","loc":{"start":{"line":29,"column":0},"end":{"line":29,"column":8}},"range":[272,280],"raw":"周转时间：从作业"},{"type":"Strong","children":[{"type":"Str","value":"提交给系统","loc":{"start":{"line":29,"column":10},"end":{"line":29,"column":15}},"range":[282,287],"raw":"提交给系统"}],"loc":{"start":{"line":29,"column":8},"end":{"line":29,"column":17}},"range":[280,289],"raw":"**提交给系统**"},{"type":"Str","value":"开始到","loc":{"start":{"line":29,"column":17},"end":{"line":29,"column":20}},"range":[289,292],"raw":"开始到"},{"type":"Strong","children":[{"type":"Str","value":"作业完成","loc":{"start":{"line":29,"column":22},"end":{"line":29,"column":26}},"range":[294,298],"raw":"作业完成"}],"loc":{"start":{"line":29,"column":20},"end":{"line":29,"column":28}},"range":[292,300],"raw":"**作业完成**"},{"type":"Str","value":"，总共花费的时间。","loc":{"start":{"line":29,"column":28},"end":{"line":29,"column":37}},"range":[300,309],"raw":"，总共花费的时间。"}],"loc":{"start":{"line":29,"column":0},"end":{"line":29,"column":37}},"range":[272,309],"raw":"周转时间：从作业**提交给系统**开始到**作业完成**，总共花费的时间。"},{"type":"Paragraph","children":[{"type":"Str","value":"周转时间包括：","loc":{"start":{"line":31,"column":0},"end":{"line":31,"column":7}},"range":[311,318],"raw":"周转时间包括："}],"loc":{"start":{"line":31,"column":0},"end":{"line":31,"column":7}},"range":[311,318],"raw":"周转时间包括："},{"type":"List","ordered":false,"start":null,"spread":false,"children":[{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"作业在外存上等待作业调度（高级调度）的时间","loc":{"start":{"line":33,"column":2},"end":{"line":33,"column":23}},"range":[322,343],"raw":"作业在外存上等待作业调度（高级调度）的时间"}],"loc":{"start":{"line":33,"column":2},"end":{"line":33,"column":23}},"range":[322,343],"raw":"作业在外存上等待作业调度（高级调度）的时间"}],"loc":{"start":{"line":33,"column":0},"end":{"line":33,"column":23}},"range":[320,343],"raw":"- 作业在外存上等待作业调度（高级调度）的时间"},{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"进程在就绪队列上等待进程调度的时间（可能发生多次）","loc":{"start":{"line":34,"column":2},"end":{"line":34,"column":27}},"range":[346,371],"raw":"进程在就绪队列上等待进程调度的时间（可能发生多次）"}],"loc":{"start":{"line":34,"column":2},"end":{"line":34,"column":27}},"range":[346,371],"raw":"进程在就绪队列上等待进程调度的时间（可能发生多次）"}],"loc":{"start":{"line":34,"column":0},"end":{"line":34,"column":27}},"range":[344,371],"raw":"- 进程在就绪队列上等待进程调度的时间（可能发生多次）"},{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"进程在CPU上执行的时间（可能发生多次）","loc":{"start":{"line":35,"column":2},"end":{"line":35,"column":22}},"range":[374,394],"raw":"进程在CPU上执行的时间（可能发生多次）"}],"loc":{"start":{"line":35,"column":2},"end":{"line":35,"column":22}},"range":[374,394],"raw":"进程在CPU上执行的时间（可能发生多次）"}],"loc":{"start":{"line":35,"column":0},"end":{"line":35,"column":22}},"range":[372,394],"raw":"- 进程在CPU上执行的时间（可能发生多次）"},{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"进程等待I/O操作完成的时间（可能发生多次）","loc":{"start":{"line":36,"column":2},"end":{"line":36,"column":24}},"range":[397,419],"raw":"进程等待I/O操作完成的时间（可能发生多次）"}],"loc":{"start":{"line":36,"column":2},"end":{"line":36,"column":24}},"range":[397,419],"raw":"进程等待I/O操作完成的时间（可能发生多次）"}],"loc":{"start":{"line":36,"column":0},"end":{"line":36,"column":24}},"range":[395,419],"raw":"- 进程等待I/O操作完成的时间（可能发生多次）"}],"loc":{"start":{"line":33,"column":0},"end":{"line":36,"column":24}},"range":[320,419],"raw":"- 作业在外存上等待作业调度（高级调度）的时间\n- 进程在就绪队列上等待进程调度的时间（可能发生多次）\n- 进程在CPU上执行的时间（可能发生多次）\n- 进程等待I/O操作完成的时间（可能发生多次）"},{"type":"Paragraph","children":[{"type":"Str","value":"作业的周转时间 = 作业完成的时间 - 作业提交的时间","loc":{"start":{"line":38,"column":0},"end":{"line":38,"column":27}},"range":[421,448],"raw":"作业的周转时间 = 作业完成的时间 - 作业提交的时间"}],"loc":{"start":{"line":38,"column":0},"end":{"line":38,"column":27}},"range":[421,448],"raw":"作业的周转时间 = 作业完成的时间 - 作业提交的时间"},{"type":"Paragraph","children":[{"type":"Str","value":"$平均周转时间 = \\frac{各作业周转时间之和}{作业数}$","loc":{"start":{"line":40,"column":0},"end":{"line":40,"column":32}},"range":[450,482],"raw":"$平均周转时间 = \\frac{各作业周转时间之和}{作业数}$"}],"loc":{"start":{"line":40,"column":0},"end":{"line":40,"column":32}},"range":[450,482],"raw":"$平均周转时间 = \\frac{各作业周转时间之和}{作业数}$"},{"type":"Paragraph","children":[{"type":"Str","value":"$带权周转时间=\\frac{作业周转时间}{作业实际运行时间}=\\frac{作业完成时间-作业提交时间}{作业实际运行时间}$","loc":{"start":{"line":42,"column":0},"end":{"line":42,"column":63}},"range":[484,547],"raw":"$带权周转时间=\\frac{作业周转时间}{作业实际运行时间}=\\frac{作业完成时间-作业提交时间}{作业实际运行时间}$"}],"loc":{"start":{"line":42,"column":0},"end":{"line":42,"column":63}},"range":[484,547],"raw":"$带权周转时间=\\frac{作业周转时间}{作业实际运行时间}=\\frac{作业完成时间-作业提交时间}{作业实际运行时间}$"},{"type":"Header","depth":3,"children":[{"type":"Str","value":"等待时间","loc":{"start":{"line":44,"column":4},"end":{"line":44,"column":8}},"range":[553,557],"raw":"等待时间"}],"loc":{"start":{"line":44,"column":0},"end":{"line":44,"column":8}},"range":[549,557],"raw":"### 等待时间"},{"type":"Paragraph","children":[{"type":"Str","value":"等待时间：指进程/作业处于等待处理机状态时间之和，等待时间越长，用户满意度越低","loc":{"start":{"line":46,"column":0},"end":{"line":46,"column":39}},"range":[559,598],"raw":"等待时间：指进程/作业处于等待处理机状态时间之和，等待时间越长，用户满意度越低"}],"loc":{"start":{"line":46,"column":0},"end":{"line":46,"column":39}},"range":[559,598],"raw":"等待时间：指进程/作业处于等待处理机状态时间之和，等待时间越长，用户满意度越低"},{"type":"Paragraph","children":[{"type":"Str","value":"对于进程来说，等待时间就是进程建立以后等待被服务的时间之和，在等待I/O完成期间其实进程也是在被服务的，不计入等待时间。","loc":{"start":{"line":48,"column":0},"end":{"line":48,"column":60}},"range":[600,660],"raw":"对于进程来说，等待时间就是进程建立以后等待被服务的时间之和，在等待I/O完成期间其实进程也是在被服务的，不计入等待时间。"}],"loc":{"start":{"line":48,"column":0},"end":{"line":48,"column":60}},"range":[600,660],"raw":"对于进程来说，等待时间就是进程建立以后等待被服务的时间之和，在等待I/O完成期间其实进程也是在被服务的，不计入等待时间。"},{"type":"Paragraph","children":[{"type":"Str","value":"对于作业来说，等待时间还要考虑建立进程之后的等待时间，还要加上作业在外存后背队列中等待的时间。","loc":{"start":{"line":50,"column":0},"end":{"line":50,"column":47}},"range":[662,709],"raw":"对于作业来说，等待时间还要考虑建立进程之后的等待时间，还要加上作业在外存后背队列中等待的时间。"}],"loc":{"start":{"line":50,"column":0},"end":{"line":50,"column":47}},"range":[662,709],"raw":"对于作业来说，等待时间还要考虑建立进程之后的等待时间，还要加上作业在外存后背队列中等待的时间。"},{"type":"Paragraph","children":[{"type":"Str","value":"$平均等待时间=\\frac{所有作业的总等待时间}{作业的数量}$，可以用于评价整体性能。","loc":{"start":{"line":52,"column":0},"end":{"line":52,"column":45}},"range":[711,756],"raw":"$平均等待时间=\\frac{所有作业的总等待时间}{作业的数量}$，可以用于评价整体性能。"}],"loc":{"start":{"line":52,"column":0},"end":{"line":52,"column":45}},"range":[711,756],"raw":"$平均等待时间=\\frac{所有作业的总等待时间}{作业的数量}$，可以用于评价整体性能。"},{"type":"Header","depth":3,"children":[{"type":"Str","value":"响应时间","loc":{"start":{"line":54,"column":4},"end":{"line":54,"column":8}},"range":[762,766],"raw":"响应时间"}],"loc":{"start":{"line":54,"column":0},"end":{"line":54,"column":8}},"range":[758,766],"raw":"### 响应时间"},{"type":"Paragraph","children":[{"type":"Str","value":"响应时间：用户从提交请求到首次产生响应所用的时间","loc":{"start":{"line":56,"column":0},"end":{"line":56,"column":24}},"range":[768,792],"raw":"响应时间：用户从提交请求到首次产生响应所用的时间"}],"loc":{"start":{"line":56,"column":0},"end":{"line":56,"column":24}},"range":[768,792],"raw":"响应时间：用户从提交请求到首次产生响应所用的时间"},{"type":"HorizontalRule","loc":{"start":{"line":60,"column":0},"end":{"line":60,"column":5}},"range":[796,801],"raw":"*****"},{"type":"Header","depth":2,"children":[{"type":"Str","value":"调度算法","loc":{"start":{"line":62,"column":3},"end":{"line":62,"column":7}},"range":[806,810],"raw":"调度算法"}],"loc":{"start":{"line":62,"column":0},"end":{"line":62,"column":7}},"range":[803,810],"raw":"## 调度算法"},{"type":"Header","depth":3,"children":[{"type":"Str","value":"先来先服务、短作业优先和高响应比优先算法","loc":{"start":{"line":64,"column":4},"end":{"line":64,"column":24}},"range":[816,836],"raw":"先来先服务、短作业优先和高响应比优先算法"}],"loc":{"start":{"line":64,"column":0},"end":{"line":64,"column":24}},"range":[812,836],"raw":"### 先来先服务、短作业优先和高响应比优先算法"},{"type":"Table","align":["center",null,null,null,null,null,null],"children":[{"type":"TableRow","children":[{"type":"TableCell","children":[{"type":"Str","value":"算法","loc":{"start":{"line":66,"column":25},"end":{"line":66,"column":27}},"range":[863,865],"raw":"算法"}],"loc":{"start":{"line":66,"column":0},"end":{"line":66,"column":53}},"range":[838,891],"raw":"|                        算法                         |"},{"type":"TableCell","children":[{"type":"Str","value":"规则","loc":{"start":{"line":66,"column":54},"end":{"line":66,"column":56}},"range":[892,894],"raw":"规则"}],"loc":{"start":{"line":66,"column":53},"end":{"line":66,"column":87}},"range":[891,925],"raw":" 规则                              |"},{"type":"TableCell","children":[{"type":"Str","value":"可用于作业/进程调度","loc":{"start":{"line":66,"column":88},"end":{"line":66,"column":98}},"range":[926,936],"raw":"可用于作业/进程调度"}],"loc":{"start":{"line":66,"column":87},"end":{"line":66,"column":136}},"range":[925,974],"raw":" 可用于作业/进程调度                                     |"},{"type":"TableCell","children":[{"type":"Str","value":"抢占","loc":{"start":{"line":66,"column":137},"end":{"line":66,"column":139}},"range":[975,977],"raw":"抢占"}],"loc":{"start":{"line":66,"column":136},"end":{"line":66,"column":197}},"range":[974,1035],"raw":" 抢占                                                         |"},{"type":"TableCell","children":[{"type":"Str","value":"优点","loc":{"start":{"line":66,"column":198},"end":{"line":66,"column":200}},"range":[1036,1038],"raw":"优点"}],"loc":{"start":{"line":66,"column":197},"end":{"line":66,"column":232}},"range":[1035,1070],"raw":" 优点                               |"},{"type":"TableCell","children":[{"type":"Str","value":"缺点","loc":{"start":{"line":66,"column":233},"end":{"line":66,"column":235}},"range":[1071,1073],"raw":"缺点"}],"loc":{"start":{"line":66,"column":232},"end":{"line":66,"column":293}},"range":[1070,1131],"raw":" 缺点                                                         |"},{"type":"TableCell","children":[{"type":"Str","value":"饥饿","loc":{"start":{"line":66,"column":294},"end":{"line":66,"column":296}},"range":[1132,1134],"raw":"饥饿"}],"loc":{"start":{"line":66,"column":293},"end":{"line":66,"column":348}},"range":[1131,1186],"raw":" 饥饿                                                   |"}],"loc":{"start":{"line":66,"column":0},"end":{"line":66,"column":348}},"range":[838,1186],"raw":"|                        算法                         | 规则                              | 可用于作业/进程调度                                     | 抢占                                                         | 优点                               | 缺点                                                         | 饥饿                                                   |"},{"type":"TableRow","children":[{"type":"TableCell","children":[{"type":"Str","value":"先来先服务(First Come First Serve, FCFS)","loc":{"start":{"line":68,"column":7},"end":{"line":68,"column":42}},"range":[1564,1599],"raw":"先来先服务(First Come First Serve, FCFS)"}],"loc":{"start":{"line":68,"column":0},"end":{"line":68,"column":50}},"range":[1557,1607],"raw":"|      先来先服务(First Come First Serve, FCFS)       |"},{"type":"TableCell","children":[{"type":"Str","value":"按照作业/进程的到达顺序进行服务","loc":{"start":{"line":68,"column":51},"end":{"line":68,"column":67}},"range":[1608,1624],"raw":"按照作业/进程的到达顺序进行服务"}],"loc":{"start":{"line":68,"column":50},"end":{"line":68,"column":71}},"range":[1607,1628],"raw":" 按照作业/进程的到达顺序进行服务   |"},{"type":"TableCell","children":[{"type":"Str","value":"先到达后备队列（就绪队列）的作业/进程先得到处理机的处理","loc":{"start":{"line":68,"column":72},"end":{"line":68,"column":100}},"range":[1629,1657],"raw":"先到达后备队列（就绪队列）的作业/进程先得到处理机的处理"}],"loc":{"start":{"line":68,"column":71},"end":{"line":68,"column":102}},"range":[1628,1659],"raw":" 先到达后备队列（就绪队列）的作业/进程先得到处理机的处理 |"},{"type":"TableCell","children":[{"type":"Str","value":"非抢占","loc":{"start":{"line":68,"column":103},"end":{"line":68,"column":106}},"range":[1660,1663],"raw":"非抢占"}],"loc":{"start":{"line":68,"column":102},"end":{"line":68,"column":162}},"range":[1659,1719],"raw":" 非抢占                                                       |"},{"type":"TableCell","children":[{"type":"Str","value":"公平，实现简单","loc":{"start":{"line":68,"column":163},"end":{"line":68,"column":170}},"range":[1720,1727],"raw":"公平，实现简单"}],"loc":{"start":{"line":68,"column":162},"end":{"line":68,"column":192}},"range":[1719,1749],"raw":" 公平，实现简单                     |"},{"type":"TableCell","children":[{"type":"Str","value":"排在长进程后面的短进程需要等待很长的时间才能被服务，","loc":{"start":{"line":68,"column":193},"end":{"line":68,"column":219}},"range":[1750,1776],"raw":"排在长进程后面的短进程需要等待很长的时间才能被服务，"},{"type":"Strong","children":[{"type":"Str","value":"对短作业不利，对长作业也有利","loc":{"start":{"line":68,"column":221},"end":{"line":68,"column":235}},"range":[1778,1792],"raw":"对短作业不利，对长作业也有利"}],"loc":{"start":{"line":68,"column":219},"end":{"line":68,"column":237}},"range":[1776,1794],"raw":"**对短作业不利，对长作业也有利**"}],"loc":{"start":{"line":68,"column":192},"end":{"line":68,"column":239}},"range":[1749,1796],"raw":" 排在长进程后面的短进程需要等待很长的时间才能被服务，**对短作业不利，对长作业也有利** |"},{"type":"TableCell","children":[{"type":"Str","value":"不会","loc":{"start":{"line":68,"column":240},"end":{"line":68,"column":242}},"range":[1797,1799],"raw":"不会"}],"loc":{"start":{"line":68,"column":239},"end":{"line":68,"column":294}},"range":[1796,1851],"raw":" 不会                                                   |"}],"loc":{"start":{"line":68,"column":0},"end":{"line":68,"column":294}},"range":[1557,1851],"raw":"|      先来先服务(First Come First Serve, FCFS)       | 按照作业/进程的到达顺序进行服务   | 先到达后备队列（就绪队列）的作业/进程先得到处理机的处理 | 非抢占                                                       | 公平，实现简单                     | 排在长进程后面的短进程需要等待很长的时间才能被服务，**对短作业不利，对长作业也有利** | 不会                                                   |"},{"type":"TableRow","children":[{"type":"TableCell","children":[{"type":"Str","value":"短作业优先(Shortest Job First, SJF)","loc":{"start":{"line":69,"column":10},"end":{"line":69,"column":40}},"range":[1862,1892],"raw":"短作业优先(Shortest Job First, SJF)"}],"loc":{"start":{"line":69,"column":0},"end":{"line":69,"column":50}},"range":[1852,1902],"raw":"|         短作业优先(Shortest Job First, SJF)         |"},{"type":"TableCell","children":[{"type":"Str","value":"最短的作业/进程优先得到服务","loc":{"start":{"line":69,"column":51},"end":{"line":69,"column":65}},"range":[1903,1917],"raw":"最短的作业/进程优先得到服务"}],"loc":{"start":{"line":69,"column":50},"end":{"line":69,"column":73}},"range":[1902,1925],"raw":" 最短的作业/进程优先得到服务       |"},{"type":"TableCell","children":[{"type":"Str","value":"用于作业调度，用于进程调度的时候称为“短进程优先(SPF)”","loc":{"start":{"line":69,"column":74},"end":{"line":69,"column":104}},"range":[1926,1956],"raw":"用于作业调度，用于进程调度的时候称为“短进程优先(SPF)”"}],"loc":{"start":{"line":69,"column":73},"end":{"line":69,"column":108}},"range":[1925,1960],"raw":" 用于作业调度，用于进程调度的时候称为“短进程优先(SPF)”   |"},{"type":"TableCell","children":[{"type":"Str","value":"SJF和SPF是非抢占式的，也有抢占式的版本：","loc":{"start":{"line":69,"column":109},"end":{"line":69,"column":132}},"range":[1961,1984],"raw":"SJF和SPF是非抢占式的，也有抢占式的版本："},{"type":"Strong","children":[{"type":"Str","value":"最短剩余时间","loc":{"start":{"line":69,"column":134},"end":{"line":69,"column":140}},"range":[1986,1992],"raw":"最短剩余时间"}],"loc":{"start":{"line":69,"column":132},"end":{"line":69,"column":142}},"range":[1984,1994],"raw":"**最短剩余时间**"},{"type":"Str","value":"(SRTN, Shortest Remaining Time Next)","loc":{"start":{"line":69,"column":142},"end":{"line":69,"column":178}},"range":[1994,2030],"raw":"(SRTN, Shortest Remaining Time Next)"}],"loc":{"start":{"line":69,"column":108},"end":{"line":69,"column":180}},"range":[1960,2032],"raw":" SJF和SPF是非抢占式的，也有抢占式的版本：**最短剩余时间**(SRTN, Shortest Remaining Time Next) |"},{"type":"TableCell","children":[{"type":"Str","value":"“最短的”平均等待时间和平均周转时间","loc":{"start":{"line":69,"column":181},"end":{"line":69,"column":199}},"range":[2033,2051],"raw":"“最短的”平均等待时间和平均周转时间"}],"loc":{"start":{"line":69,"column":180},"end":{"line":69,"column":201}},"range":[2032,2053],"raw":" “最短的”平均等待时间和平均周转时间 |"},{"type":"TableCell","children":[{"type":"Str","value":"对短作业有利，对长作业不利，作业的运行时间是用户提供的，并不一定真实","loc":{"start":{"line":69,"column":202},"end":{"line":69,"column":236}},"range":[2054,2088],"raw":"对短作业有利，对长作业不利，作业的运行时间是用户提供的，并不一定真实"}],"loc":{"start":{"line":69,"column":201},"end":{"line":69,"column":238}},"range":[2053,2090],"raw":" 对短作业有利，对长作业不利，作业的运行时间是用户提供的，并不一定真实 |"},{"type":"TableCell","children":[{"type":"Str","value":"会","loc":{"start":{"line":69,"column":239},"end":{"line":69,"column":240}},"range":[2091,2092],"raw":"会"}],"loc":{"start":{"line":69,"column":238},"end":{"line":69,"column":294}},"range":[2090,2146],"raw":" 会                                                     |"}],"loc":{"start":{"line":69,"column":0},"end":{"line":69,"column":294}},"range":[1852,2146],"raw":"|         短作业优先(Shortest Job First, SJF)         | 最短的作业/进程优先得到服务       | 用于作业调度，用于进程调度的时候称为“短进程优先(SPF)”   | SJF和SPF是非抢占式的，也有抢占式的版本：**最短剩余时间**(SRTN, Shortest Remaining Time Next) | “最短的”平均等待时间和平均周转时间 | 对短作业有利，对长作业不利，作业的运行时间是用户提供的，并不一定真实 | 会                                                     |"},{"type":"TableRow","children":[{"type":"TableCell","children":[{"type":"Str","value":"高响应比优先算法(HRRN, Highest Response Ratio Next)","loc":{"start":{"line":70,"column":2},"end":{"line":70,"column":45}},"range":[2149,2192],"raw":"高响应比优先算法(HRRN, Highest Response Ratio Next)"}],"loc":{"start":{"line":70,"column":0},"end":{"line":70,"column":47}},"range":[2147,2194],"raw":"| 高响应比优先算法(HRRN, Highest Response Ratio Next) |"},{"type":"TableCell","children":[{"type":"Str","value":"选择响应比最高的作业/进程为其服务","loc":{"start":{"line":70,"column":48},"end":{"line":70,"column":65}},"range":[2195,2212],"raw":"选择响应比最高的作业/进程为其服务"}],"loc":{"start":{"line":70,"column":47},"end":{"line":70,"column":67}},"range":[2194,2214],"raw":" 选择响应比最高的作业/进程为其服务 |"},{"type":"TableCell","children":[{"type":"Str","value":"可以用于作业调度、也可以用进程调度","loc":{"start":{"line":70,"column":68},"end":{"line":70,"column":85}},"range":[2215,2232],"raw":"可以用于作业调度、也可以用进程调度"}],"loc":{"start":{"line":70,"column":67},"end":{"line":70,"column":108}},"range":[2214,2255],"raw":" 可以用于作业调度、也可以用进程调度                      |"},{"type":"TableCell","children":[{"type":"Str","value":"非抢占式","loc":{"start":{"line":70,"column":109},"end":{"line":70,"column":113}},"range":[2256,2260],"raw":"非抢占式"}],"loc":{"start":{"line":70,"column":108},"end":{"line":70,"column":167}},"range":[2255,2314],"raw":" 非抢占式                                                     |"},{"type":"TableCell","children":[{"type":"Str","value":"综合考虑了等待时间和运行时间","loc":{"start":{"line":70,"column":168},"end":{"line":70,"column":182}},"range":[2315,2329],"raw":"综合考虑了等待时间和运行时间"}],"loc":{"start":{"line":70,"column":167},"end":{"line":70,"column":190}},"range":[2314,2337],"raw":" 综合考虑了等待时间和运行时间       |"},{"type":"TableCell","children":[],"loc":{"start":{"line":70,"column":190},"end":{"line":70,"column":253}},"range":[2337,2400],"raw":"                                                              |"},{"type":"TableCell","children":[{"type":"Str","value":"随着等待时间越大，响应比也会越来越大，所以不会产生饥饿","loc":{"start":{"line":70,"column":254},"end":{"line":70,"column":281}},"range":[2401,2428],"raw":"随着等待时间越大，响应比也会越来越大，所以不会产生饥饿"}],"loc":{"start":{"line":70,"column":253},"end":{"line":70,"column":283}},"range":[2400,2430],"raw":" 随着等待时间越大，响应比也会越来越大，所以不会产生饥饿 |"}],"loc":{"start":{"line":70,"column":0},"end":{"line":70,"column":283}},"range":[2147,2430],"raw":"| 高响应比优先算法(HRRN, Highest Response Ratio Next) | 选择响应比最高的作业/进程为其服务 | 可以用于作业调度、也可以用进程调度                      | 非抢占式                                                     | 综合考虑了等待时间和运行时间       |                                                              | 随着等待时间越大，响应比也会越来越大，所以不会产生饥饿 |"}],"loc":{"start":{"line":66,"column":0},"end":{"line":70,"column":283}},"range":[838,2430],"raw":"|                        算法                         | 规则                              | 可用于作业/进程调度                                     | 抢占                                                         | 优点                               | 缺点                                                         | 饥饿                                                   |\n| :-------------------------------------------------: | --------------------------------- | ------------------------------------------------------- | ------------------------------------------------------------ | ---------------------------------- | ------------------------------------------------------------ | ------------------------------------------------------ |\n|      先来先服务(First Come First Serve, FCFS)       | 按照作业/进程的到达顺序进行服务   | 先到达后备队列（就绪队列）的作业/进程先得到处理机的处理 | 非抢占                                                       | 公平，实现简单                     | 排在长进程后面的短进程需要等待很长的时间才能被服务，**对短作业不利，对长作业也有利** | 不会                                                   |\n|         短作业优先(Shortest Job First, SJF)         | 最短的作业/进程优先得到服务       | 用于作业调度，用于进程调度的时候称为“短进程优先(SPF)”   | SJF和SPF是非抢占式的，也有抢占式的版本：**最短剩余时间**(SRTN, Shortest Remaining Time Next) | “最短的”平均等待时间和平均周转时间 | 对短作业有利，对长作业不利，作业的运行时间是用户提供的，并不一定真实 | 会                                                     |\n| 高响应比优先算法(HRRN, Highest Response Ratio Next) | 选择响应比最高的作业/进程为其服务 | 可以用于作业调度、也可以用进程调度                      | 非抢占式                                                     | 综合考虑了等待时间和运行时间       |                                                              | 随着等待时间越大，响应比也会越来越大，所以不会产生饥饿 |"},{"type":"BlockQuote","children":[{"type":"Paragraph","children":[{"type":"Str","value":"在所有的进程可运行的时间相同时，SJF调度算法的平均等待时间、平均周转时间最少","loc":{"start":{"line":72,"column":2},"end":{"line":72,"column":41}},"range":[2434,2473],"raw":"在所有的进程可运行的时间相同时，SJF调度算法的平均等待时间、平均周转时间最少"}],"loc":{"start":{"line":72,"column":2},"end":{"line":72,"column":41}},"range":[2434,2473],"raw":"在所有的进程可运行的时间相同时，SJF调度算法的平均等待时间、平均周转时间最少"},{"type":"Paragraph","children":[{"type":"Strong","children":[{"type":"Str","value":"$响应比=\\frac{等待时间+要求服务时间}{要求服务时间}$","loc":{"start":{"line":74,"column":4},"end":{"line":74,"column":36}},"range":[2480,2512],"raw":"$响应比=\\frac{等待时间+要求服务时间}{要求服务时间}$"}],"loc":{"start":{"line":74,"column":2},"end":{"line":74,"column":38}},"range":[2478,2514],"raw":"**$响应比=\\frac{等待时间+要求服务时间}{要求服务时间}$**"}],"loc":{"start":{"line":74,"column":2},"end":{"line":74,"column":38}},"range":[2478,2514],"raw":"**$响应比=\\frac{等待时间+要求服务时间}{要求服务时间}$**"}],"loc":{"start":{"line":72,"column":0},"end":{"line":74,"column":38}},"range":[2432,2514],"raw":"> 在所有的进程可运行的时间相同时，SJF调度算法的平均等待时间、平均周转时间最少\n>\n> **$响应比=\\frac{等待时间+要求服务时间}{要求服务时间}$**"},{"type":"Header","depth":3,"children":[{"type":"Str","value":"时间片轮转调度、优先级调度和多级反馈队列调度","loc":{"start":{"line":76,"column":4},"end":{"line":76,"column":26}},"range":[2520,2542],"raw":"时间片轮转调度、优先级调度和多级反馈队列调度"}],"loc":{"start":{"line":76,"column":0},"end":{"line":76,"column":26}},"range":[2516,2542],"raw":"### 时间片轮转调度、优先级调度和多级反馈队列调度"},{"type":"Table","align":[null,"center",null,null,null,null,null],"children":[{"type":"TableRow","children":[{"type":"TableCell","children":[{"type":"Str","value":"算法","loc":{"start":{"line":78,"column":2},"end":{"line":78,"column":4}},"range":[2546,2548],"raw":"算法"}],"loc":{"start":{"line":78,"column":0},"end":{"line":78,"column":18}},"range":[2544,2562],"raw":"| 算法             |"},{"type":"TableCell","children":[{"type":"Str","value":"规则","loc":{"start":{"line":78,"column":47},"end":{"line":78,"column":49}},"range":[2591,2593],"raw":"规则"}],"loc":{"start":{"line":78,"column":18},"end":{"line":78,"column":79}},"range":[2562,2623],"raw":"                             规则                             |"},{"type":"TableCell","children":[{"type":"Str","value":"可用于作业/进程","loc":{"start":{"line":78,"column":80},"end":{"line":78,"column":88}},"range":[2624,2632],"raw":"可用于作业/进程"}],"loc":{"start":{"line":78,"column":79},"end":{"line":78,"column":133}},"range":[2623,2677],"raw":" 可用于作业/进程                                            |"},{"type":"TableCell","children":[{"type":"Str","value":"抢占","loc":{"start":{"line":78,"column":134},"end":{"line":78,"column":136}},"range":[2678,2680],"raw":"抢占"}],"loc":{"start":{"line":78,"column":133},"end":{"line":78,"column":185}},"range":[2677,2729],"raw":" 抢占                                                |"},{"type":"TableCell","children":[{"type":"Str","value":"优点","loc":{"start":{"line":78,"column":186},"end":{"line":78,"column":188}},"range":[2730,2732],"raw":"优点"}],"loc":{"start":{"line":78,"column":185},"end":{"line":78,"column":246}},"range":[2729,2790],"raw":" 优点                                                         |"},{"type":"TableCell","children":[{"type":"Str","value":"缺点","loc":{"start":{"line":78,"column":247},"end":{"line":78,"column":249}},"range":[2791,2793],"raw":"缺点"}],"loc":{"start":{"line":78,"column":246},"end":{"line":78,"column":307}},"range":[2790,2851],"raw":" 缺点                                                         |"},{"type":"TableCell","children":[{"type":"Str","value":"饥饿","loc":{"start":{"line":78,"column":308},"end":{"line":78,"column":310}},"range":[2852,2854],"raw":"饥饿"}],"loc":{"start":{"line":78,"column":307},"end":{"line":78,"column":312}},"range":[2851,2856],"raw":" 饥饿 |"}],"loc":{"start":{"line":78,"column":0},"end":{"line":78,"column":312}},"range":[2544,2856],"raw":"| 算法             |                             规则                             | 可用于作业/进程                                            | 抢占                                                | 优点                                                         | 缺点                                                         | 饥饿 |"},{"type":"TableRow","children":[{"type":"TableCell","children":[{"type":"Str","value":"时间片轮流","loc":{"start":{"line":80,"column":2},"end":{"line":80,"column":7}},"range":[3191,3196],"raw":"时间片轮流"}],"loc":{"start":{"line":80,"column":0},"end":{"line":80,"column":15}},"range":[3189,3204],"raw":"| 时间片轮流       |"},{"type":"TableCell","children":[{"type":"Str","value":"按照各个进程到达就绪队列的顺序，轮流让各个进程执行一个时间片。","loc":{"start":{"line":80,"column":16},"end":{"line":80,"column":47}},"range":[3205,3236],"raw":"按照各个进程到达就绪队列的顺序，轮流让各个进程执行一个时间片。"},{"type":"Strong","children":[{"type":"Str","value":"如果时间片太大，会退化成先来先服务去调度","loc":{"start":{"line":80,"column":49},"end":{"line":80,"column":69}},"range":[3238,3258],"raw":"如果时间片太大，会退化成先来先服务去调度"}],"loc":{"start":{"line":80,"column":47},"end":{"line":80,"column":71}},"range":[3236,3260],"raw":"**如果时间片太大，会退化成先来先服务去调度**"},{"type":"Str","value":"。时间片太小会导致进程切换过于频繁，花大量的时间进行进程切换。","loc":{"start":{"line":80,"column":71},"end":{"line":80,"column":102}},"range":[3260,3291],"raw":"。时间片太小会导致进程切换过于频繁，花大量的时间进行进程切换。"}],"loc":{"start":{"line":80,"column":15},"end":{"line":80,"column":104}},"range":[3204,3293],"raw":" 按照各个进程到达就绪队列的顺序，轮流让各个进程执行一个时间片。**如果时间片太大，会退化成先来先服务去调度**。时间片太小会导致进程切换过于频繁，花大量的时间进行进程切换。 |"},{"type":"TableCell","children":[{"type":"Str","value":"用于进程调度，作业只有建立了相应的进程之后才能被分配时间片","loc":{"start":{"line":80,"column":105},"end":{"line":80,"column":134}},"range":[3294,3323],"raw":"用于进程调度，作业只有建立了相应的进程之后才能被分配时间片"}],"loc":{"start":{"line":80,"column":104},"end":{"line":80,"column":136}},"range":[3293,3325],"raw":" 用于进程调度，作业只有建立了相应的进程之后才能被分配时间片 |"},{"type":"TableCell","children":[{"type":"Str","value":"抢占式。由时钟装置发出时钟中断来通知CPU时间片已到。","loc":{"start":{"line":80,"column":137},"end":{"line":80,"column":164}},"range":[3326,3353],"raw":"抢占式。由时钟装置发出时钟中断来通知CPU时间片已到。"}],"loc":{"start":{"line":80,"column":136},"end":{"line":80,"column":166}},"range":[3325,3355],"raw":" 抢占式。由时钟装置发出时钟中断来通知CPU时间片已到。 |"},{"type":"TableCell","children":[{"type":"Str","value":"公平，响应快，适用于分时操作系统","loc":{"start":{"line":80,"column":167},"end":{"line":80,"column":183}},"range":[3356,3372],"raw":"公平，响应快，适用于分时操作系统"}],"loc":{"start":{"line":80,"column":166},"end":{"line":80,"column":213}},"range":[3355,3402],"raw":" 公平，响应快，适用于分时操作系统                             |"},{"type":"TableCell","children":[{"type":"Str","value":"进程切换有一定的开销，且不区分任务的紧急程度","loc":{"start":{"line":80,"column":214},"end":{"line":80,"column":236}},"range":[3403,3425],"raw":"进程切换有一定的开销，且不区分任务的紧急程度"}],"loc":{"start":{"line":80,"column":213},"end":{"line":80,"column":254}},"range":[3402,3443],"raw":" 进程切换有一定的开销，且不区分任务的紧急程度                 |"},{"type":"TableCell","children":[{"type":"Str","value":"不会","loc":{"start":{"line":80,"column":255},"end":{"line":80,"column":257}},"range":[3444,3446],"raw":"不会"}],"loc":{"start":{"line":80,"column":254},"end":{"line":80,"column":259}},"range":[3443,3448],"raw":" 不会 |"}],"loc":{"start":{"line":80,"column":0},"end":{"line":80,"column":259}},"range":[3189,3448],"raw":"| 时间片轮流       | 按照各个进程到达就绪队列的顺序，轮流让各个进程执行一个时间片。**如果时间片太大，会退化成先来先服务去调度**。时间片太小会导致进程切换过于频繁，花大量的时间进行进程切换。 | 用于进程调度，作业只有建立了相应的进程之后才能被分配时间片 | 抢占式。由时钟装置发出时钟中断来通知CPU时间片已到。 | 公平，响应快，适用于分时操作系统                             | 进程切换有一定的开销，且不区分任务的紧急程度                 | 不会 |"},{"type":"TableRow","children":[{"type":"TableCell","children":[{"type":"Str","value":"优先级调度算法","loc":{"start":{"line":81,"column":2},"end":{"line":81,"column":9}},"range":[3451,3458],"raw":"优先级调度算法"}],"loc":{"start":{"line":81,"column":0},"end":{"line":81,"column":13}},"range":[3449,3462],"raw":"| 优先级调度算法   |"},{"type":"TableCell","children":[{"type":"Str","value":"为每一个作业/进程设置一个优先级，调度时选择优先级最高的作业/进程","loc":{"start":{"line":81,"column":14},"end":{"line":81,"column":47}},"range":[3463,3496],"raw":"为每一个作业/进程设置一个优先级，调度时选择优先级最高的作业/进程"}],"loc":{"start":{"line":81,"column":13},"end":{"line":81,"column":49}},"range":[3462,3498],"raw":" 为每一个作业/进程设置一个优先级，调度时选择优先级最高的作业/进程 |"},{"type":"TableCell","children":[{"type":"Str","value":"既可以用于作业调度，也可以用于进程调度","loc":{"start":{"line":81,"column":50},"end":{"line":81,"column":69}},"range":[3499,3518],"raw":"既可以用于作业调度，也可以用于进程调度"}],"loc":{"start":{"line":81,"column":49},"end":{"line":81,"column":91}},"range":[3498,3540],"raw":" 既可以用于作业调度，也可以用于进程调度                     |"},{"type":"TableCell","children":[{"type":"Str","value":"抢占式、非抢占式","loc":{"start":{"line":81,"column":92},"end":{"line":81,"column":100}},"range":[3541,3549],"raw":"抢占式、非抢占式"}],"loc":{"start":{"line":81,"column":91},"end":{"line":81,"column":137}},"range":[3540,3586],"raw":" 抢占式、非抢占式                                    |"},{"type":"TableCell","children":[{"type":"Str","value":"区分任务的紧急程度，适用于实时操作系统","loc":{"start":{"line":81,"column":138},"end":{"line":81,"column":157}},"range":[3587,3606],"raw":"区分任务的紧急程度，适用于实时操作系统"}],"loc":{"start":{"line":81,"column":137},"end":{"line":81,"column":181}},"range":[3586,3630],"raw":" 区分任务的紧急程度，适用于实时操作系统                       |"},{"type":"TableCell","children":[{"type":"Str","value":"如果不断地有高优先级地进程到达，可能会导致低优先级地进程饥饿","loc":{"start":{"line":81,"column":182},"end":{"line":81,"column":212}},"range":[3631,3661],"raw":"如果不断地有高优先级地进程到达，可能会导致低优先级地进程饥饿"}],"loc":{"start":{"line":81,"column":181},"end":{"line":81,"column":214}},"range":[3630,3663],"raw":" 如果不断地有高优先级地进程到达，可能会导致低优先级地进程饥饿 |"},{"type":"TableCell","children":[{"type":"Str","value":"会","loc":{"start":{"line":81,"column":215},"end":{"line":81,"column":216}},"range":[3664,3665],"raw":"会"}],"loc":{"start":{"line":81,"column":214},"end":{"line":81,"column":220}},"range":[3663,3669],"raw":" 会   |"}],"loc":{"start":{"line":81,"column":0},"end":{"line":81,"column":220}},"range":[3449,3669],"raw":"| 优先级调度算法   | 为每一个作业/进程设置一个优先级，调度时选择优先级最高的作业/进程 | 既可以用于作业调度，也可以用于进程调度                     | 抢占式、非抢占式                                    | 区分任务的紧急程度，适用于实时操作系统                       | 如果不断地有高优先级地进程到达，可能会导致低优先级地进程饥饿 | 会   |"},{"type":"TableRow","children":[{"type":"TableCell","children":[{"type":"Str","value":"多级反馈队列调度","loc":{"start":{"line":82,"column":2},"end":{"line":82,"column":10}},"range":[3672,3680],"raw":"多级反馈队列调度"}],"loc":{"start":{"line":82,"column":0},"end":{"line":82,"column":12}},"range":[3670,3682],"raw":"| 多级反馈队列调度 |"},{"type":"TableCell","children":[{"type":"Str","value":"1. 设置多级就绪队列，各级队列优先级从高到低，时间片从小到大；2. 新进程到达时进入第1级队列，如果用完时间片进程还未结束，则进程进入下一级队列地队尾，如果此时已经是最下级地队列，重新放回该队列队尾；3. 第k级为空时，第k+1级队头地进程分配时间片","loc":{"start":{"line":82,"column":13},"end":{"line":82,"column":139}},"range":[3683,3809],"raw":"1. 设置多级就绪队列，各级队列优先级从高到低，时间片从小到大；2. 新进程到达时进入第1级队列，如果用完时间片进程还未结束，则进程进入下一级队列地队尾，如果此时已经是最下级地队列，重新放回该队列队尾；3. 第k级为空时，第k+1级队头地进程分配时间片"}],"loc":{"start":{"line":82,"column":12},"end":{"line":82,"column":141}},"range":[3682,3811],"raw":" 1. 设置多级就绪队列，各级队列优先级从高到低，时间片从小到大；2. 新进程到达时进入第1级队列，如果用完时间片进程还未结束，则进程进入下一级队列地队尾，如果此时已经是最下级地队列，重新放回该队列队尾；3. 第k级为空时，第k+1级队头地进程分配时间片 |"},{"type":"TableCell","children":[{"type":"Str","value":"用于进程调度","loc":{"start":{"line":82,"column":142},"end":{"line":82,"column":148}},"range":[3812,3818],"raw":"用于进程调度"}],"loc":{"start":{"line":82,"column":141},"end":{"line":82,"column":196}},"range":[3811,3866],"raw":" 用于进程调度                                               |"},{"type":"TableCell","children":[{"type":"Str","value":"抢占式","loc":{"start":{"line":82,"column":197},"end":{"line":82,"column":200}},"range":[3867,3870],"raw":"抢占式"}],"loc":{"start":{"line":82,"column":196},"end":{"line":82,"column":247}},"range":[3866,3917],"raw":" 抢占式                                              |"},{"type":"TableCell","children":[{"type":"Str","value":"对各类进程相对公平；对每个新到达地进程都可以很快响应；段进程只用很少的时间就可以完成；不必实现估计进程的运行时间；可以灵活调整对割各类进程的偏好程度","loc":{"start":{"line":82,"column":248},"end":{"line":82,"column":322}},"range":[3918,3992],"raw":"对各类进程相对公平；对每个新到达地进程都可以很快响应；段进程只用很少的时间就可以完成；不必实现估计进程的运行时间；可以灵活调整对割各类进程的偏好程度"}],"loc":{"start":{"line":82,"column":247},"end":{"line":82,"column":324}},"range":[3917,3994],"raw":" 对各类进程相对公平；对每个新到达地进程都可以很快响应；段进程只用很少的时间就可以完成；不必实现估计进程的运行时间；可以灵活调整对割各类进程的偏好程度 |"},{"type":"TableCell","children":[],"loc":{"start":{"line":82,"column":324},"end":{"line":82,"column":387}},"range":[3994,4057],"raw":"                                                              |"},{"type":"TableCell","children":[{"type":"Str","value":"会","loc":{"start":{"line":82,"column":388},"end":{"line":82,"column":389}},"range":[4058,4059],"raw":"会"}],"loc":{"start":{"line":82,"column":387},"end":{"line":82,"column":393}},"range":[4057,4063],"raw":" 会   |"}],"loc":{"start":{"line":82,"column":0},"end":{"line":82,"column":393}},"range":[3670,4063],"raw":"| 多级反馈队列调度 | 1. 设置多级就绪队列，各级队列优先级从高到低，时间片从小到大；2. 新进程到达时进入第1级队列，如果用完时间片进程还未结束，则进程进入下一级队列地队尾，如果此时已经是最下级地队列，重新放回该队列队尾；3. 第k级为空时，第k+1级队头地进程分配时间片 | 用于进程调度                                               | 抢占式                                              | 对各类进程相对公平；对每个新到达地进程都可以很快响应；段进程只用很少的时间就可以完成；不必实现估计进程的运行时间；可以灵活调整对割各类进程的偏好程度 |                                                              | 会   |"}],"loc":{"start":{"line":78,"column":0},"end":{"line":82,"column":393}},"range":[2544,4063],"raw":"| 算法             |                             规则                             | 可用于作业/进程                                            | 抢占                                                | 优点                                                         | 缺点                                                         | 饥饿 |\n| ---------------- | :----------------------------------------------------------: | ---------------------------------------------------------- | --------------------------------------------------- | ------------------------------------------------------------ | ------------------------------------------------------------ | ---- |\n| 时间片轮流       | 按照各个进程到达就绪队列的顺序，轮流让各个进程执行一个时间片。**如果时间片太大，会退化成先来先服务去调度**。时间片太小会导致进程切换过于频繁，花大量的时间进行进程切换。 | 用于进程调度，作业只有建立了相应的进程之后才能被分配时间片 | 抢占式。由时钟装置发出时钟中断来通知CPU时间片已到。 | 公平，响应快，适用于分时操作系统                             | 进程切换有一定的开销，且不区分任务的紧急程度                 | 不会 |\n| 优先级调度算法   | 为每一个作业/进程设置一个优先级，调度时选择优先级最高的作业/进程 | 既可以用于作业调度，也可以用于进程调度                     | 抢占式、非抢占式                                    | 区分任务的紧急程度，适用于实时操作系统                       | 如果不断地有高优先级地进程到达，可能会导致低优先级地进程饥饿 | 会   |\n| 多级反馈队列调度 | 1. 设置多级就绪队列，各级队列优先级从高到低，时间片从小到大；2. 新进程到达时进入第1级队列，如果用完时间片进程还未结束，则进程进入下一级队列地队尾，如果此时已经是最下级地队列，重新放回该队列队尾；3. 第k级为空时，第k+1级队头地进程分配时间片 | 用于进程调度                                               | 抢占式                                              | 对各类进程相对公平；对每个新到达地进程都可以很快响应；段进程只用很少的时间就可以完成；不必实现估计进程的运行时间；可以灵活调整对割各类进程的偏好程度 |                                                              | 会   |"},{"type":"BlockQuote","children":[{"type":"Paragraph","children":[{"type":"Str","value":"设计时间片的大小要让进程切换到时间开销占比不超过1%。","loc":{"start":{"line":84,"column":2},"end":{"line":84,"column":29}},"range":[4067,4094],"raw":"设计时间片的大小要让进程切换到时间开销占比不超过1%。"}],"loc":{"start":{"line":84,"column":2},"end":{"line":84,"column":29}},"range":[4067,4094],"raw":"设计时间片的大小要让进程切换到时间开销占比不超过1%。"}],"loc":{"start":{"line":84,"column":0},"end":{"line":84,"column":29}},"range":[4065,4094],"raw":"> 设计时间片的大小要让进程切换到时间开销占比不超过1%。"}],"loc":{"start":{"line":1,"column":0},"end":{"line":86,"column":0}},"range":[0,4096],"raw":"---\ntitle: '调度算法'\ntags: ['操作系统','进程']\n---\n# 调度算法\n\n## 调度算法好坏的评价指标\n\n### CPU利用率\n\nCPU的造价极其昂贵，因此人们会希望让CPU尽可能工作。\n\nCPU利用率：指CPU“忙碌”的时间站总时间的比例\n\n$利用率=\\frac{忙碌的时间}{总时间}$\n\n#### 甘特图\n\n用于求多道程序并发执行的情况下的CPU利用率\n\n### 系统吞吐量\n\n系统吞吐量：单位时间内完成作业的数量\n\n$系统吞吐量=\\frac{总共完成了多少道作业}{总共花了多少时间}$\n\n### 周转时间\n\n周转时间：从作业**提交给系统**开始到**作业完成**，总共花费的时间。\n\n周转时间包括：\n\n- 作业在外存上等待作业调度（高级调度）的时间\n- 进程在就绪队列上等待进程调度的时间（可能发生多次）\n- 进程在CPU上执行的时间（可能发生多次）\n- 进程等待I/O操作完成的时间（可能发生多次）\n\n作业的周转时间 = 作业完成的时间 - 作业提交的时间\n\n$平均周转时间 = \\frac{各作业周转时间之和}{作业数}$\n\n$带权周转时间=\\frac{作业周转时间}{作业实际运行时间}=\\frac{作业完成时间-作业提交时间}{作业实际运行时间}$\n\n### 等待时间\n\n等待时间：指进程/作业处于等待处理机状态时间之和，等待时间越长，用户满意度越低\n\n对于进程来说，等待时间就是进程建立以后等待被服务的时间之和，在等待I/O完成期间其实进程也是在被服务的，不计入等待时间。\n\n对于作业来说，等待时间还要考虑建立进程之后的等待时间，还要加上作业在外存后背队列中等待的时间。\n\n$平均等待时间=\\frac{所有作业的总等待时间}{作业的数量}$，可以用于评价整体性能。\n\n### 响应时间\n\n响应时间：用户从提交请求到首次产生响应所用的时间\n\n\n\n*****\n\n## 调度算法\n\n### 先来先服务、短作业优先和高响应比优先算法\n\n|                        算法                         | 规则                              | 可用于作业/进程调度                                     | 抢占                                                         | 优点                               | 缺点                                                         | 饥饿                                                   |\n| :-------------------------------------------------: | --------------------------------- | ------------------------------------------------------- | ------------------------------------------------------------ | ---------------------------------- | ------------------------------------------------------------ | ------------------------------------------------------ |\n|      先来先服务(First Come First Serve, FCFS)       | 按照作业/进程的到达顺序进行服务   | 先到达后备队列（就绪队列）的作业/进程先得到处理机的处理 | 非抢占                                                       | 公平，实现简单                     | 排在长进程后面的短进程需要等待很长的时间才能被服务，**对短作业不利，对长作业也有利** | 不会                                                   |\n|         短作业优先(Shortest Job First, SJF)         | 最短的作业/进程优先得到服务       | 用于作业调度，用于进程调度的时候称为“短进程优先(SPF)”   | SJF和SPF是非抢占式的，也有抢占式的版本：**最短剩余时间**(SRTN, Shortest Remaining Time Next) | “最短的”平均等待时间和平均周转时间 | 对短作业有利，对长作业不利，作业的运行时间是用户提供的，并不一定真实 | 会                                                     |\n| 高响应比优先算法(HRRN, Highest Response Ratio Next) | 选择响应比最高的作业/进程为其服务 | 可以用于作业调度、也可以用进程调度                      | 非抢占式                                                     | 综合考虑了等待时间和运行时间       |                                                              | 随着等待时间越大，响应比也会越来越大，所以不会产生饥饿 |\n\n> 在所有的进程可运行的时间相同时，SJF调度算法的平均等待时间、平均周转时间最少\n>\n> **$响应比=\\frac{等待时间+要求服务时间}{要求服务时间}$**\n\n### 时间片轮转调度、优先级调度和多级反馈队列调度\n\n| 算法             |                             规则                             | 可用于作业/进程                                            | 抢占                                                | 优点                                                         | 缺点                                                         | 饥饿 |\n| ---------------- | :----------------------------------------------------------: | ---------------------------------------------------------- | --------------------------------------------------- | ------------------------------------------------------------ | ------------------------------------------------------------ | ---- |\n| 时间片轮流       | 按照各个进程到达就绪队列的顺序，轮流让各个进程执行一个时间片。**如果时间片太大，会退化成先来先服务去调度**。时间片太小会导致进程切换过于频繁，花大量的时间进行进程切换。 | 用于进程调度，作业只有建立了相应的进程之后才能被分配时间片 | 抢占式。由时钟装置发出时钟中断来通知CPU时间片已到。 | 公平，响应快，适用于分时操作系统                             | 进程切换有一定的开销，且不区分任务的紧急程度                 | 不会 |\n| 优先级调度算法   | 为每一个作业/进程设置一个优先级，调度时选择优先级最高的作业/进程 | 既可以用于作业调度，也可以用于进程调度                     | 抢占式、非抢占式                                    | 区分任务的紧急程度，适用于实时操作系统                       | 如果不断地有高优先级地进程到达，可能会导致低优先级地进程饥饿 | 会   |\n| 多级反馈队列调度 | 1. 设置多级就绪队列，各级队列优先级从高到低，时间片从小到大；2. 新进程到达时进入第1级队列，如果用完时间片进程还未结束，则进程进入下一级队列地队尾，如果此时已经是最下级地队列，重新放回该队列队尾；3. 第k级为空时，第k+1级队头地进程分配时间片 | 用于进程调度                                               | 抢占式                                              | 对各类进程相对公平；对每个新到达地进程都可以很快响应；段进程只用很少的时间就可以完成；不必实现估计进程的运行时间；可以灵活调整对割各类进程的偏好程度 |                                                              | 会   |\n\n> 设计时间片的大小要让进程切换到时间开销占比不超过1%。\n\n"},"catalogue":{"title":"调度算法","json-path":"2020-08-12-调度算法.json","mdate":"2022-08-30T14:19:31.454Z","tags":["操作系统","进程"]}}