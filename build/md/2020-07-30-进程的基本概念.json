{"ast":{"type":"Document","children":[{"type":"Yaml","value":"tags: ['操作系统','进程']","loc":{"start":{"line":1,"column":0},"end":{"line":3,"column":3}},"range":[0,27],"raw":"---\ntags: ['操作系统','进程']\n---"},{"type":"Header","depth":1,"children":[{"type":"Str","value":"进程的基本概念","loc":{"start":{"line":5,"column":2},"end":{"line":5,"column":9}},"range":[31,38],"raw":"进程的基本概念"}],"loc":{"start":{"line":5,"column":0},"end":{"line":5,"column":9}},"range":[29,38],"raw":"# 进程的基本概念"},{"type":"Header","depth":2,"children":[{"type":"Str","value":"程序的顺序执行及其特征","loc":{"start":{"line":7,"column":3},"end":{"line":7,"column":14}},"range":[43,54],"raw":"程序的顺序执行及其特征"}],"loc":{"start":{"line":7,"column":0},"end":{"line":7,"column":14}},"range":[40,54],"raw":"## 程序的顺序执行及其特征"},{"type":"Paragraph","children":[{"type":"Str","value":"各个程序段操作之间必须按照某种先后次序执行，仅当前一操作执行完成后，后续的操作才能继续运行。","loc":{"start":{"line":9,"column":0},"end":{"line":9,"column":46}},"range":[56,102],"raw":"各个程序段操作之间必须按照某种先后次序执行，仅当前一操作执行完成后，后续的操作才能继续运行。"}],"loc":{"start":{"line":9,"column":0},"end":{"line":9,"column":46}},"range":[56,102],"raw":"各个程序段操作之间必须按照某种先后次序执行，仅当前一操作执行完成后，后续的操作才能继续运行。"},{"type":"Header","depth":3,"children":[{"type":"Str","value":"程序顺序执行的特征","loc":{"start":{"line":11,"column":4},"end":{"line":11,"column":13}},"range":[108,117],"raw":"程序顺序执行的特征"}],"loc":{"start":{"line":11,"column":0},"end":{"line":11,"column":13}},"range":[104,117],"raw":"### 程序顺序执行的特征"},{"type":"List","ordered":true,"start":1,"spread":false,"children":[{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"顺序性：严格按照程序制定的顺序执行","loc":{"start":{"line":13,"column":3},"end":{"line":13,"column":20}},"range":[122,139],"raw":"顺序性：严格按照程序制定的顺序执行"}],"loc":{"start":{"line":13,"column":3},"end":{"line":13,"column":20}},"range":[122,139],"raw":"顺序性：严格按照程序制定的顺序执行"}],"loc":{"start":{"line":13,"column":0},"end":{"line":13,"column":20}},"range":[119,139],"raw":"1. 顺序性：严格按照程序制定的顺序执行"},{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"封闭性：程序在封闭的环境下运行，程序运行时独占全机资源，资源的状态（除初始状态）只有本程序可以改变，且一旦程序开始，执行的结构不受外界的影响。","loc":{"start":{"line":14,"column":3},"end":{"line":14,"column":74}},"range":[143,214],"raw":"封闭性：程序在封闭的环境下运行，程序运行时独占全机资源，资源的状态（除初始状态）只有本程序可以改变，且一旦程序开始，执行的结构不受外界的影响。"}],"loc":{"start":{"line":14,"column":3},"end":{"line":14,"column":74}},"range":[143,214],"raw":"封闭性：程序在封闭的环境下运行，程序运行时独占全机资源，资源的状态（除初始状态）只有本程序可以改变，且一旦程序开始，执行的结构不受外界的影响。"}],"loc":{"start":{"line":14,"column":0},"end":{"line":14,"column":74}},"range":[140,214],"raw":"2. 封闭性：程序在封闭的环境下运行，程序运行时独占全机资源，资源的状态（除初始状态）只有本程序可以改变，且一旦程序开始，执行的结构不受外界的影响。"},{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"可再现性：只要执行时的环境和初始条件相同，程序重复执行，不论程序如何执行，都将获得相同的结果。","loc":{"start":{"line":15,"column":3},"end":{"line":15,"column":50}},"range":[218,265],"raw":"可再现性：只要执行时的环境和初始条件相同，程序重复执行，不论程序如何执行，都将获得相同的结果。"}],"loc":{"start":{"line":15,"column":3},"end":{"line":15,"column":50}},"range":[218,265],"raw":"可再现性：只要执行时的环境和初始条件相同，程序重复执行，不论程序如何执行，都将获得相同的结果。"}],"loc":{"start":{"line":15,"column":0},"end":{"line":15,"column":50}},"range":[215,265],"raw":"3. 可再现性：只要执行时的环境和初始条件相同，程序重复执行，不论程序如何执行，都将获得相同的结果。"}],"loc":{"start":{"line":13,"column":0},"end":{"line":15,"column":50}},"range":[119,265],"raw":"1. 顺序性：严格按照程序制定的顺序执行\n2. 封闭性：程序在封闭的环境下运行，程序运行时独占全机资源，资源的状态（除初始状态）只有本程序可以改变，且一旦程序开始，执行的结构不受外界的影响。\n3. 可再现性：只要执行时的环境和初始条件相同，程序重复执行，不论程序如何执行，都将获得相同的结果。"},{"type":"Header","depth":2,"children":[{"type":"Str","value":"前趋图","loc":{"start":{"line":17,"column":3},"end":{"line":17,"column":6}},"range":[270,273],"raw":"前趋图"}],"loc":{"start":{"line":17,"column":0},"end":{"line":17,"column":6}},"range":[267,273],"raw":"## 前趋图"},{"type":"Paragraph","children":[{"type":"Str","value":"一个有向的","loc":{"start":{"line":19,"column":0},"end":{"line":19,"column":5}},"range":[275,280],"raw":"一个有向的"},{"type":"Strong","children":[{"type":"Str","value":"无循环","loc":{"start":{"line":19,"column":7},"end":{"line":19,"column":10}},"range":[282,285],"raw":"无循环"}],"loc":{"start":{"line":19,"column":5},"end":{"line":19,"column":12}},"range":[280,287],"raw":"**无循环**"},{"type":"Str","value":"图，记为DAG(Directed Acyclic Graph)，用于描述进程之间的执行先后关系。","loc":{"start":{"line":19,"column":12},"end":{"line":19,"column":60}},"range":[287,335],"raw":"图，记为DAG(Directed Acyclic Graph)，用于描述进程之间的执行先后关系。"}],"loc":{"start":{"line":19,"column":0},"end":{"line":19,"column":60}},"range":[275,335],"raw":"一个有向的**无循环**图，记为DAG(Directed Acyclic Graph)，用于描述进程之间的执行先后关系。"},{"type":"Paragraph","children":[{"type":"Html","value":"<font color=\"red\">","loc":{"start":{"line":21,"column":0},"end":{"line":21,"column":18}},"range":[337,355],"raw":"<font color=\"red\">"},{"type":"Str","value":"前趋图中必须不存在循环，循环的前趋关系是无法满足的。","loc":{"start":{"line":21,"column":18},"end":{"line":21,"column":44}},"range":[355,381],"raw":"前趋图中必须不存在循环，循环的前趋关系是无法满足的。"},{"type":"Html","value":"</font>","loc":{"start":{"line":21,"column":44},"end":{"line":21,"column":51}},"range":[381,388],"raw":"</font>"}],"loc":{"start":{"line":21,"column":0},"end":{"line":21,"column":51}},"range":[337,388],"raw":"<font color=\"red\">前趋图中必须不存在循环，循环的前趋关系是无法满足的。</font>"},{"type":"Paragraph","children":[{"type":"Str","value":"有向图中的有向边表示两个结点之间存在的","loc":{"start":{"line":23,"column":0},"end":{"line":23,"column":19}},"range":[390,409],"raw":"有向图中的有向边表示两个结点之间存在的"},{"type":"Strong","children":[{"type":"Str","value":"偏序（Partial Order，偏序关系或前序关系（Precedence Relation））","loc":{"start":{"line":23,"column":21},"end":{"line":23,"column":69}},"range":[411,459],"raw":"偏序（Partial Order，偏序关系或前序关系（Precedence Relation））"}],"loc":{"start":{"line":23,"column":19},"end":{"line":23,"column":71}},"range":[409,461],"raw":"**偏序（Partial Order，偏序关系或前序关系（Precedence Relation））**"},{"type":"Str","value":"，记作“$\\rightarrow$”。","loc":{"start":{"line":23,"column":71},"end":{"line":23,"column":90}},"range":[461,480],"raw":"，记作“$\\rightarrow$”。"}],"loc":{"start":{"line":23,"column":0},"end":{"line":23,"column":90}},"range":[390,480],"raw":"有向图中的有向边表示两个结点之间存在的**偏序（Partial Order，偏序关系或前序关系（Precedence Relation））**，记作“$\\rightarrow$”。"},{"type":"Paragraph","children":[{"type":"Str","value":"$\\rightarrow={(P_{i}, P_{j})\\lvert P_{i} , must , complete , before , P_{j} , start}$，如果$(P_{i}, P_{j})\\in \\rightarrow$可以记作$P_{i} \\rightarrow P_{j}$","loc":{"start":{"line":25,"column":0},"end":{"line":25,"column":155}},"range":[482,637],"raw":"$\\rightarrow=\\{(P_{i}, P_{j})\\lvert P_{i} \\, must \\, complete \\, before \\, P_{j} \\, start\\}$，如果$(P_{i}, P_{j})\\in \\rightarrow$可以记作$P_{i} \\rightarrow P_{j}$"}],"loc":{"start":{"line":25,"column":0},"end":{"line":25,"column":155}},"range":[482,637],"raw":"$\\rightarrow=\\{(P_{i}, P_{j})\\lvert P_{i} \\, must \\, complete \\, before \\, P_{j} \\, start\\}$，如果$(P_{i}, P_{j})\\in \\rightarrow$可以记作$P_{i} \\rightarrow P_{j}$"},{"type":"Paragraph","children":[{"type":"Image","title":null,"url":"https://i.loli.net/2020/07/30/TqlMZD12n7LWOgc.png","alt":"PNG??.png","loc":{"start":{"line":27,"column":0},"end":{"line":27,"column":63}},"range":[639,702],"raw":"![PNG??.png](https://i.loli.net/2020/07/30/TqlMZD12n7LWOgc.png)"}],"loc":{"start":{"line":27,"column":0},"end":{"line":27,"column":63}},"range":[639,702],"raw":"![PNG??.png](https://i.loli.net/2020/07/30/TqlMZD12n7LWOgc.png)"},{"type":"Header","depth":2,"children":[{"type":"Str","value":"程序并发执行及特征","loc":{"start":{"line":29,"column":3},"end":{"line":29,"column":12}},"range":[707,716],"raw":"程序并发执行及特征"}],"loc":{"start":{"line":29,"column":0},"end":{"line":29,"column":12}},"range":[704,716],"raw":"## 程序并发执行及特征"},{"type":"Paragraph","children":[{"type":"Str","value":"例如在输入I、计算C和输出P三者中，第i次执行之间存在$I_{i}\\rightarrow C_{i} \\rightarrow P_{i}$的前趋关系，但是并不存在$P_{i} \\rightarrow I_{i}$的关系，便可以让第i次执行和第i+1次执行并发执行。计算程序在计算第i个程序时可以对第i+1个程序进行输入操作，对第i-1个程序进行输出操作等。","loc":{"start":{"line":31,"column":0},"end":{"line":31,"column":178}},"range":[718,896],"raw":"例如在输入I、计算C和输出P三者中，第i次执行之间存在$I_{i}\\rightarrow C_{i} \\rightarrow P_{i}$的前趋关系，但是并不存在$P_{i} \\rightarrow I_{i}$的关系，便可以让第i次执行和第i+1次执行并发执行。计算程序在计算第i个程序时可以对第i+1个程序进行输入操作，对第i-1个程序进行输出操作等。"}],"loc":{"start":{"line":31,"column":0},"end":{"line":31,"column":178}},"range":[718,896],"raw":"例如在输入I、计算C和输出P三者中，第i次执行之间存在$I_{i}\\rightarrow C_{i} \\rightarrow P_{i}$的前趋关系，但是并不存在$P_{i} \\rightarrow I_{i}$的关系，便可以让第i次执行和第i+1次执行并发执行。计算程序在计算第i个程序时可以对第i+1个程序进行输入操作，对第i-1个程序进行输出操作等。"},{"type":"Paragraph","children":[{"type":"Image","title":null,"url":"https://i.loli.net/2020/07/30/RVhyWB3YLmd5lg8.png","alt":"PNG?? 2.png","loc":{"start":{"line":33,"column":0},"end":{"line":33,"column":65}},"range":[898,963],"raw":"![PNG?? 2.png](https://i.loli.net/2020/07/30/RVhyWB3YLmd5lg8.png)"}],"loc":{"start":{"line":33,"column":0},"end":{"line":33,"column":65}},"range":[898,963],"raw":"![PNG?? 2.png](https://i.loli.net/2020/07/30/RVhyWB3YLmd5lg8.png)"},{"type":"Header","depth":3,"children":[{"type":"Str","value":"并发执行的特征","loc":{"start":{"line":35,"column":4},"end":{"line":35,"column":11}},"range":[969,976],"raw":"并发执行的特征"}],"loc":{"start":{"line":35,"column":0},"end":{"line":35,"column":11}},"range":[965,976],"raw":"### 并发执行的特征"},{"type":"List","ordered":true,"start":1,"spread":false,"children":[{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"间断性：程序并发执行时，他们共享系统资源，为完成同一个任务而相互合作，这些并发程序之间形成了相互制约的关系，相互制约导致并发程序具有“执行——暂停——执行”这种间断性的活动规律。","loc":{"start":{"line":37,"column":3},"end":{"line":37,"column":92}},"range":[981,1070],"raw":"间断性：程序并发执行时，他们共享系统资源，为完成同一个任务而相互合作，这些并发程序之间形成了相互制约的关系，相互制约导致并发程序具有“执行——暂停——执行”这种间断性的活动规律。"}],"loc":{"start":{"line":37,"column":3},"end":{"line":37,"column":92}},"range":[981,1070],"raw":"间断性：程序并发执行时，他们共享系统资源，为完成同一个任务而相互合作，这些并发程序之间形成了相互制约的关系，相互制约导致并发程序具有“执行——暂停——执行”这种间断性的活动规律。"}],"loc":{"start":{"line":37,"column":0},"end":{"line":37,"column":92}},"range":[978,1070],"raw":"1. 间断性：程序并发执行时，他们共享系统资源，为完成同一个任务而相互合作，这些并发程序之间形成了相互制约的关系，相互制约导致并发程序具有“执行——暂停——执行”这种间断性的活动规律。"},{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"失去封闭性：程序并发执行时，多个程序共享系统中的各种资源，状态由多个程序共同改变，程序在执行时必然会受到其他程序的影响。","loc":{"start":{"line":38,"column":3},"end":{"line":38,"column":63}},"range":[1074,1134],"raw":"失去封闭性：程序并发执行时，多个程序共享系统中的各种资源，状态由多个程序共同改变，程序在执行时必然会受到其他程序的影响。"}],"loc":{"start":{"line":38,"column":3},"end":{"line":38,"column":63}},"range":[1074,1134],"raw":"失去封闭性：程序并发执行时，多个程序共享系统中的各种资源，状态由多个程序共同改变，程序在执行时必然会受到其他程序的影响。"}],"loc":{"start":{"line":38,"column":0},"end":{"line":38,"column":63}},"range":[1071,1134],"raw":"2. 失去封闭性：程序并发执行时，多个程序共享系统中的各种资源，状态由多个程序共同改变，程序在执行时必然会受到其他程序的影响。"},{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"不可再现性：程序在并发执行的时候失去了封闭性，导致其失去了可再现性","loc":{"start":{"line":39,"column":3},"end":{"line":39,"column":36}},"range":[1138,1171],"raw":"不可再现性：程序在并发执行的时候失去了封闭性，导致其失去了可再现性"}],"loc":{"start":{"line":39,"column":3},"end":{"line":39,"column":36}},"range":[1138,1171],"raw":"不可再现性：程序在并发执行的时候失去了封闭性，导致其失去了可再现性"}],"loc":{"start":{"line":39,"column":0},"end":{"line":39,"column":36}},"range":[1135,1171],"raw":"3. 不可再现性：程序在并发执行的时候失去了封闭性，导致其失去了可再现性"}],"loc":{"start":{"line":37,"column":0},"end":{"line":39,"column":36}},"range":[978,1171],"raw":"1. 间断性：程序并发执行时，他们共享系统资源，为完成同一个任务而相互合作，这些并发程序之间形成了相互制约的关系，相互制约导致并发程序具有“执行——暂停——执行”这种间断性的活动规律。\n2. 失去封闭性：程序并发执行时，多个程序共享系统中的各种资源，状态由多个程序共同改变，程序在执行时必然会受到其他程序的影响。\n3. 不可再现性：程序在并发执行的时候失去了封闭性，导致其失去了可再现性"},{"type":"Paragraph","children":[{"type":"Str","value":"程序在并发时，会失去封闭性，其计算结果与各个程序的执行速度有关，从而使程序失去了可再现性，即使运行环境和初始条件相同，程序多次执行的结果也可能不同。","loc":{"start":{"line":41,"column":0},"end":{"line":41,"column":74}},"range":[1173,1247],"raw":"程序在并发时，会失去封闭性，其计算结果与各个程序的执行速度有关，从而使程序失去了可再现性，即使运行环境和初始条件相同，程序多次执行的结果也可能不同。"}],"loc":{"start":{"line":41,"column":0},"end":{"line":41,"column":74}},"range":[1173,1247],"raw":"程序在并发时，会失去封闭性，其计算结果与各个程序的执行速度有关，从而使程序失去了可再现性，即使运行环境和初始条件相同，程序多次执行的结果也可能不同。"},{"type":"Header","depth":2,"children":[{"type":"Str","value":"进程的特征与状态","loc":{"start":{"line":43,"column":3},"end":{"line":43,"column":11}},"range":[1252,1260],"raw":"进程的特征与状态"}],"loc":{"start":{"line":43,"column":0},"end":{"line":43,"column":11}},"range":[1249,1260],"raw":"## 进程的特征与状态"},{"type":"Paragraph","children":[{"type":"Str","value":"为了使程序能够并发执行，需要对其加以描述和控制，故引入了进程的概念。","loc":{"start":{"line":45,"column":0},"end":{"line":45,"column":34}},"range":[1262,1296],"raw":"为了使程序能够并发执行，需要对其加以描述和控制，故引入了进程的概念。"}],"loc":{"start":{"line":45,"column":0},"end":{"line":45,"column":34}},"range":[1262,1296],"raw":"为了使程序能够并发执行，需要对其加以描述和控制，故引入了进程的概念。"},{"type":"Header","depth":3,"children":[{"type":"Str","value":"进程的典型定义","loc":{"start":{"line":47,"column":4},"end":{"line":47,"column":11}},"range":[1302,1309],"raw":"进程的典型定义"}],"loc":{"start":{"line":47,"column":0},"end":{"line":47,"column":11}},"range":[1298,1309],"raw":"### 进程的典型定义"},{"type":"List","ordered":true,"start":1,"spread":false,"children":[{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"进程是程序的一次执行","loc":{"start":{"line":49,"column":3},"end":{"line":49,"column":13}},"range":[1314,1324],"raw":"进程是程序的一次执行"}],"loc":{"start":{"line":49,"column":3},"end":{"line":49,"column":13}},"range":[1314,1324],"raw":"进程是程序的一次执行"}],"loc":{"start":{"line":49,"column":0},"end":{"line":49,"column":13}},"range":[1311,1324],"raw":"1. 进程是程序的一次执行"},{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"进程是一个程序及其数据在处理机上顺序执行时所发生的活动","loc":{"start":{"line":50,"column":3},"end":{"line":50,"column":30}},"range":[1328,1355],"raw":"进程是一个程序及其数据在处理机上顺序执行时所发生的活动"}],"loc":{"start":{"line":50,"column":3},"end":{"line":50,"column":30}},"range":[1328,1355],"raw":"进程是一个程序及其数据在处理机上顺序执行时所发生的活动"}],"loc":{"start":{"line":50,"column":0},"end":{"line":50,"column":30}},"range":[1325,1355],"raw":"2. 进程是一个程序及其数据在处理机上顺序执行时所发生的活动"},{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"进程是程序在一个数据集合上运行的过程，它","loc":{"start":{"line":51,"column":3},"end":{"line":51,"column":23}},"range":[1359,1379],"raw":"进程是程序在一个数据集合上运行的过程，它"},{"type":"Strong","children":[{"type":"Str","value":"是系统进行资源分配和调度的独立单位","loc":{"start":{"line":51,"column":25},"end":{"line":51,"column":42}},"range":[1381,1398],"raw":"是系统进行资源分配和调度的独立单位"}],"loc":{"start":{"line":51,"column":23},"end":{"line":51,"column":44}},"range":[1379,1400],"raw":"**是系统进行资源分配和调度的独立单位**"}],"loc":{"start":{"line":51,"column":3},"end":{"line":51,"column":44}},"range":[1359,1400],"raw":"进程是程序在一个数据集合上运行的过程，它**是系统进行资源分配和调度的独立单位**"}],"loc":{"start":{"line":51,"column":0},"end":{"line":51,"column":44}},"range":[1356,1400],"raw":"3. 进程是程序在一个数据集合上运行的过程，它**是系统进行资源分配和调度的独立单位**"}],"loc":{"start":{"line":49,"column":0},"end":{"line":51,"column":44}},"range":[1311,1400],"raw":"1. 进程是程序的一次执行\n2. 进程是一个程序及其数据在处理机上顺序执行时所发生的活动\n3. 进程是程序在一个数据集合上运行的过程，它**是系统进行资源分配和调度的独立单位**"},{"type":"Header","depth":3,"children":[{"type":"Str","value":"进程的特征","loc":{"start":{"line":53,"column":4},"end":{"line":53,"column":9}},"range":[1406,1411],"raw":"进程的特征"}],"loc":{"start":{"line":53,"column":0},"end":{"line":53,"column":9}},"range":[1402,1411],"raw":"### 进程的特征"},{"type":"List","ordered":true,"start":1,"spread":false,"children":[{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"结构特征：通常程序是不能并发执行的，为了使程序能够独立运行，应该为其配置进程控制块(PCB, Process Control Block)；程序段、数据和PCB就构成了进程实体。","loc":{"start":{"line":55,"column":3},"end":{"line":55,"column":92}},"range":[1416,1505],"raw":"结构特征：通常程序是不能并发执行的，为了使程序能够独立运行，应该为其配置进程控制块(PCB, Process Control Block)；程序段、数据和PCB就构成了进程实体。"}],"loc":{"start":{"line":55,"column":3},"end":{"line":55,"column":92}},"range":[1416,1505],"raw":"结构特征：通常程序是不能并发执行的，为了使程序能够独立运行，应该为其配置进程控制块(PCB, Process Control Block)；程序段、数据和PCB就构成了进程实体。"}],"loc":{"start":{"line":55,"column":0},"end":{"line":55,"column":92}},"range":[1413,1505],"raw":"1. 结构特征：通常程序是不能并发执行的，为了使程序能够独立运行，应该为其配置进程控制块(PCB, Process Control Block)；程序段、数据和PCB就构成了进程实体。"},{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"动态性：进程的实质是进程实体的一次执行的过程，","loc":{"start":{"line":56,"column":3},"end":{"line":56,"column":26}},"range":[1509,1532],"raw":"动态性：进程的实质是进程实体的一次执行的过程，"},{"type":"Strong","children":[{"type":"Str","value":"动态性是进程的最基本的特征","loc":{"start":{"line":56,"column":28},"end":{"line":56,"column":41}},"range":[1534,1547],"raw":"动态性是进程的最基本的特征"}],"loc":{"start":{"line":56,"column":26},"end":{"line":56,"column":43}},"range":[1532,1549],"raw":"**动态性是进程的最基本的特征**"},{"type":"Str","value":"，进程","loc":{"start":{"line":56,"column":43},"end":{"line":56,"column":46}},"range":[1549,1552],"raw":"，进程"},{"type":"Html","value":"<font color=\"red\">","loc":{"start":{"line":56,"column":46},"end":{"line":56,"column":64}},"range":[1552,1570],"raw":"<font color=\"red\">"},{"type":"Str","value":"由创建而产生，因调度而执行，由撤销而消亡","loc":{"start":{"line":56,"column":64},"end":{"line":56,"column":84}},"range":[1570,1590],"raw":"由创建而产生，因调度而执行，由撤销而消亡"},{"type":"Html","value":"</font>","loc":{"start":{"line":56,"column":84},"end":{"line":56,"column":91}},"range":[1590,1597],"raw":"</font>"},{"type":"Str","value":"，有一定的生命周期。","loc":{"start":{"line":56,"column":91},"end":{"line":56,"column":101}},"range":[1597,1607],"raw":"，有一定的生命周期。"}],"loc":{"start":{"line":56,"column":3},"end":{"line":56,"column":101}},"range":[1509,1607],"raw":"动态性：进程的实质是进程实体的一次执行的过程，**动态性是进程的最基本的特征**，进程<font color=\"red\">由创建而产生，因调度而执行，由撤销而消亡</font>，有一定的生命周期。"}],"loc":{"start":{"line":56,"column":0},"end":{"line":56,"column":101}},"range":[1506,1607],"raw":"2. 动态性：进程的实质是进程实体的一次执行的过程，**动态性是进程的最基本的特征**，进程<font color=\"red\">由创建而产生，因调度而执行，由撤销而消亡</font>，有一定的生命周期。"},{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"并发性：多个进程实体共存于内存中，且能在同一段时间内运行，并发性是进程的重要特征，也是成为OS的重要特征，同时能够并发执行也是引入进程的目的。","loc":{"start":{"line":57,"column":3},"end":{"line":57,"column":74}},"range":[1611,1682],"raw":"并发性：多个进程实体共存于内存中，且能在同一段时间内运行，并发性是进程的重要特征，也是成为OS的重要特征，同时能够并发执行也是引入进程的目的。"}],"loc":{"start":{"line":57,"column":3},"end":{"line":57,"column":74}},"range":[1611,1682],"raw":"并发性：多个进程实体共存于内存中，且能在同一段时间内运行，并发性是进程的重要特征，也是成为OS的重要特征，同时能够并发执行也是引入进程的目的。"}],"loc":{"start":{"line":57,"column":0},"end":{"line":57,"column":74}},"range":[1608,1682],"raw":"3. 并发性：多个进程实体共存于内存中，且能在同一段时间内运行，并发性是进程的重要特征，也是成为OS的重要特征，同时能够并发执行也是引入进程的目的。"},{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"独立性：进程实体是一个能独立运行，独立分配资源和独立接受调度的基本单位。未建立PCB的程序不能作为一个独立的单位参与运行。","loc":{"start":{"line":58,"column":3},"end":{"line":58,"column":64}},"range":[1686,1747],"raw":"独立性：进程实体是一个能独立运行，独立分配资源和独立接受调度的基本单位。未建立PCB的程序不能作为一个独立的单位参与运行。"}],"loc":{"start":{"line":58,"column":3},"end":{"line":58,"column":64}},"range":[1686,1747],"raw":"独立性：进程实体是一个能独立运行，独立分配资源和独立接受调度的基本单位。未建立PCB的程序不能作为一个独立的单位参与运行。"}],"loc":{"start":{"line":58,"column":0},"end":{"line":58,"column":64}},"range":[1683,1747],"raw":"4. 独立性：进程实体是一个能独立运行，独立分配资源和独立接受调度的基本单位。未建立PCB的程序不能作为一个独立的单位参与运行。"},{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"异步性：进程实体按照异步的方式运行，即进程按照各自独立、不可预知的速度向前推进。","loc":{"start":{"line":59,"column":3},"end":{"line":59,"column":43}},"range":[1751,1791],"raw":"异步性：进程实体按照异步的方式运行，即进程按照各自独立、不可预知的速度向前推进。"}],"loc":{"start":{"line":59,"column":3},"end":{"line":59,"column":43}},"range":[1751,1791],"raw":"异步性：进程实体按照异步的方式运行，即进程按照各自独立、不可预知的速度向前推进。"}],"loc":{"start":{"line":59,"column":0},"end":{"line":59,"column":43}},"range":[1748,1791],"raw":"5. 异步性：进程实体按照异步的方式运行，即进程按照各自独立、不可预知的速度向前推进。"}],"loc":{"start":{"line":55,"column":0},"end":{"line":59,"column":43}},"range":[1413,1791],"raw":"1. 结构特征：通常程序是不能并发执行的，为了使程序能够独立运行，应该为其配置进程控制块(PCB, Process Control Block)；程序段、数据和PCB就构成了进程实体。\n2. 动态性：进程的实质是进程实体的一次执行的过程，**动态性是进程的最基本的特征**，进程<font color=\"red\">由创建而产生，因调度而执行，由撤销而消亡</font>，有一定的生命周期。\n3. 并发性：多个进程实体共存于内存中，且能在同一段时间内运行，并发性是进程的重要特征，也是成为OS的重要特征，同时能够并发执行也是引入进程的目的。\n4. 独立性：进程实体是一个能独立运行，独立分配资源和独立接受调度的基本单位。未建立PCB的程序不能作为一个独立的单位参与运行。\n5. 异步性：进程实体按照异步的方式运行，即进程按照各自独立、不可预知的速度向前推进。"},{"type":"Header","depth":3,"children":[{"type":"Str","value":"进程的三种基本状态","loc":{"start":{"line":61,"column":4},"end":{"line":61,"column":13}},"range":[1797,1806],"raw":"进程的三种基本状态"}],"loc":{"start":{"line":61,"column":0},"end":{"line":61,"column":13}},"range":[1793,1806],"raw":"### 进程的三种基本状态"},{"type":"List","ordered":true,"start":1,"spread":false,"children":[{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"就绪状态(Ready)：进程已经分配到除了CPU以外其他的资源，只要再获得CPU资源便可以开始运行。多个就绪状态的进程组成的队列成为","loc":{"start":{"line":63,"column":3},"end":{"line":63,"column":69}},"range":[1811,1877],"raw":"就绪状态(Ready)：进程已经分配到除了CPU以外其他的资源，只要再获得CPU资源便可以开始运行。多个就绪状态的进程组成的队列成为"},{"type":"Strong","children":[{"type":"Str","value":"就绪队列","loc":{"start":{"line":63,"column":71},"end":{"line":63,"column":75}},"range":[1879,1883],"raw":"就绪队列"}],"loc":{"start":{"line":63,"column":69},"end":{"line":63,"column":77}},"range":[1877,1885],"raw":"**就绪队列**"},{"type":"Str","value":"。","loc":{"start":{"line":63,"column":77},"end":{"line":63,"column":78}},"range":[1885,1886],"raw":"。"}],"loc":{"start":{"line":63,"column":3},"end":{"line":63,"column":78}},"range":[1811,1886],"raw":"就绪状态(Ready)：进程已经分配到除了CPU以外其他的资源，只要再获得CPU资源便可以开始运行。多个就绪状态的进程组成的队列成为**就绪队列**。"}],"loc":{"start":{"line":63,"column":0},"end":{"line":63,"column":78}},"range":[1808,1886],"raw":"1. 就绪状态(Ready)：进程已经分配到除了CPU以外其他的资源，只要再获得CPU资源便可以开始运行。多个就绪状态的进程组成的队列成为**就绪队列**。"},{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"执行状态：进程已经分配到CPU资源，其程序正在执行。在单机处理系统中，只有一个进程处于执行状态。在多处理机系统中，则有多个进程处于执行状态。","loc":{"start":{"line":64,"column":3},"end":{"line":64,"column":73}},"range":[1890,1960],"raw":"执行状态：进程已经分配到CPU资源，其程序正在执行。在单机处理系统中，只有一个进程处于执行状态。在多处理机系统中，则有多个进程处于执行状态。"}],"loc":{"start":{"line":64,"column":3},"end":{"line":64,"column":73}},"range":[1890,1960],"raw":"执行状态：进程已经分配到CPU资源，其程序正在执行。在单机处理系统中，只有一个进程处于执行状态。在多处理机系统中，则有多个进程处于执行状态。"}],"loc":{"start":{"line":64,"column":0},"end":{"line":64,"column":73}},"range":[1887,1960],"raw":"2. 执行状态：进程已经分配到CPU资源，其程序正在执行。在单机处理系统中，只有一个进程处于执行状态。在多处理机系统中，则有多个进程处于执行状态。"},{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"阻塞状态：只在执行的进程因为某些事件而暂时无法继续执行，放弃处理机处于暂停状态，即进程的执行受到阻塞，也成为等待状态或封锁状态。","loc":{"start":{"line":65,"column":3},"end":{"line":65,"column":67}},"range":[1964,2028],"raw":"阻塞状态：只在执行的进程因为某些事件而暂时无法继续执行，放弃处理机处于暂停状态，即进程的执行受到阻塞，也成为等待状态或封锁状态。"}],"loc":{"start":{"line":65,"column":3},"end":{"line":65,"column":67}},"range":[1964,2028],"raw":"阻塞状态：只在执行的进程因为某些事件而暂时无法继续执行，放弃处理机处于暂停状态，即进程的执行受到阻塞，也成为等待状态或封锁状态。"}],"loc":{"start":{"line":65,"column":0},"end":{"line":65,"column":67}},"range":[1961,2028],"raw":"3. 阻塞状态：只在执行的进程因为某些事件而暂时无法继续执行，放弃处理机处于暂停状态，即进程的执行受到阻塞，也成为等待状态或封锁状态。"}],"loc":{"start":{"line":63,"column":0},"end":{"line":65,"column":67}},"range":[1808,2028],"raw":"1. 就绪状态(Ready)：进程已经分配到除了CPU以外其他的资源，只要再获得CPU资源便可以开始运行。多个就绪状态的进程组成的队列成为**就绪队列**。\n2. 执行状态：进程已经分配到CPU资源，其程序正在执行。在单机处理系统中，只有一个进程处于执行状态。在多处理机系统中，则有多个进程处于执行状态。\n3. 阻塞状态：只在执行的进程因为某些事件而暂时无法继续执行，放弃处理机处于暂停状态，即进程的执行受到阻塞，也成为等待状态或封锁状态。"},{"type":"Header","depth":3,"children":[{"type":"Str","value":"进程的挂起状态","loc":{"start":{"line":67,"column":4},"end":{"line":67,"column":11}},"range":[2034,2041],"raw":"进程的挂起状态"}],"loc":{"start":{"line":67,"column":0},"end":{"line":67,"column":11}},"range":[2030,2041],"raw":"### 进程的挂起状态"},{"type":"Paragraph","children":[{"type":"Str","value":"挂起状态是指因为某种需要让正在执行的进程暂停执行，且在到非挂起状态之前不接受调度时的状态成为","loc":{"start":{"line":69,"column":0},"end":{"line":69,"column":46}},"range":[2043,2089],"raw":"挂起状态是指因为某种需要让正在执行的进程暂停执行，且在到非挂起状态之前不接受调度时的状态成为"},{"type":"Strong","children":[{"type":"Str","value":"挂起状态","loc":{"start":{"line":69,"column":48},"end":{"line":69,"column":52}},"range":[2091,2095],"raw":"挂起状态"}],"loc":{"start":{"line":69,"column":46},"end":{"line":69,"column":54}},"range":[2089,2097],"raw":"**挂起状态**"},{"type":"Str","value":"。","loc":{"start":{"line":69,"column":54},"end":{"line":69,"column":55}},"range":[2097,2098],"raw":"。"}],"loc":{"start":{"line":69,"column":0},"end":{"line":69,"column":55}},"range":[2043,2098],"raw":"挂起状态是指因为某种需要让正在执行的进程暂停执行，且在到非挂起状态之前不接受调度时的状态成为**挂起状态**。"},{"type":"Paragraph","children":[{"type":"Str","value":"常见的引入挂起状态的原因：","loc":{"start":{"line":71,"column":0},"end":{"line":71,"column":13}},"range":[2100,2113],"raw":"常见的引入挂起状态的原因："}],"loc":{"start":{"line":71,"column":0},"end":{"line":71,"column":13}},"range":[2100,2113],"raw":"常见的引入挂起状态的原因："},{"type":"List","ordered":false,"start":null,"spread":false,"children":[{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"终端用户的请求：研究进程的执行状况或对程序进行修改","loc":{"start":{"line":73,"column":2},"end":{"line":73,"column":27}},"range":[2117,2142],"raw":"终端用户的请求：研究进程的执行状况或对程序进行修改"}],"loc":{"start":{"line":73,"column":2},"end":{"line":73,"column":27}},"range":[2117,2142],"raw":"终端用户的请求：研究进程的执行状况或对程序进行修改"}],"loc":{"start":{"line":73,"column":0},"end":{"line":73,"column":27}},"range":[2115,2142],"raw":"- 终端用户的请求：研究进程的执行状况或对程序进行修改"},{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"父进程请求：考查和修改子进程或者协调各个子进程的工作","loc":{"start":{"line":74,"column":2},"end":{"line":74,"column":28}},"range":[2145,2171],"raw":"父进程请求：考查和修改子进程或者协调各个子进程的工作"}],"loc":{"start":{"line":74,"column":2},"end":{"line":74,"column":28}},"range":[2145,2171],"raw":"父进程请求：考查和修改子进程或者协调各个子进程的工作"}],"loc":{"start":{"line":74,"column":0},"end":{"line":74,"column":28}},"range":[2143,2171],"raw":"- 父进程请求：考查和修改子进程或者协调各个子进程的工作"},{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"负荷调节需要：操作系统负荷较重时将一些不重要的进程挂起，保证系统可以正常运行","loc":{"start":{"line":75,"column":2},"end":{"line":75,"column":40}},"range":[2174,2212],"raw":"负荷调节需要：操作系统负荷较重时将一些不重要的进程挂起，保证系统可以正常运行"}],"loc":{"start":{"line":75,"column":2},"end":{"line":75,"column":40}},"range":[2174,2212],"raw":"负荷调节需要：操作系统负荷较重时将一些不重要的进程挂起，保证系统可以正常运行"}],"loc":{"start":{"line":75,"column":0},"end":{"line":75,"column":40}},"range":[2172,2212],"raw":"- 负荷调节需要：操作系统负荷较重时将一些不重要的进程挂起，保证系统可以正常运行"},{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"操作系统需要：检查运行中资源使用情况或进行记账","loc":{"start":{"line":76,"column":2},"end":{"line":76,"column":25}},"range":[2215,2238],"raw":"操作系统需要：检查运行中资源使用情况或进行记账"}],"loc":{"start":{"line":76,"column":2},"end":{"line":76,"column":25}},"range":[2215,2238],"raw":"操作系统需要：检查运行中资源使用情况或进行记账"}],"loc":{"start":{"line":76,"column":0},"end":{"line":76,"column":25}},"range":[2213,2238],"raw":"- 操作系统需要：检查运行中资源使用情况或进行记账"}],"loc":{"start":{"line":73,"column":0},"end":{"line":76,"column":25}},"range":[2115,2238],"raw":"- 终端用户的请求：研究进程的执行状况或对程序进行修改\n- 父进程请求：考查和修改子进程或者协调各个子进程的工作\n- 负荷调节需要：操作系统负荷较重时将一些不重要的进程挂起，保证系统可以正常运行\n- 操作系统需要：检查运行中资源使用情况或进行记账"},{"type":"Header","depth":4,"children":[{"type":"Str","value":"进程状态的转换","loc":{"start":{"line":78,"column":5},"end":{"line":78,"column":12}},"range":[2245,2252],"raw":"进程状态的转换"}],"loc":{"start":{"line":78,"column":0},"end":{"line":78,"column":12}},"range":[2240,2252],"raw":"#### 进程状态的转换"},{"type":"Paragraph","children":[{"type":"Str","value":"从挂起（静止）状态到非挂起（活动状态），或者相反，有四种情况：","loc":{"start":{"line":80,"column":0},"end":{"line":80,"column":31}},"range":[2254,2285],"raw":"从挂起（静止）状态到非挂起（活动状态），或者相反，有四种情况："}],"loc":{"start":{"line":80,"column":0},"end":{"line":80,"column":31}},"range":[2254,2285],"raw":"从挂起（静止）状态到非挂起（活动状态），或者相反，有四种情况："},{"type":"List","ordered":false,"start":null,"spread":false,"children":[{"type":"ListItem","spread":true,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"活动就绪(Readya) $\\overset{Suspend}{\\rightarrow}$ 静止就绪(Readys)","loc":{"start":{"line":82,"column":2},"end":{"line":82,"column":60}},"range":[2289,2347],"raw":"活动就绪(Readya) $\\overset{Suspend}{\\rightarrow}$ 静止就绪(Readys)"}],"loc":{"start":{"line":82,"column":2},"end":{"line":82,"column":60}},"range":[2289,2347],"raw":"活动就绪(Readya) $\\overset{Suspend}{\\rightarrow}$ 静止就绪(Readys)"},{"type":"Paragraph","children":[{"type":"Str","value":"非挂起的就绪状态到静止的就绪状态，进程不再接受调度","loc":{"start":{"line":84,"column":2},"end":{"line":84,"column":27}},"range":[2353,2378],"raw":"非挂起的就绪状态到静止的就绪状态，进程不再接受调度"}],"loc":{"start":{"line":84,"column":2},"end":{"line":84,"column":27}},"range":[2353,2378],"raw":"非挂起的就绪状态到静止的就绪状态，进程不再接受调度"}],"loc":{"start":{"line":82,"column":0},"end":{"line":84,"column":27}},"range":[2287,2378],"raw":"- 活动就绪(Readya) $\\overset{Suspend}{\\rightarrow}$ 静止就绪(Readys)\n  \n  非挂起的就绪状态到静止的就绪状态，进程不再接受调度"},{"type":"ListItem","spread":true,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"活动阻塞(Blockeda) $\\overset{Suspend}{\\rightarrow}$ 静止阻塞(Blockeds)","loc":{"start":{"line":85,"column":2},"end":{"line":85,"column":64}},"range":[2381,2443],"raw":"活动阻塞(Blockeda) $\\overset{Suspend}{\\rightarrow}$ 静止阻塞(Blockeds)"}],"loc":{"start":{"line":85,"column":2},"end":{"line":85,"column":64}},"range":[2381,2443],"raw":"活动阻塞(Blockeda) $\\overset{Suspend}{\\rightarrow}$ 静止阻塞(Blockeds)"},{"type":"Paragraph","children":[{"type":"Str","value":"处于此状态的进程在其期待的事件发生后，将从静止阻塞状态变为就绪状态","loc":{"start":{"line":87,"column":2},"end":{"line":87,"column":35}},"range":[2449,2482],"raw":"处于此状态的进程在其期待的事件发生后，将从静止阻塞状态变为就绪状态"}],"loc":{"start":{"line":87,"column":2},"end":{"line":87,"column":35}},"range":[2449,2482],"raw":"处于此状态的进程在其期待的事件发生后，将从静止阻塞状态变为就绪状态"}],"loc":{"start":{"line":85,"column":0},"end":{"line":87,"column":35}},"range":[2379,2482],"raw":"- 活动阻塞(Blockeda) $\\overset{Suspend}{\\rightarrow}$ 静止阻塞(Blockeds)\n  \n  处于此状态的进程在其期待的事件发生后，将从静止阻塞状态变为就绪状态"},{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"静止就绪(Readys) $\\overset{Active}{\\rightarrow}$ 活动就绪(Readya)","loc":{"start":{"line":88,"column":2},"end":{"line":88,"column":59}},"range":[2485,2542],"raw":"静止就绪(Readys) $\\overset{Active}{\\rightarrow}$ 活动就绪(Readya)"}],"loc":{"start":{"line":88,"column":2},"end":{"line":88,"column":59}},"range":[2485,2542],"raw":"静止就绪(Readys) $\\overset{Active}{\\rightarrow}$ 活动就绪(Readya)"}],"loc":{"start":{"line":88,"column":0},"end":{"line":88,"column":59}},"range":[2483,2542],"raw":"- 静止就绪(Readys) $\\overset{Active}{\\rightarrow}$ 活动就绪(Readya)"},{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"静止阻塞(Blockeds) $\\overset{Active}{\\rightarrow}$ 活动阻塞(Blockeda)","loc":{"start":{"line":89,"column":2},"end":{"line":89,"column":63}},"range":[2545,2606],"raw":"静止阻塞(Blockeds) $\\overset{Active}{\\rightarrow}$ 活动阻塞(Blockeda)"}],"loc":{"start":{"line":89,"column":2},"end":{"line":89,"column":63}},"range":[2545,2606],"raw":"静止阻塞(Blockeds) $\\overset{Active}{\\rightarrow}$ 活动阻塞(Blockeda)"}],"loc":{"start":{"line":89,"column":0},"end":{"line":89,"column":63}},"range":[2543,2606],"raw":"- 静止阻塞(Blockeds) $\\overset{Active}{\\rightarrow}$ 活动阻塞(Blockeda)"}],"loc":{"start":{"line":82,"column":0},"end":{"line":89,"column":63}},"range":[2287,2606],"raw":"- 活动就绪(Readya) $\\overset{Suspend}{\\rightarrow}$ 静止就绪(Readys)\n  \n  非挂起的就绪状态到静止的就绪状态，进程不再接受调度\n- 活动阻塞(Blockeda) $\\overset{Suspend}{\\rightarrow}$ 静止阻塞(Blockeds)\n  \n  处于此状态的进程在其期待的事件发生后，将从静止阻塞状态变为就绪状态\n- 静止就绪(Readys) $\\overset{Active}{\\rightarrow}$ 活动就绪(Readya)\n- 静止阻塞(Blockeds) $\\overset{Active}{\\rightarrow}$ 活动阻塞(Blockeda)"},{"type":"Header","depth":3,"children":[{"type":"Str","value":"进程的创建状态和终止状态","loc":{"start":{"line":91,"column":4},"end":{"line":91,"column":16}},"range":[2612,2624],"raw":"进程的创建状态和终止状态"}],"loc":{"start":{"line":91,"column":0},"end":{"line":91,"column":16}},"range":[2608,2624],"raw":"### 进程的创建状态和终止状态"},{"type":"Header","depth":4,"children":[{"type":"Str","value":"创建状态","loc":{"start":{"line":93,"column":5},"end":{"line":93,"column":9}},"range":[2631,2635],"raw":"创建状态"}],"loc":{"start":{"line":93,"column":0},"end":{"line":93,"column":9}},"range":[2626,2635],"raw":"#### 创建状态"},{"type":"Paragraph","children":[{"type":"Str","value":"创建一个进程一般有两个步骤：","loc":{"start":{"line":95,"column":0},"end":{"line":95,"column":14}},"range":[2637,2651],"raw":"创建一个进程一般有两个步骤："}],"loc":{"start":{"line":95,"column":0},"end":{"line":95,"column":14}},"range":[2637,2651],"raw":"创建一个进程一般有两个步骤："},{"type":"List","ordered":false,"start":null,"spread":false,"children":[{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"新建一个PCB，填写必要的管理信息","loc":{"start":{"line":97,"column":2},"end":{"line":97,"column":19}},"range":[2655,2672],"raw":"新建一个PCB，填写必要的管理信息"}],"loc":{"start":{"line":97,"column":2},"end":{"line":97,"column":19}},"range":[2655,2672],"raw":"新建一个PCB，填写必要的管理信息"}],"loc":{"start":{"line":97,"column":0},"end":{"line":97,"column":19}},"range":[2653,2672],"raw":"- 新建一个PCB，填写必要的管理信息"},{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"将进程转为就绪状态并插入就绪队列","loc":{"start":{"line":98,"column":2},"end":{"line":98,"column":18}},"range":[2675,2691],"raw":"将进程转为就绪状态并插入就绪队列"}],"loc":{"start":{"line":98,"column":2},"end":{"line":98,"column":18}},"range":[2675,2691],"raw":"将进程转为就绪状态并插入就绪队列"}],"loc":{"start":{"line":98,"column":0},"end":{"line":98,"column":18}},"range":[2673,2691],"raw":"- 将进程转为就绪状态并插入就绪队列"}],"loc":{"start":{"line":97,"column":0},"end":{"line":98,"column":18}},"range":[2653,2691],"raw":"- 新建一个PCB，填写必要的管理信息\n- 将进程转为就绪状态并插入就绪队列"},{"type":"Paragraph","children":[{"type":"Str","value":"引入创建状态可以保证进程的调度必须在进程创建完成后进行，保证对进程控制块操作的完整性。也可以便于操作系统对进程资源的分配和管理。进程PCB初始化完成后便可以进入就绪状态。","loc":{"start":{"line":100,"column":0},"end":{"line":100,"column":85}},"range":[2693,2778],"raw":"引入创建状态可以保证进程的调度必须在进程创建完成后进行，保证对进程控制块操作的完整性。也可以便于操作系统对进程资源的分配和管理。进程PCB初始化完成后便可以进入就绪状态。"}],"loc":{"start":{"line":100,"column":0},"end":{"line":100,"column":85}},"range":[2693,2778],"raw":"引入创建状态可以保证进程的调度必须在进程创建完成后进行，保证对进程控制块操作的完整性。也可以便于操作系统对进程资源的分配和管理。进程PCB初始化完成后便可以进入就绪状态。"},{"type":"Header","depth":4,"children":[{"type":"Str","value":"终止状态","loc":{"start":{"line":102,"column":5},"end":{"line":102,"column":9}},"range":[2785,2789],"raw":"终止状态"}],"loc":{"start":{"line":102,"column":0},"end":{"line":102,"column":9}},"range":[2780,2789],"raw":"#### 终止状态"},{"type":"Paragraph","children":[{"type":"Str","value":"当进程进入自然结束点或者发生无法克服的错误，或是被对其有终止权的其他进程终止时进程会进入终止状态，进入终止状态后的进程不再执行。","loc":{"start":{"line":104,"column":0},"end":{"line":104,"column":64}},"range":[2791,2855],"raw":"当进程进入自然结束点或者发生无法克服的错误，或是被对其有终止权的其他进程终止时进程会进入终止状态，进入终止状态后的进程不再执行。"}],"loc":{"start":{"line":104,"column":0},"end":{"line":104,"column":64}},"range":[2791,2855],"raw":"当进程进入自然结束点或者发生无法克服的错误，或是被对其有终止权的其他进程终止时进程会进入终止状态，进入终止状态后的进程不再执行。"},{"type":"Paragraph","children":[{"type":"Str","value":"进程的终止一般分为一下两个步骤：","loc":{"start":{"line":106,"column":0},"end":{"line":106,"column":16}},"range":[2857,2873],"raw":"进程的终止一般分为一下两个步骤："}],"loc":{"start":{"line":106,"column":0},"end":{"line":106,"column":16}},"range":[2857,2873],"raw":"进程的终止一般分为一下两个步骤："},{"type":"List","ordered":false,"start":null,"spread":false,"children":[{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"等待操作系统进行善后处理","loc":{"start":{"line":108,"column":2},"end":{"line":108,"column":14}},"range":[2877,2889],"raw":"等待操作系统进行善后处理"}],"loc":{"start":{"line":108,"column":2},"end":{"line":108,"column":14}},"range":[2877,2889],"raw":"等待操作系统进行善后处理"}],"loc":{"start":{"line":108,"column":0},"end":{"line":108,"column":14}},"range":[2875,2889],"raw":"- 等待操作系统进行善后处理"},{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"清零PCB，将PCB空间返回操作系统","loc":{"start":{"line":109,"column":2},"end":{"line":109,"column":20}},"range":[2892,2910],"raw":"清零PCB，将PCB空间返回操作系统"}],"loc":{"start":{"line":109,"column":2},"end":{"line":109,"column":20}},"range":[2892,2910],"raw":"清零PCB，将PCB空间返回操作系统"}],"loc":{"start":{"line":109,"column":0},"end":{"line":109,"column":20}},"range":[2890,2910],"raw":"- 清零PCB，将PCB空间返回操作系统"}],"loc":{"start":{"line":108,"column":0},"end":{"line":109,"column":20}},"range":[2875,2910],"raw":"- 等待操作系统进行善后处理\n- 清零PCB，将PCB空间返回操作系统"},{"type":"Header","depth":3,"children":[{"type":"Str","value":"进程控制块(PCB, Process Control Block)","loc":{"start":{"line":111,"column":4},"end":{"line":111,"column":37}},"range":[2916,2949],"raw":"进程控制块(PCB, Process Control Block)"}],"loc":{"start":{"line":111,"column":0},"end":{"line":111,"column":37}},"range":[2912,2949],"raw":"### 进程控制块(PCB, Process Control Block)"},{"type":"Header","depth":4,"children":[{"type":"Str","value":"进程控制块的作用","loc":{"start":{"line":113,"column":5},"end":{"line":113,"column":13}},"range":[2956,2964],"raw":"进程控制块的作用"}],"loc":{"start":{"line":113,"column":0},"end":{"line":113,"column":13}},"range":[2951,2964],"raw":"#### 进程控制块的作用"},{"type":"Paragraph","children":[{"type":"Str","value":"进程控制块是进程实体的一部分，是操作系统最重要的记录型数据结构。PCB中记录了全部的用于描述进程当前状态以及控制进程运行的全部信息。","loc":{"start":{"line":115,"column":0},"end":{"line":115,"column":66}},"range":[2966,3032],"raw":"进程控制块是进程实体的一部分，是操作系统最重要的记录型数据结构。PCB中记录了全部的用于描述进程当前状态以及控制进程运行的全部信息。"}],"loc":{"start":{"line":115,"column":0},"end":{"line":115,"column":66}},"range":[2966,3032],"raw":"进程控制块是进程实体的一部分，是操作系统最重要的记录型数据结构。PCB中记录了全部的用于描述进程当前状态以及控制进程运行的全部信息。"},{"type":"Paragraph","children":[{"type":"Str","value":"PCB使得一个不能在多道环境下独立运行的程序（含数据）成为一个能够独立运行的基本单位（能与其他进程并发执行的进程）。","loc":{"start":{"line":117,"column":0},"end":{"line":117,"column":58}},"range":[3034,3092],"raw":"PCB使得一个不能在多道环境下独立运行的程序（含数据）成为一个能够独立运行的基本单位（能与其他进程并发执行的进程）。"}],"loc":{"start":{"line":117,"column":0},"end":{"line":117,"column":58}},"range":[3034,3092],"raw":"PCB使得一个不能在多道环境下独立运行的程序（含数据）成为一个能够独立运行的基本单位（能与其他进程并发执行的进程）。"},{"type":"List","ordered":false,"start":null,"spread":false,"children":[{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"调度到某个进程时，根据其PCB的内容，恢复其运行现场，从PCB内的程序和数据的内存地址找到其程序和数据","loc":{"start":{"line":119,"column":2},"end":{"line":119,"column":53}},"range":[3096,3147],"raw":"调度到某个进程时，根据其PCB的内容，恢复其运行现场，从PCB内的程序和数据的内存地址找到其程序和数据"}],"loc":{"start":{"line":119,"column":2},"end":{"line":119,"column":53}},"range":[3096,3147],"raw":"调度到某个进程时，根据其PCB的内容，恢复其运行现场，从PCB内的程序和数据的内存地址找到其程序和数据"}],"loc":{"start":{"line":119,"column":0},"end":{"line":119,"column":53}},"range":[3094,3147],"raw":"- 调度到某个进程时，根据其PCB的内容，恢复其运行现场，从PCB内的程序和数据的内存地址找到其程序和数据"},{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"与合作进程实现同步、通信和访问文件时，访问PCB","loc":{"start":{"line":120,"column":2},"end":{"line":120,"column":26}},"range":[3150,3174],"raw":"与合作进程实现同步、通信和访问文件时，访问PCB"}],"loc":{"start":{"line":120,"column":2},"end":{"line":120,"column":26}},"range":[3150,3174],"raw":"与合作进程实现同步、通信和访问文件时，访问PCB"}],"loc":{"start":{"line":120,"column":0},"end":{"line":120,"column":26}},"range":[3148,3174],"raw":"- 与合作进程实现同步、通信和访问文件时，访问PCB"}],"loc":{"start":{"line":119,"column":0},"end":{"line":120,"column":26}},"range":[3094,3174],"raw":"- 调度到某个进程时，根据其PCB的内容，恢复其运行现场，从PCB内的程序和数据的内存地址找到其程序和数据\n- 与合作进程实现同步、通信和访问文件时，访问PCB"},{"type":"Paragraph","children":[{"type":"Str","value":"PCB是进程存在的","loc":{"start":{"line":122,"column":0},"end":{"line":122,"column":9}},"range":[3176,3185],"raw":"PCB是进程存在的"},{"type":"Strong","children":[{"type":"Str","value":"唯一标志","loc":{"start":{"line":122,"column":11},"end":{"line":122,"column":15}},"range":[3187,3191],"raw":"唯一标志"}],"loc":{"start":{"line":122,"column":9},"end":{"line":122,"column":17}},"range":[3185,3193],"raw":"**唯一标志**"},{"type":"Str","value":"。PCB经常被系统访问，故PCB应该常驻内存，以链表或者队列的结构存储在操作系统专门开辟的PCB区内。","loc":{"start":{"line":122,"column":17},"end":{"line":122,"column":68}},"range":[3193,3244],"raw":"。PCB经常被系统访问，故PCB应该常驻内存，以链表或者队列的结构存储在操作系统专门开辟的PCB区内。"}],"loc":{"start":{"line":122,"column":0},"end":{"line":122,"column":68}},"range":[3176,3244],"raw":"PCB是进程存在的**唯一标志**。PCB经常被系统访问，故PCB应该常驻内存，以链表或者队列的结构存储在操作系统专门开辟的PCB区内。"},{"type":"Header","depth":4,"children":[{"type":"Str","value":"进程控制块中的信息","loc":{"start":{"line":124,"column":5},"end":{"line":124,"column":14}},"range":[3251,3260],"raw":"进程控制块中的信息"}],"loc":{"start":{"line":124,"column":0},"end":{"line":124,"column":14}},"range":[3246,3260],"raw":"#### 进程控制块中的信息"},{"type":"List","ordered":true,"start":1,"spread":false,"children":[{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"进程标识符","loc":{"start":{"line":126,"column":3},"end":{"line":126,"column":8}},"range":[3265,3270],"raw":"进程标识符"}],"loc":{"start":{"line":126,"column":3},"end":{"line":126,"column":8}},"range":[3265,3270],"raw":"进程标识符"},{"type":"List","ordered":false,"start":null,"spread":false,"children":[{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"内部标识符：操作系统为每一个进程赋予的唯一的数字标识符，是一个进程的标号，主要是为了方便系统调用。","loc":{"start":{"line":127,"column":5},"end":{"line":127,"column":54}},"range":[3276,3325],"raw":"内部标识符：操作系统为每一个进程赋予的唯一的数字标识符，是一个进程的标号，主要是为了方便系统调用。"}],"loc":{"start":{"line":127,"column":5},"end":{"line":127,"column":54}},"range":[3276,3325],"raw":"内部标识符：操作系统为每一个进程赋予的唯一的数字标识符，是一个进程的标号，主要是为了方便系统调用。"}],"loc":{"start":{"line":127,"column":3},"end":{"line":127,"column":54}},"range":[3274,3325],"raw":"- 内部标识符：操作系统为每一个进程赋予的唯一的数字标识符，是一个进程的标号，主要是为了方便系统调用。"},{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"外部标识符：由创建者提供，通常由数字、字母组成，用于创建者访问该进程时使用。","loc":{"start":{"line":128,"column":5},"end":{"line":128,"column":43}},"range":[3331,3369],"raw":"外部标识符：由创建者提供，通常由数字、字母组成，用于创建者访问该进程时使用。"}],"loc":{"start":{"line":128,"column":5},"end":{"line":128,"column":43}},"range":[3331,3369],"raw":"外部标识符：由创建者提供，通常由数字、字母组成，用于创建者访问该进程时使用。"}],"loc":{"start":{"line":128,"column":3},"end":{"line":128,"column":43}},"range":[3329,3369],"raw":"- 外部标识符：由创建者提供，通常由数字、字母组成，用于创建者访问该进程时使用。"}],"loc":{"start":{"line":127,"column":3},"end":{"line":128,"column":43}},"range":[3274,3369],"raw":"- 内部标识符：操作系统为每一个进程赋予的唯一的数字标识符，是一个进程的标号，主要是为了方便系统调用。\n   - 外部标识符：由创建者提供，通常由数字、字母组成，用于创建者访问该进程时使用。"}],"loc":{"start":{"line":126,"column":0},"end":{"line":128,"column":43}},"range":[3262,3369],"raw":"1. 进程标识符\n   - 内部标识符：操作系统为每一个进程赋予的唯一的数字标识符，是一个进程的标号，主要是为了方便系统调用。\n   - 外部标识符：由创建者提供，通常由数字、字母组成，用于创建者访问该进程时使用。"},{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"处理机状态\n进程上一次运行中断时保存在PCB内的状态信息，多存放在寄存器中：","loc":{"start":{"line":129,"column":3},"end":{"line":130,"column":35}},"range":[3373,3414],"raw":"处理机状态\n   进程上一次运行中断时保存在PCB内的状态信息，多存放在寄存器中："}],"loc":{"start":{"line":129,"column":3},"end":{"line":130,"column":35}},"range":[3373,3414],"raw":"处理机状态\n   进程上一次运行中断时保存在PCB内的状态信息，多存放在寄存器中："},{"type":"List","ordered":false,"start":null,"spread":false,"children":[{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"通用寄存器：用户可视寄存器，用户程序可以访问，用于暂存信息","loc":{"start":{"line":131,"column":5},"end":{"line":131,"column":34}},"range":[3420,3449],"raw":"通用寄存器：用户可视寄存器，用户程序可以访问，用于暂存信息"}],"loc":{"start":{"line":131,"column":5},"end":{"line":131,"column":34}},"range":[3420,3449],"raw":"通用寄存器：用户可视寄存器，用户程序可以访问，用于暂存信息"}],"loc":{"start":{"line":131,"column":3},"end":{"line":131,"column":34}},"range":[3418,3449],"raw":"- 通用寄存器：用户可视寄存器，用户程序可以访问，用于暂存信息"},{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"指令计数器：存放要访问的下一条指令的位置","loc":{"start":{"line":132,"column":5},"end":{"line":132,"column":25}},"range":[3455,3475],"raw":"指令计数器：存放要访问的下一条指令的位置"}],"loc":{"start":{"line":132,"column":5},"end":{"line":132,"column":25}},"range":[3455,3475],"raw":"指令计数器：存放要访问的下一条指令的位置"}],"loc":{"start":{"line":132,"column":3},"end":{"line":132,"column":25}},"range":[3453,3475],"raw":"- 指令计数器：存放要访问的下一条指令的位置"},{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"程序状态字PSW：含有状态信息，如条件吗、执行方式、中断屏蔽标志等","loc":{"start":{"line":133,"column":5},"end":{"line":133,"column":38}},"range":[3481,3514],"raw":"程序状态字PSW：含有状态信息，如条件吗、执行方式、中断屏蔽标志等"}],"loc":{"start":{"line":133,"column":5},"end":{"line":133,"column":38}},"range":[3481,3514],"raw":"程序状态字PSW：含有状态信息，如条件吗、执行方式、中断屏蔽标志等"}],"loc":{"start":{"line":133,"column":3},"end":{"line":133,"column":38}},"range":[3479,3514],"raw":"- 程序状态字PSW：含有状态信息，如条件吗、执行方式、中断屏蔽标志等"},{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"用户栈指针：每个用户进程都有一个或者多个与之相关的系统栈，存放过程和系统调用参数和调用地址，栈指针指向栈顶","loc":{"start":{"line":134,"column":5},"end":{"line":134,"column":58}},"range":[3520,3573],"raw":"用户栈指针：每个用户进程都有一个或者多个与之相关的系统栈，存放过程和系统调用参数和调用地址，栈指针指向栈顶"}],"loc":{"start":{"line":134,"column":5},"end":{"line":134,"column":58}},"range":[3520,3573],"raw":"用户栈指针：每个用户进程都有一个或者多个与之相关的系统栈，存放过程和系统调用参数和调用地址，栈指针指向栈顶"}],"loc":{"start":{"line":134,"column":3},"end":{"line":134,"column":58}},"range":[3518,3573],"raw":"- 用户栈指针：每个用户进程都有一个或者多个与之相关的系统栈，存放过程和系统调用参数和调用地址，栈指针指向栈顶"}],"loc":{"start":{"line":131,"column":3},"end":{"line":134,"column":58}},"range":[3418,3573],"raw":"- 通用寄存器：用户可视寄存器，用户程序可以访问，用于暂存信息\n   - 指令计数器：存放要访问的下一条指令的位置\n   - 程序状态字PSW：含有状态信息，如条件吗、执行方式、中断屏蔽标志等\n   - 用户栈指针：每个用户进程都有一个或者多个与之相关的系统栈，存放过程和系统调用参数和调用地址，栈指针指向栈顶"}],"loc":{"start":{"line":129,"column":0},"end":{"line":134,"column":58}},"range":[3370,3573],"raw":"2. 处理机状态\n   进程上一次运行中断时保存在PCB内的状态信息，多存放在寄存器中：\n   - 通用寄存器：用户可视寄存器，用户程序可以访问，用于暂存信息\n   - 指令计数器：存放要访问的下一条指令的位置\n   - 程序状态字PSW：含有状态信息，如条件吗、执行方式、中断屏蔽标志等\n   - 用户栈指针：每个用户进程都有一个或者多个与之相关的系统栈，存放过程和系统调用参数和调用地址，栈指针指向栈顶"},{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"进程调度信息","loc":{"start":{"line":135,"column":3},"end":{"line":135,"column":9}},"range":[3577,3583],"raw":"进程调度信息"}],"loc":{"start":{"line":135,"column":3},"end":{"line":135,"column":9}},"range":[3577,3583],"raw":"进程调度信息"},{"type":"List","ordered":false,"start":null,"spread":false,"children":[{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"进程状态：指明进程当前的状态，作为进程调度和对换时的依据","loc":{"start":{"line":136,"column":5},"end":{"line":136,"column":33}},"range":[3589,3617],"raw":"进程状态：指明进程当前的状态，作为进程调度和对换时的依据"}],"loc":{"start":{"line":136,"column":5},"end":{"line":136,"column":33}},"range":[3589,3617],"raw":"进程状态：指明进程当前的状态，作为进程调度和对换时的依据"}],"loc":{"start":{"line":136,"column":3},"end":{"line":136,"column":33}},"range":[3587,3617],"raw":"- 进程状态：指明进程当前的状态，作为进程调度和对换时的依据"},{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"进程优先级：描述使用处理机的优先级别的一个整数，优先级越大的进程越优先获得处理机的处理","loc":{"start":{"line":137,"column":5},"end":{"line":137,"column":48}},"range":[3623,3666],"raw":"进程优先级：描述使用处理机的优先级别的一个整数，优先级越大的进程越优先获得处理机的处理"}],"loc":{"start":{"line":137,"column":5},"end":{"line":137,"column":48}},"range":[3623,3666],"raw":"进程优先级：描述使用处理机的优先级别的一个整数，优先级越大的进程越优先获得处理机的处理"}],"loc":{"start":{"line":137,"column":3},"end":{"line":137,"column":48}},"range":[3621,3666],"raw":"- 进程优先级：描述使用处理机的优先级别的一个整数，优先级越大的进程越优先获得处理机的处理"},{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"进程调度所需要的其他信息：和操作系统采用的进程调度算法有关，比如进程已经等待CPU的时间、进程已经执行的时间总和等","loc":{"start":{"line":138,"column":5},"end":{"line":138,"column":62}},"range":[3672,3729],"raw":"进程调度所需要的其他信息：和操作系统采用的进程调度算法有关，比如进程已经等待CPU的时间、进程已经执行的时间总和等"}],"loc":{"start":{"line":138,"column":5},"end":{"line":138,"column":62}},"range":[3672,3729],"raw":"进程调度所需要的其他信息：和操作系统采用的进程调度算法有关，比如进程已经等待CPU的时间、进程已经执行的时间总和等"}],"loc":{"start":{"line":138,"column":3},"end":{"line":138,"column":62}},"range":[3670,3729],"raw":"- 进程调度所需要的其他信息：和操作系统采用的进程调度算法有关，比如进程已经等待CPU的时间、进程已经执行的时间总和等"},{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"事件：进程由执行状态变为阻塞状态所等待发生的事件，即阻塞原因","loc":{"start":{"line":139,"column":5},"end":{"line":139,"column":35}},"range":[3735,3765],"raw":"事件：进程由执行状态变为阻塞状态所等待发生的事件，即阻塞原因"}],"loc":{"start":{"line":139,"column":5},"end":{"line":139,"column":35}},"range":[3735,3765],"raw":"事件：进程由执行状态变为阻塞状态所等待发生的事件，即阻塞原因"}],"loc":{"start":{"line":139,"column":3},"end":{"line":139,"column":35}},"range":[3733,3765],"raw":"- 事件：进程由执行状态变为阻塞状态所等待发生的事件，即阻塞原因"}],"loc":{"start":{"line":136,"column":3},"end":{"line":139,"column":35}},"range":[3587,3765],"raw":"- 进程状态：指明进程当前的状态，作为进程调度和对换时的依据\n   - 进程优先级：描述使用处理机的优先级别的一个整数，优先级越大的进程越优先获得处理机的处理\n   - 进程调度所需要的其他信息：和操作系统采用的进程调度算法有关，比如进程已经等待CPU的时间、进程已经执行的时间总和等\n   - 事件：进程由执行状态变为阻塞状态所等待发生的事件，即阻塞原因"}],"loc":{"start":{"line":135,"column":0},"end":{"line":139,"column":35}},"range":[3574,3765],"raw":"3. 进程调度信息\n   - 进程状态：指明进程当前的状态，作为进程调度和对换时的依据\n   - 进程优先级：描述使用处理机的优先级别的一个整数，优先级越大的进程越优先获得处理机的处理\n   - 进程调度所需要的其他信息：和操作系统采用的进程调度算法有关，比如进程已经等待CPU的时间、进程已经执行的时间总和等\n   - 事件：进程由执行状态变为阻塞状态所等待发生的事件，即阻塞原因"},{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"进程控制信息","loc":{"start":{"line":140,"column":3},"end":{"line":140,"column":9}},"range":[3769,3775],"raw":"进程控制信息"}],"loc":{"start":{"line":140,"column":3},"end":{"line":140,"column":9}},"range":[3769,3775],"raw":"进程控制信息"},{"type":"List","ordered":false,"start":null,"spread":false,"children":[{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"程序和数据地址","loc":{"start":{"line":141,"column":5},"end":{"line":141,"column":12}},"range":[3781,3788],"raw":"程序和数据地址"}],"loc":{"start":{"line":141,"column":5},"end":{"line":141,"column":12}},"range":[3781,3788],"raw":"程序和数据地址"}],"loc":{"start":{"line":141,"column":3},"end":{"line":141,"column":12}},"range":[3779,3788],"raw":"- 程序和数据地址"},{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"进程同步和通信机制：进程同步和通信时必需的机制，如消息队列指针、信号量等","loc":{"start":{"line":142,"column":5},"end":{"line":142,"column":41}},"range":[3794,3830],"raw":"进程同步和通信机制：进程同步和通信时必需的机制，如消息队列指针、信号量等"}],"loc":{"start":{"line":142,"column":5},"end":{"line":142,"column":41}},"range":[3794,3830],"raw":"进程同步和通信机制：进程同步和通信时必需的机制，如消息队列指针、信号量等"}],"loc":{"start":{"line":142,"column":3},"end":{"line":142,"column":41}},"range":[3792,3830],"raw":"- 进程同步和通信机制：进程同步和通信时必需的机制，如消息队列指针、信号量等"},{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"资源清单：包含除了CPU资源进程需要的全部资源以及已经分配到进程资源清单","loc":{"start":{"line":143,"column":5},"end":{"line":143,"column":41}},"range":[3836,3872],"raw":"资源清单：包含除了CPU资源进程需要的全部资源以及已经分配到进程资源清单"}],"loc":{"start":{"line":143,"column":5},"end":{"line":143,"column":41}},"range":[3836,3872],"raw":"资源清单：包含除了CPU资源进程需要的全部资源以及已经分配到进程资源清单"}],"loc":{"start":{"line":143,"column":3},"end":{"line":143,"column":41}},"range":[3834,3872],"raw":"- 资源清单：包含除了CPU资源进程需要的全部资源以及已经分配到进程资源清单"},{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"链接指针：给出本进程所在队列的下一个PCB的首地址","loc":{"start":{"line":144,"column":5},"end":{"line":144,"column":30}},"range":[3878,3903],"raw":"链接指针：给出本进程所在队列的下一个PCB的首地址"}],"loc":{"start":{"line":144,"column":5},"end":{"line":144,"column":30}},"range":[3878,3903],"raw":"链接指针：给出本进程所在队列的下一个PCB的首地址"}],"loc":{"start":{"line":144,"column":3},"end":{"line":144,"column":30}},"range":[3876,3903],"raw":"- 链接指针：给出本进程所在队列的下一个PCB的首地址"}],"loc":{"start":{"line":141,"column":3},"end":{"line":144,"column":30}},"range":[3779,3903],"raw":"- 程序和数据地址\n   - 进程同步和通信机制：进程同步和通信时必需的机制，如消息队列指针、信号量等\n   - 资源清单：包含除了CPU资源进程需要的全部资源以及已经分配到进程资源清单\n   - 链接指针：给出本进程所在队列的下一个PCB的首地址"}],"loc":{"start":{"line":140,"column":0},"end":{"line":144,"column":30}},"range":[3766,3903],"raw":"4. 进程控制信息\n   - 程序和数据地址\n   - 进程同步和通信机制：进程同步和通信时必需的机制，如消息队列指针、信号量等\n   - 资源清单：包含除了CPU资源进程需要的全部资源以及已经分配到进程资源清单\n   - 链接指针：给出本进程所在队列的下一个PCB的首地址"}],"loc":{"start":{"line":126,"column":0},"end":{"line":144,"column":30}},"range":[3262,3903],"raw":"1. 进程标识符\n   - 内部标识符：操作系统为每一个进程赋予的唯一的数字标识符，是一个进程的标号，主要是为了方便系统调用。\n   - 外部标识符：由创建者提供，通常由数字、字母组成，用于创建者访问该进程时使用。\n2. 处理机状态\n   进程上一次运行中断时保存在PCB内的状态信息，多存放在寄存器中：\n   - 通用寄存器：用户可视寄存器，用户程序可以访问，用于暂存信息\n   - 指令计数器：存放要访问的下一条指令的位置\n   - 程序状态字PSW：含有状态信息，如条件吗、执行方式、中断屏蔽标志等\n   - 用户栈指针：每个用户进程都有一个或者多个与之相关的系统栈，存放过程和系统调用参数和调用地址，栈指针指向栈顶\n3. 进程调度信息\n   - 进程状态：指明进程当前的状态，作为进程调度和对换时的依据\n   - 进程优先级：描述使用处理机的优先级别的一个整数，优先级越大的进程越优先获得处理机的处理\n   - 进程调度所需要的其他信息：和操作系统采用的进程调度算法有关，比如进程已经等待CPU的时间、进程已经执行的时间总和等\n   - 事件：进程由执行状态变为阻塞状态所等待发生的事件，即阻塞原因\n4. 进程控制信息\n   - 程序和数据地址\n   - 进程同步和通信机制：进程同步和通信时必需的机制，如消息队列指针、信号量等\n   - 资源清单：包含除了CPU资源进程需要的全部资源以及已经分配到进程资源清单\n   - 链接指针：给出本进程所在队列的下一个PCB的首地址"},{"type":"Header","depth":4,"children":[{"type":"Str","value":"进程控制块的组织方式","loc":{"start":{"line":146,"column":5},"end":{"line":146,"column":15}},"range":[3910,3920],"raw":"进程控制块的组织方式"}],"loc":{"start":{"line":146,"column":0},"end":{"line":146,"column":15}},"range":[3905,3920],"raw":"#### 进程控制块的组织方式"},{"type":"Header","depth":5,"children":[{"type":"Str","value":"链接方式","loc":{"start":{"line":148,"column":6},"end":{"line":148,"column":10}},"range":[3928,3932],"raw":"链接方式"}],"loc":{"start":{"line":148,"column":0},"end":{"line":148,"column":10}},"range":[3922,3932],"raw":"##### 链接方式"},{"type":"Paragraph","children":[{"type":"Str","value":"把具有同一个状态的PCB中的链接字链接成一个队列：如就绪队列、阻塞队列等","loc":{"start":{"line":150,"column":0},"end":{"line":150,"column":36}},"range":[3934,3970],"raw":"把具有同一个状态的PCB中的链接字链接成一个队列：如就绪队列、阻塞队列等"}],"loc":{"start":{"line":150,"column":0},"end":{"line":150,"column":36}},"range":[3934,3970],"raw":"把具有同一个状态的PCB中的链接字链接成一个队列：如就绪队列、阻塞队列等"},{"type":"Paragraph","children":[{"type":"Image","title":null,"url":"https://i.loli.net/2020/07/31/lT5VLxtWzmUPqMQ.png","alt":"PNG??.png","loc":{"start":{"line":152,"column":0},"end":{"line":152,"column":63}},"range":[3972,4035],"raw":"![PNG??.png](https://i.loli.net/2020/07/31/lT5VLxtWzmUPqMQ.png)"}],"loc":{"start":{"line":152,"column":0},"end":{"line":152,"column":63}},"range":[3972,4035],"raw":"![PNG??.png](https://i.loli.net/2020/07/31/lT5VLxtWzmUPqMQ.png)"},{"type":"Header","depth":4,"children":[{"type":"Str","value":"索引方式","loc":{"start":{"line":154,"column":5},"end":{"line":154,"column":9}},"range":[4042,4046],"raw":"索引方式"}],"loc":{"start":{"line":154,"column":0},"end":{"line":154,"column":9}},"range":[4037,4046],"raw":"#### 索引方式"},{"type":"Paragraph","children":[{"type":"Str","value":"根据所有进程状态建立几张索引表，并把各个索引表在内存中的首地址记录在内存的一些专用单元中。索引表的表目中记录具有相应状态的某个PCB在PCB中的首地址。","loc":{"start":{"line":156,"column":0},"end":{"line":156,"column":76}},"range":[4048,4124],"raw":"根据所有进程状态建立几张索引表，并把各个索引表在内存中的首地址记录在内存的一些专用单元中。索引表的表目中记录具有相应状态的某个PCB在PCB中的首地址。"}],"loc":{"start":{"line":156,"column":0},"end":{"line":156,"column":76}},"range":[4048,4124],"raw":"根据所有进程状态建立几张索引表，并把各个索引表在内存中的首地址记录在内存的一些专用单元中。索引表的表目中记录具有相应状态的某个PCB在PCB中的首地址。"},{"type":"Paragraph","children":[{"type":"Image","title":null,"url":"https://i.loli.net/2020/07/31/eCnwBcDu3TSkxMX.png","alt":"PNG??.png","loc":{"start":{"line":158,"column":0},"end":{"line":158,"column":63}},"range":[4126,4189],"raw":"![PNG??.png](https://i.loli.net/2020/07/31/eCnwBcDu3TSkxMX.png)"}],"loc":{"start":{"line":158,"column":0},"end":{"line":158,"column":63}},"range":[4126,4189],"raw":"![PNG??.png](https://i.loli.net/2020/07/31/eCnwBcDu3TSkxMX.png)"}],"loc":{"start":{"line":1,"column":0},"end":{"line":159,"column":0}},"range":[0,4190],"raw":"---\ntags: ['操作系统','进程']\n---\n\n# 进程的基本概念\n\n## 程序的顺序执行及其特征\n\n各个程序段操作之间必须按照某种先后次序执行，仅当前一操作执行完成后，后续的操作才能继续运行。\n\n### 程序顺序执行的特征\n\n1. 顺序性：严格按照程序制定的顺序执行\n2. 封闭性：程序在封闭的环境下运行，程序运行时独占全机资源，资源的状态（除初始状态）只有本程序可以改变，且一旦程序开始，执行的结构不受外界的影响。\n3. 可再现性：只要执行时的环境和初始条件相同，程序重复执行，不论程序如何执行，都将获得相同的结果。\n\n## 前趋图\n\n一个有向的**无循环**图，记为DAG(Directed Acyclic Graph)，用于描述进程之间的执行先后关系。\n\n<font color=\"red\">前趋图中必须不存在循环，循环的前趋关系是无法满足的。</font>\n\n有向图中的有向边表示两个结点之间存在的**偏序（Partial Order，偏序关系或前序关系（Precedence Relation））**，记作“$\\rightarrow$”。\n\n$\\rightarrow=\\{(P_{i}, P_{j})\\lvert P_{i} \\, must \\, complete \\, before \\, P_{j} \\, start\\}$，如果$(P_{i}, P_{j})\\in \\rightarrow$可以记作$P_{i} \\rightarrow P_{j}$\n\n![PNG??.png](https://i.loli.net/2020/07/30/TqlMZD12n7LWOgc.png)\n\n## 程序并发执行及特征\n\n例如在输入I、计算C和输出P三者中，第i次执行之间存在$I_{i}\\rightarrow C_{i} \\rightarrow P_{i}$的前趋关系，但是并不存在$P_{i} \\rightarrow I_{i}$的关系，便可以让第i次执行和第i+1次执行并发执行。计算程序在计算第i个程序时可以对第i+1个程序进行输入操作，对第i-1个程序进行输出操作等。\n\n![PNG?? 2.png](https://i.loli.net/2020/07/30/RVhyWB3YLmd5lg8.png)\n\n### 并发执行的特征\n\n1. 间断性：程序并发执行时，他们共享系统资源，为完成同一个任务而相互合作，这些并发程序之间形成了相互制约的关系，相互制约导致并发程序具有“执行——暂停——执行”这种间断性的活动规律。\n2. 失去封闭性：程序并发执行时，多个程序共享系统中的各种资源，状态由多个程序共同改变，程序在执行时必然会受到其他程序的影响。\n3. 不可再现性：程序在并发执行的时候失去了封闭性，导致其失去了可再现性\n\n程序在并发时，会失去封闭性，其计算结果与各个程序的执行速度有关，从而使程序失去了可再现性，即使运行环境和初始条件相同，程序多次执行的结果也可能不同。\n\n## 进程的特征与状态\n\n为了使程序能够并发执行，需要对其加以描述和控制，故引入了进程的概念。\n\n### 进程的典型定义\n\n1. 进程是程序的一次执行\n2. 进程是一个程序及其数据在处理机上顺序执行时所发生的活动\n3. 进程是程序在一个数据集合上运行的过程，它**是系统进行资源分配和调度的独立单位**\n\n### 进程的特征\n\n1. 结构特征：通常程序是不能并发执行的，为了使程序能够独立运行，应该为其配置进程控制块(PCB, Process Control Block)；程序段、数据和PCB就构成了进程实体。\n2. 动态性：进程的实质是进程实体的一次执行的过程，**动态性是进程的最基本的特征**，进程<font color=\"red\">由创建而产生，因调度而执行，由撤销而消亡</font>，有一定的生命周期。\n3. 并发性：多个进程实体共存于内存中，且能在同一段时间内运行，并发性是进程的重要特征，也是成为OS的重要特征，同时能够并发执行也是引入进程的目的。\n4. 独立性：进程实体是一个能独立运行，独立分配资源和独立接受调度的基本单位。未建立PCB的程序不能作为一个独立的单位参与运行。\n5. 异步性：进程实体按照异步的方式运行，即进程按照各自独立、不可预知的速度向前推进。\n\n### 进程的三种基本状态\n\n1. 就绪状态(Ready)：进程已经分配到除了CPU以外其他的资源，只要再获得CPU资源便可以开始运行。多个就绪状态的进程组成的队列成为**就绪队列**。\n2. 执行状态：进程已经分配到CPU资源，其程序正在执行。在单机处理系统中，只有一个进程处于执行状态。在多处理机系统中，则有多个进程处于执行状态。\n3. 阻塞状态：只在执行的进程因为某些事件而暂时无法继续执行，放弃处理机处于暂停状态，即进程的执行受到阻塞，也成为等待状态或封锁状态。\n\n### 进程的挂起状态\n\n挂起状态是指因为某种需要让正在执行的进程暂停执行，且在到非挂起状态之前不接受调度时的状态成为**挂起状态**。\n\n常见的引入挂起状态的原因：\n\n- 终端用户的请求：研究进程的执行状况或对程序进行修改\n- 父进程请求：考查和修改子进程或者协调各个子进程的工作\n- 负荷调节需要：操作系统负荷较重时将一些不重要的进程挂起，保证系统可以正常运行\n- 操作系统需要：检查运行中资源使用情况或进行记账\n\n#### 进程状态的转换\n\n从挂起（静止）状态到非挂起（活动状态），或者相反，有四种情况：\n\n- 活动就绪(Readya) $\\overset{Suspend}{\\rightarrow}$ 静止就绪(Readys)\n  \n  非挂起的就绪状态到静止的就绪状态，进程不再接受调度\n- 活动阻塞(Blockeda) $\\overset{Suspend}{\\rightarrow}$ 静止阻塞(Blockeds)\n  \n  处于此状态的进程在其期待的事件发生后，将从静止阻塞状态变为就绪状态\n- 静止就绪(Readys) $\\overset{Active}{\\rightarrow}$ 活动就绪(Readya)\n- 静止阻塞(Blockeds) $\\overset{Active}{\\rightarrow}$ 活动阻塞(Blockeda)\n\n### 进程的创建状态和终止状态\n\n#### 创建状态\n\n创建一个进程一般有两个步骤：\n\n- 新建一个PCB，填写必要的管理信息\n- 将进程转为就绪状态并插入就绪队列\n\n引入创建状态可以保证进程的调度必须在进程创建完成后进行，保证对进程控制块操作的完整性。也可以便于操作系统对进程资源的分配和管理。进程PCB初始化完成后便可以进入就绪状态。\n\n#### 终止状态\n\n当进程进入自然结束点或者发生无法克服的错误，或是被对其有终止权的其他进程终止时进程会进入终止状态，进入终止状态后的进程不再执行。\n\n进程的终止一般分为一下两个步骤：\n\n- 等待操作系统进行善后处理\n- 清零PCB，将PCB空间返回操作系统\n\n### 进程控制块(PCB, Process Control Block)\n\n#### 进程控制块的作用\n\n进程控制块是进程实体的一部分，是操作系统最重要的记录型数据结构。PCB中记录了全部的用于描述进程当前状态以及控制进程运行的全部信息。\n\nPCB使得一个不能在多道环境下独立运行的程序（含数据）成为一个能够独立运行的基本单位（能与其他进程并发执行的进程）。\n\n- 调度到某个进程时，根据其PCB的内容，恢复其运行现场，从PCB内的程序和数据的内存地址找到其程序和数据\n- 与合作进程实现同步、通信和访问文件时，访问PCB\n\nPCB是进程存在的**唯一标志**。PCB经常被系统访问，故PCB应该常驻内存，以链表或者队列的结构存储在操作系统专门开辟的PCB区内。\n\n#### 进程控制块中的信息\n\n1. 进程标识符\n   - 内部标识符：操作系统为每一个进程赋予的唯一的数字标识符，是一个进程的标号，主要是为了方便系统调用。\n   - 外部标识符：由创建者提供，通常由数字、字母组成，用于创建者访问该进程时使用。\n2. 处理机状态\n   进程上一次运行中断时保存在PCB内的状态信息，多存放在寄存器中：\n   - 通用寄存器：用户可视寄存器，用户程序可以访问，用于暂存信息\n   - 指令计数器：存放要访问的下一条指令的位置\n   - 程序状态字PSW：含有状态信息，如条件吗、执行方式、中断屏蔽标志等\n   - 用户栈指针：每个用户进程都有一个或者多个与之相关的系统栈，存放过程和系统调用参数和调用地址，栈指针指向栈顶\n3. 进程调度信息\n   - 进程状态：指明进程当前的状态，作为进程调度和对换时的依据\n   - 进程优先级：描述使用处理机的优先级别的一个整数，优先级越大的进程越优先获得处理机的处理\n   - 进程调度所需要的其他信息：和操作系统采用的进程调度算法有关，比如进程已经等待CPU的时间、进程已经执行的时间总和等\n   - 事件：进程由执行状态变为阻塞状态所等待发生的事件，即阻塞原因\n4. 进程控制信息\n   - 程序和数据地址\n   - 进程同步和通信机制：进程同步和通信时必需的机制，如消息队列指针、信号量等\n   - 资源清单：包含除了CPU资源进程需要的全部资源以及已经分配到进程资源清单\n   - 链接指针：给出本进程所在队列的下一个PCB的首地址\n\n#### 进程控制块的组织方式\n\n##### 链接方式\n\n把具有同一个状态的PCB中的链接字链接成一个队列：如就绪队列、阻塞队列等\n\n![PNG??.png](https://i.loli.net/2020/07/31/lT5VLxtWzmUPqMQ.png)\n\n#### 索引方式\n\n根据所有进程状态建立几张索引表，并把各个索引表在内存中的首地址记录在内存的一些专用单元中。索引表的表目中记录具有相应状态的某个PCB在PCB中的首地址。\n\n![PNG??.png](https://i.loli.net/2020/07/31/eCnwBcDu3TSkxMX.png)\n"},"catalogue":{"title":"2020-07-30-进程的基本概念","json-path":"2020-07-30-进程的基本概念.json","mdate":"2022-08-30T14:19:31.449Z","tags":["操作系统","进程"]}}