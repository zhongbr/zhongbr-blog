{"ast":{"type":"Document","children":[{"type":"Yaml","value":"tags: ['数据结构']","loc":{"start":{"line":1,"column":0},"end":{"line":3,"column":3}},"range":[0,22],"raw":"---\ntags: ['数据结构']\n---"},{"type":"Header","depth":2,"children":[{"type":"Str","value":"遍历二叉树和线索二叉树","loc":{"start":{"line":5,"column":3},"end":{"line":5,"column":14}},"range":[27,38],"raw":"遍历二叉树和线索二叉树"}],"loc":{"start":{"line":5,"column":0},"end":{"line":5,"column":14}},"range":[24,38],"raw":"## 遍历二叉树和线索二叉树"},{"type":"Header","depth":3,"children":[{"type":"Str","value":"遍历二叉树","loc":{"start":{"line":7,"column":4},"end":{"line":7,"column":9}},"range":[44,49],"raw":"遍历二叉树"}],"loc":{"start":{"line":7,"column":0},"end":{"line":7,"column":9}},"range":[40,49],"raw":"### 遍历二叉树"},{"type":"BlockQuote","children":[{"type":"Paragraph","children":[{"type":"Str","value":"二叉树由根节点、左子树和右子树组成，依次遍历这三个部分","loc":{"start":{"line":9,"column":2},"end":{"line":9,"column":29}},"range":[53,80],"raw":"二叉树由根节点、左子树和右子树组成，依次遍历这三个部分"}],"loc":{"start":{"line":9,"column":2},"end":{"line":9,"column":29}},"range":[53,80],"raw":"二叉树由根节点、左子树和右子树组成，依次遍历这三个部分"},{"type":"Paragraph","children":[{"type":"Str","value":"限定先左后右，","loc":{"start":{"line":11,"column":2},"end":{"line":11,"column":9}},"range":[85,92],"raw":"限定先左后右，"},{"type":"Strong","children":[{"type":"Str","value":"有先序遍历、中序遍历和后序遍历","loc":{"start":{"line":11,"column":11},"end":{"line":11,"column":26}},"range":[94,109],"raw":"有先序遍历、中序遍历和后序遍历"}],"loc":{"start":{"line":11,"column":9},"end":{"line":11,"column":28}},"range":[92,111],"raw":"**有先序遍历、中序遍历和后序遍历**"},{"type":"Str","value":"，三种遍历只有根结点、左、右子树的访问次序不同","loc":{"start":{"line":11,"column":28},"end":{"line":11,"column":51}},"range":[111,134],"raw":"，三种遍历只有根结点、左、右子树的访问次序不同"}],"loc":{"start":{"line":11,"column":2},"end":{"line":11,"column":51}},"range":[85,134],"raw":"限定先左后右，**有先序遍历、中序遍历和后序遍历**，三种遍历只有根结点、左、右子树的访问次序不同"}],"loc":{"start":{"line":9,"column":0},"end":{"line":11,"column":51}},"range":[51,134],"raw":"> 二叉树由根节点、左子树和右子树组成，依次遍历这三个部分\n>\n> 限定先左后右，**有先序遍历、中序遍历和后序遍历**，三种遍历只有根结点、左、右子树的访问次序不同"},{"type":"Header","depth":4,"children":[{"type":"Str","value":"递归先序遍历","loc":{"start":{"line":15,"column":5},"end":{"line":15,"column":11}},"range":[143,149],"raw":"递归先序遍历"}],"loc":{"start":{"line":15,"column":0},"end":{"line":15,"column":11}},"range":[138,149],"raw":"#### 递归先序遍历"},{"type":"CodeBlock","lang":"c","meta":null,"value":"/*\n * 采用递归的方式先序遍历\n */\nStatus PreOrderTraverse(BiTree T, Status(*Visit)(TElemType e)){\n    if(t){\n        if(Visit(T->data))\n            if(PreOrderTraverse(T->lchild.Visit))\n                if(PreOrderTraverse(T->rchild.Visit)) return OK;\n        return ERROR;\n    }\n    else return OK;\n}","loc":{"start":{"line":17,"column":0},"end":{"line":30,"column":3}},"range":[151,448],"raw":"```c\n/*\n * 采用递归的方式先序遍历\n */\nStatus PreOrderTraverse(BiTree T, Status(*Visit)(TElemType e)){\n    if(t){\n        if(Visit(T->data))\n            if(PreOrderTraverse(T->lchild.Visit))\n                if(PreOrderTraverse(T->rchild.Visit)) return OK;\n        return ERROR;\n    }\n    else return OK;\n}\n```"},{"type":"Header","depth":4,"children":[{"type":"Str","value":"非递归中序遍历","loc":{"start":{"line":34,"column":5},"end":{"line":34,"column":12}},"range":[457,464],"raw":"非递归中序遍历"}],"loc":{"start":{"line":34,"column":0},"end":{"line":34,"column":12}},"range":[452,464],"raw":"#### 非递归中序遍历"},{"type":"CodeBlock","lang":"c","meta":null,"value":"Status InOrderTraverse(BiTree t, Status (*Visit)(TElemType e)) {\n    Stack s;\n    InitStack(&s); // 初始化一个栈\n    Push(s, T); // 推入根结点的指针\n    while(!StackEmpty(&s)){\n        while(GetTop(s, p) && p) Push(s, p->lchild); // 访问左子树到尽头，并入栈\n        Pop(s, p); // 从栈内弹出一个结点\n        if(!StackEmpty(&s)) {\n            Pop(s, p);\n            if(!Visit(p->data)) return ERROR;\n            Push(s, p->rchild);\n        }\n    }\n    return OK;\n}","loc":{"start":{"line":36,"column":0},"end":{"line":52,"column":3}},"range":[466,902],"raw":"```c\nStatus InOrderTraverse(BiTree t, Status (*Visit)(TElemType e)) {\n    Stack s;\n    InitStack(&s); // 初始化一个栈\n    Push(s, T); // 推入根结点的指针\n    while(!StackEmpty(&s)){\n        while(GetTop(s, p) && p) Push(s, p->lchild); // 访问左子树到尽头，并入栈\n        Pop(s, p); // 从栈内弹出一个结点\n        if(!StackEmpty(&s)) {\n            Pop(s, p);\n            if(!Visit(p->data)) return ERROR;\n            Push(s, p->rchild);\n        }\n    }\n    return OK;\n}\n```"},{"type":"CodeBlock","lang":"c","meta":null,"value":"Status InOrderTraverse(BiTree t, Status (*Visit)(TElemType e)) {\n\tStack s;\n\tInitStack(&s);\n\tp = t;\n    while(p || !StackEmpty(&s)){\n        if(p){\n            Push(s, p); // 跟指针进栈\n            p = p->lchild; // 遍历左子树\n        }\n        else{\n            Pop(s, p);\n            if(!Visit(p->data)) return ERROR;\n            p = p -> rchild;\n        }\n    }\n    return OK;\n}","loc":{"start":{"line":54,"column":0},"end":{"line":72,"column":3}},"range":[904,1283],"raw":"```c\nStatus InOrderTraverse(BiTree t, Status (*Visit)(TElemType e)) {\n\tStack s;\n\tInitStack(&s);\n\tp = t;\n    while(p || !StackEmpty(&s)){\n        if(p){\n            Push(s, p); // 跟指针进栈\n            p = p->lchild; // 遍历左子树\n        }\n        else{\n            Pop(s, p);\n            if(!Visit(p->data)) return ERROR;\n            p = p -> rchild;\n        }\n    }\n    return OK;\n}\n```"},{"type":"Header","depth":3,"children":[{"type":"Str","value":"线索二叉树","loc":{"start":{"line":76,"column":4},"end":{"line":76,"column":9}},"range":[1291,1296],"raw":"线索二叉树"}],"loc":{"start":{"line":76,"column":0},"end":{"line":76,"column":9}},"range":[1287,1296],"raw":"### 线索二叉树"},{"type":"Paragraph","children":[{"type":"Str","value":"若结点有左子树，结点的lchild指针域存放其左孩子，否则lchild存储结点的前驱；如果结点有右子树，则rchild指针域存储右孩子，否则rchild指针域存储结点的后继，为了避免混淆可以加入LTag和RTag两个标志域。","loc":{"start":{"line":78,"column":0},"end":{"line":78,"column":112}},"range":[1298,1410],"raw":"若结点有左子树，结点的lchild指针域存放其左孩子，否则lchild存储结点的前驱；如果结点有右子树，则rchild指针域存储右孩子，否则rchild指针域存储结点的后继，为了避免混淆可以加入LTag和RTag两个标志域。"}],"loc":{"start":{"line":78,"column":0},"end":{"line":78,"column":112}},"range":[1298,1410],"raw":"若结点有左子树，结点的lchild指针域存放其左孩子，否则lchild存储结点的前驱；如果结点有右子树，则rchild指针域存储右孩子，否则rchild指针域存储结点的后继，为了避免混淆可以加入LTag和RTag两个标志域。"},{"type":"Paragraph","children":[{"type":"Image","title":null,"url":"https://i.loli.net/2020/07/26/Lh1fRTxm8Alwb3o.png","alt":"PNG??.png","loc":{"start":{"line":80,"column":0},"end":{"line":80,"column":63}},"range":[1412,1475],"raw":"![PNG??.png](https://i.loli.net/2020/07/26/Lh1fRTxm8Alwb3o.png)"}],"loc":{"start":{"line":80,"column":0},"end":{"line":80,"column":63}},"range":[1412,1475],"raw":"![PNG??.png](https://i.loli.net/2020/07/26/Lh1fRTxm8Alwb3o.png)"},{"type":"Paragraph","children":[{"type":"Str","value":"以上面的结构构成的二叉链表存储的二叉树，被称为","loc":{"start":{"line":82,"column":0},"end":{"line":82,"column":23}},"range":[1477,1500],"raw":"以上面的结构构成的二叉链表存储的二叉树，被称为"},{"type":"Strong","children":[{"type":"Str","value":"线索二叉树","loc":{"start":{"line":82,"column":25},"end":{"line":82,"column":30}},"range":[1502,1507],"raw":"线索二叉树"}],"loc":{"start":{"line":82,"column":23},"end":{"line":82,"column":32}},"range":[1500,1509],"raw":"**线索二叉树**"},{"type":"Str","value":"，指向前驱和后继的指针被称为","loc":{"start":{"line":82,"column":32},"end":{"line":82,"column":46}},"range":[1509,1523],"raw":"，指向前驱和后继的指针被称为"},{"type":"Strong","children":[{"type":"Str","value":"线索","loc":{"start":{"line":82,"column":48},"end":{"line":82,"column":50}},"range":[1525,1527],"raw":"线索"}],"loc":{"start":{"line":82,"column":46},"end":{"line":82,"column":52}},"range":[1523,1529],"raw":"**线索**"},{"type":"Str","value":"，对二叉树以某种次序遍历使其变为线索二叉树的过程叫做","loc":{"start":{"line":82,"column":52},"end":{"line":82,"column":78}},"range":[1529,1555],"raw":"，对二叉树以某种次序遍历使其变为线索二叉树的过程叫做"},{"type":"Strong","children":[{"type":"Str","value":"线索化","loc":{"start":{"line":82,"column":80},"end":{"line":82,"column":83}},"range":[1557,1560],"raw":"线索化"}],"loc":{"start":{"line":82,"column":78},"end":{"line":82,"column":85}},"range":[1555,1562],"raw":"**线索化**"},{"type":"Str","value":"。","loc":{"start":{"line":82,"column":85},"end":{"line":82,"column":86}},"range":[1562,1563],"raw":"。"}],"loc":{"start":{"line":82,"column":0},"end":{"line":82,"column":86}},"range":[1477,1563],"raw":"以上面的结构构成的二叉链表存储的二叉树，被称为**线索二叉树**，指向前驱和后继的指针被称为**线索**，对二叉树以某种次序遍历使其变为线索二叉树的过程叫做**线索化**。"},{"type":"Header","depth":4,"children":[{"type":"Str","value":"中序线索树，如何寻找结点的后继","loc":{"start":{"line":84,"column":5},"end":{"line":84,"column":20}},"range":[1570,1585],"raw":"中序线索树，如何寻找结点的后继"}],"loc":{"start":{"line":84,"column":0},"end":{"line":84,"column":20}},"range":[1565,1585],"raw":"#### 中序线索树，如何寻找结点的后继"},{"type":"List","ordered":false,"start":null,"spread":false,"children":[{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"所有叶子结点的右链就是线索，直接指向了其后继","loc":{"start":{"line":85,"column":2},"end":{"line":85,"column":24}},"range":[1588,1610],"raw":"所有叶子结点的右链就是线索，直接指向了其后继"}],"loc":{"start":{"line":85,"column":2},"end":{"line":85,"column":24}},"range":[1588,1610],"raw":"所有叶子结点的右链就是线索，直接指向了其后继"}],"loc":{"start":{"line":85,"column":0},"end":{"line":85,"column":24}},"range":[1586,1610],"raw":"- 所有叶子结点的右链就是线索，直接指向了其后继"},{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"所有非终端结点的后继是其右子树的最左下的结点（遍历其右子树时第一个访问的结点）","loc":{"start":{"line":86,"column":2},"end":{"line":86,"column":41}},"range":[1613,1652],"raw":"所有非终端结点的后继是其右子树的最左下的结点（遍历其右子树时第一个访问的结点）"}],"loc":{"start":{"line":86,"column":2},"end":{"line":86,"column":41}},"range":[1613,1652],"raw":"所有非终端结点的后继是其右子树的最左下的结点（遍历其右子树时第一个访问的结点）"}],"loc":{"start":{"line":86,"column":0},"end":{"line":86,"column":41}},"range":[1611,1652],"raw":"- 所有非终端结点的后继是其右子树的最左下的结点（遍历其右子树时第一个访问的结点）"}],"loc":{"start":{"line":85,"column":0},"end":{"line":86,"column":41}},"range":[1586,1652],"raw":"- 所有叶子结点的右链就是线索，直接指向了其后继\n- 所有非终端结点的后继是其右子树的最左下的结点（遍历其右子树时第一个访问的结点）"},{"type":"Header","depth":4,"children":[{"type":"Str","value":"中序线索树，如何寻找结点的前驱","loc":{"start":{"line":88,"column":5},"end":{"line":88,"column":20}},"range":[1659,1674],"raw":"中序线索树，如何寻找结点的前驱"}],"loc":{"start":{"line":88,"column":0},"end":{"line":88,"column":20}},"range":[1654,1674],"raw":"#### 中序线索树，如何寻找结点的前驱"},{"type":"List","ordered":false,"start":null,"spread":false,"children":[{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"如果其左标志LTag是1，那么左链就是线索，左链指向的就是其前驱","loc":{"start":{"line":89,"column":2},"end":{"line":89,"column":34}},"range":[1677,1709],"raw":"如果其左标志LTag是1，那么左链就是线索，左链指向的就是其前驱"}],"loc":{"start":{"line":89,"column":2},"end":{"line":89,"column":34}},"range":[1677,1709],"raw":"如果其左标志LTag是1，那么左链就是线索，左链指向的就是其前驱"}],"loc":{"start":{"line":89,"column":0},"end":{"line":89,"column":34}},"range":[1675,1709],"raw":"- 如果其左标志LTag是1，那么左链就是线索，左链指向的就是其前驱"},{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"如果其左标志LTag是0，那么其前驱是遍历其左子树时最后访问的结点","loc":{"start":{"line":90,"column":2},"end":{"line":90,"column":35}},"range":[1712,1745],"raw":"如果其左标志LTag是0，那么其前驱是遍历其左子树时最后访问的结点"}],"loc":{"start":{"line":90,"column":2},"end":{"line":90,"column":35}},"range":[1712,1745],"raw":"如果其左标志LTag是0，那么其前驱是遍历其左子树时最后访问的结点"}],"loc":{"start":{"line":90,"column":0},"end":{"line":90,"column":35}},"range":[1710,1745],"raw":"- 如果其左标志LTag是0，那么其前驱是遍历其左子树时最后访问的结点"}],"loc":{"start":{"line":89,"column":0},"end":{"line":90,"column":35}},"range":[1675,1745],"raw":"- 如果其左标志LTag是1，那么左链就是线索，左链指向的就是其前驱\n- 如果其左标志LTag是0，那么其前驱是遍历其左子树时最后访问的结点"},{"type":"Header","depth":4,"children":[{"type":"Str","value":"后序线索树，如何寻找结点的后继","loc":{"start":{"line":92,"column":5},"end":{"line":92,"column":20}},"range":[1752,1767],"raw":"后序线索树，如何寻找结点的后继"}],"loc":{"start":{"line":92,"column":0},"end":{"line":92,"column":20}},"range":[1747,1767],"raw":"#### 后序线索树，如何寻找结点的后继"},{"type":"List","ordered":false,"start":null,"spread":false,"children":[{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"如果结点是二叉树的根结点，其后继为空","loc":{"start":{"line":93,"column":2},"end":{"line":93,"column":20}},"range":[1770,1788],"raw":"如果结点是二叉树的根结点，其后继为空"}],"loc":{"start":{"line":93,"column":2},"end":{"line":93,"column":20}},"range":[1770,1788],"raw":"如果结点是二叉树的根结点，其后继为空"}],"loc":{"start":{"line":93,"column":0},"end":{"line":93,"column":20}},"range":[1768,1788],"raw":"- 如果结点是二叉树的根结点，其后继为空"},{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"如果结点是其双亲结点的右孩子，或者是其双亲结点的左孩子且双亲结点没有右孩子时，其后继结点是其双亲","loc":{"start":{"line":94,"column":2},"end":{"line":94,"column":50}},"range":[1791,1839],"raw":"如果结点是其双亲结点的右孩子，或者是其双亲结点的左孩子且双亲结点没有右孩子时，其后继结点是其双亲"}],"loc":{"start":{"line":94,"column":2},"end":{"line":94,"column":50}},"range":[1791,1839],"raw":"如果结点是其双亲结点的右孩子，或者是其双亲结点的左孩子且双亲结点没有右孩子时，其后继结点是其双亲"}],"loc":{"start":{"line":94,"column":0},"end":{"line":94,"column":50}},"range":[1789,1839],"raw":"- 如果结点是其双亲结点的右孩子，或者是其双亲结点的左孩子且双亲结点没有右孩子时，其后继结点是其双亲"},{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"如果结点是其双亲结点的左孩子，且其双亲结点有右子树，则其后继节点是遍历其双亲的右子树时访问的第一个结点（即其右子树的最左下的结点）","loc":{"start":{"line":95,"column":2},"end":{"line":95,"column":67}},"range":[1842,1907],"raw":"如果结点是其双亲结点的左孩子，且其双亲结点有右子树，则其后继节点是遍历其双亲的右子树时访问的第一个结点（即其右子树的最左下的结点）"}],"loc":{"start":{"line":95,"column":2},"end":{"line":95,"column":67}},"range":[1842,1907],"raw":"如果结点是其双亲结点的左孩子，且其双亲结点有右子树，则其后继节点是遍历其双亲的右子树时访问的第一个结点（即其右子树的最左下的结点）"}],"loc":{"start":{"line":95,"column":0},"end":{"line":95,"column":67}},"range":[1840,1907],"raw":"- 如果结点是其双亲结点的左孩子，且其双亲结点有右子树，则其后继节点是遍历其双亲的右子树时访问的第一个结点（即其右子树的最左下的结点）"}],"loc":{"start":{"line":93,"column":0},"end":{"line":95,"column":67}},"range":[1768,1907],"raw":"- 如果结点是二叉树的根结点，其后继为空\n- 如果结点是其双亲结点的右孩子，或者是其双亲结点的左孩子且双亲结点没有右孩子时，其后继结点是其双亲\n- 如果结点是其双亲结点的左孩子，且其双亲结点有右子树，则其后继节点是遍历其双亲的右子树时访问的第一个结点（即其右子树的最左下的结点）"}],"loc":{"start":{"line":1,"column":0},"end":{"line":96,"column":0}},"range":[0,1908],"raw":"---\ntags: ['数据结构']\n---\n\n## 遍历二叉树和线索二叉树\n\n### 遍历二叉树\n\n> 二叉树由根节点、左子树和右子树组成，依次遍历这三个部分\n>\n> 限定先左后右，**有先序遍历、中序遍历和后序遍历**，三种遍历只有根结点、左、右子树的访问次序不同\n\n\n\n#### 递归先序遍历\n\n```c\n/*\n * 采用递归的方式先序遍历\n */\nStatus PreOrderTraverse(BiTree T, Status(*Visit)(TElemType e)){\n    if(t){\n        if(Visit(T->data))\n            if(PreOrderTraverse(T->lchild.Visit))\n                if(PreOrderTraverse(T->rchild.Visit)) return OK;\n        return ERROR;\n    }\n    else return OK;\n}\n```\n\n\n\n#### 非递归中序遍历\n\n```c\nStatus InOrderTraverse(BiTree t, Status (*Visit)(TElemType e)) {\n    Stack s;\n    InitStack(&s); // 初始化一个栈\n    Push(s, T); // 推入根结点的指针\n    while(!StackEmpty(&s)){\n        while(GetTop(s, p) && p) Push(s, p->lchild); // 访问左子树到尽头，并入栈\n        Pop(s, p); // 从栈内弹出一个结点\n        if(!StackEmpty(&s)) {\n            Pop(s, p);\n            if(!Visit(p->data)) return ERROR;\n            Push(s, p->rchild);\n        }\n    }\n    return OK;\n}\n```\n\n```c\nStatus InOrderTraverse(BiTree t, Status (*Visit)(TElemType e)) {\n\tStack s;\n\tInitStack(&s);\n\tp = t;\n    while(p || !StackEmpty(&s)){\n        if(p){\n            Push(s, p); // 跟指针进栈\n            p = p->lchild; // 遍历左子树\n        }\n        else{\n            Pop(s, p);\n            if(!Visit(p->data)) return ERROR;\n            p = p -> rchild;\n        }\n    }\n    return OK;\n}\n```\n\n\n\n### 线索二叉树\n\n若结点有左子树，结点的lchild指针域存放其左孩子，否则lchild存储结点的前驱；如果结点有右子树，则rchild指针域存储右孩子，否则rchild指针域存储结点的后继，为了避免混淆可以加入LTag和RTag两个标志域。\n\n![PNG??.png](https://i.loli.net/2020/07/26/Lh1fRTxm8Alwb3o.png)\n\n以上面的结构构成的二叉链表存储的二叉树，被称为**线索二叉树**，指向前驱和后继的指针被称为**线索**，对二叉树以某种次序遍历使其变为线索二叉树的过程叫做**线索化**。\n\n#### 中序线索树，如何寻找结点的后继\n- 所有叶子结点的右链就是线索，直接指向了其后继\n- 所有非终端结点的后继是其右子树的最左下的结点（遍历其右子树时第一个访问的结点）\n\n#### 中序线索树，如何寻找结点的前驱\n- 如果其左标志LTag是1，那么左链就是线索，左链指向的就是其前驱\n- 如果其左标志LTag是0，那么其前驱是遍历其左子树时最后访问的结点\n\n#### 后序线索树，如何寻找结点的后继\n- 如果结点是二叉树的根结点，其后继为空\n- 如果结点是其双亲结点的右孩子，或者是其双亲结点的左孩子且双亲结点没有右孩子时，其后继结点是其双亲\n- 如果结点是其双亲结点的左孩子，且其双亲结点有右子树，则其后继节点是遍历其双亲的右子树时访问的第一个结点（即其右子树的最左下的结点）\n"},"catalogue":{"title":"2020-07-26-遍历二叉树和线索二叉树","json-path":"2020-07-26-遍历二叉树和线索二叉树.json","mdate":"2022-08-30T14:19:31.448Z","tags":["数据结构"]}}