{"ast":{"type":"Document","children":[{"type":"Yaml","value":"title: '内存分页管理'\ntags: ['操作系统','分页','内存']","loc":{"start":{"line":1,"column":0},"end":{"line":4,"column":3}},"range":[0,48],"raw":"---\ntitle: '内存分页管理'\ntags: ['操作系统','分页','内存']\n---","visible":false},{"type":"Header","depth":1,"children":[{"type":"Str","value":"分页管理","loc":{"start":{"line":5,"column":2},"end":{"line":5,"column":6}},"range":[51,55],"raw":"分页管理"}],"loc":{"start":{"line":5,"column":0},"end":{"line":5,"column":6}},"range":[49,55],"raw":"# 分页管理"},{"type":"Header","depth":1,"children":[{"type":"Str","value":"单级分页管理","loc":{"start":{"line":7,"column":2},"end":{"line":7,"column":8}},"range":[59,65],"raw":"单级分页管理"}],"loc":{"start":{"line":7,"column":0},"end":{"line":7,"column":8}},"range":[57,65],"raw":"# 单级分页管理"},{"type":"Paragraph","children":[{"type":"Str","value":"基本分页存储管理的思想：把内存分为一个个相等的小","loc":{"start":{"line":9,"column":0},"end":{"line":9,"column":24}},"range":[67,91],"raw":"基本分页存储管理的思想：把内存分为一个个相等的小"},{"type":"Strong","children":[{"type":"Str","value":"分区","loc":{"start":{"line":9,"column":26},"end":{"line":9,"column":28}},"range":[93,95],"raw":"分区"}],"loc":{"start":{"line":9,"column":24},"end":{"line":9,"column":30}},"range":[91,97],"raw":"**分区**"},{"type":"Str","value":"，再按照分页大小把进程拆分成一个个小部分。","loc":{"start":{"line":9,"column":30},"end":{"line":9,"column":51}},"range":[97,118],"raw":"，再按照分页大小把进程拆分成一个个小部分。"}],"loc":{"start":{"line":9,"column":0},"end":{"line":9,"column":51}},"range":[67,118],"raw":"基本分页存储管理的思想：把内存分为一个个相等的小**分区**，再按照分页大小把进程拆分成一个个小部分。"},{"type":"BlockQuote","children":[{"type":"Paragraph","children":[{"type":"Str","value":"分区：又叫页框、页帧、内存块、物理块","loc":{"start":{"line":11,"column":3},"end":{"line":11,"column":21}},"range":[123,141],"raw":"分区：又叫页框、页帧、内存块、物理块"}],"loc":{"start":{"line":11,"column":3},"end":{"line":11,"column":21}},"range":[123,141],"raw":"分区：又叫页框、页帧、内存块、物理块"},{"type":"Paragraph","children":[{"type":"Str","value":"页框号：每一个页框的编号，又叫内存块号、页帧号、物理块号，从0开始","loc":{"start":{"line":13,"column":3},"end":{"line":13,"column":36}},"range":[147,180],"raw":"页框号：每一个页框的编号，又叫内存块号、页帧号、物理块号，从0开始"}],"loc":{"start":{"line":13,"column":3},"end":{"line":13,"column":36}},"range":[147,180],"raw":"页框号：每一个页框的编号，又叫内存块号、页帧号、物理块号，从0开始"},{"type":"Paragraph","children":[{"type":"Str","value":"页面：将用户进程的地址空间分为与页面大小相同的一个个区域，称为“页”或者“页面”","loc":{"start":{"line":15,"column":3},"end":{"line":15,"column":43}},"range":[186,226],"raw":"页面：将用户进程的地址空间分为与页面大小相同的一个个区域，称为“页”或者“页面”"}],"loc":{"start":{"line":15,"column":3},"end":{"line":15,"column":43}},"range":[186,226],"raw":"页面：将用户进程的地址空间分为与页面大小相同的一个个区域，称为“页”或者“页面”"},{"type":"Paragraph","children":[{"type":"Str","value":"页号：每个页面都有一个编号，即“页号”，页号和页框号一样从0开始。","loc":{"start":{"line":17,"column":3},"end":{"line":17,"column":36}},"range":[232,265],"raw":"页号：每个页面都有一个编号，即“页号”，页号和页框号一样从0开始。"}],"loc":{"start":{"line":17,"column":3},"end":{"line":17,"column":36}},"range":[232,265],"raw":"页号：每个页面都有一个编号，即“页号”，页号和页框号一样从0开始。"},{"type":"Paragraph","children":[{"type":"Emphasis","children":[{"type":"Strong","children":[{"type":"Str","value":"页框不能设置太大，页框太大会产生较多的内部碎片","loc":{"start":{"line":19,"column":6},"end":{"line":19,"column":29}},"range":[274,297],"raw":"页框不能设置太大，页框太大会产生较多的内部碎片"}],"loc":{"start":{"line":19,"column":4},"end":{"line":19,"column":31}},"range":[272,299],"raw":"**页框不能设置太大，页框太大会产生较多的内部碎片**"}],"loc":{"start":{"line":19,"column":3},"end":{"line":19,"column":32}},"range":[271,300],"raw":"***页框不能设置太大，页框太大会产生较多的内部碎片***"}],"loc":{"start":{"line":19,"column":3},"end":{"line":19,"column":32}},"range":[271,300],"raw":"***页框不能设置太大，页框太大会产生较多的内部碎片***"}],"loc":{"start":{"line":11,"column":0},"end":{"line":19,"column":32}},"range":[120,300],"raw":">  分区：又叫页框、页帧、内存块、物理块\n>\n>  页框号：每一个页框的编号，又叫内存块号、页帧号、物理块号，从0开始\n>\n>  页面：将用户进程的地址空间分为与页面大小相同的一个个区域，称为“页”或者“页面”\n>\n>  页号：每个页面都有一个编号，即“页号”，页号和页框号一样从0开始。\n>\n>  ***页框不能设置太大，页框太大会产生较多的内部碎片***"},{"type":"Header","depth":2,"children":[{"type":"Str","value":"地址转换","loc":{"start":{"line":21,"column":3},"end":{"line":21,"column":7}},"range":[305,309],"raw":"地址转换"}],"loc":{"start":{"line":21,"column":0},"end":{"line":21,"column":7}},"range":[302,309],"raw":"## 地址转换"},{"type":"Paragraph","children":[{"type":"Str","value":"如果一个操作系统采用分页的管理内存，如果想要通过逻辑地址得到其物理地址：","loc":{"start":{"line":23,"column":0},"end":{"line":23,"column":36}},"range":[311,347],"raw":"如果一个操作系统采用分页的管理内存，如果想要通过逻辑地址得到其物理地址："}],"loc":{"start":{"line":23,"column":0},"end":{"line":23,"column":36}},"range":[311,347],"raw":"如果一个操作系统采用分页的管理内存，如果想要通过逻辑地址得到其物理地址："},{"type":"List","ordered":true,"start":1,"spread":false,"children":[{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"算出逻辑地址对应的页号","loc":{"start":{"line":25,"column":3},"end":{"line":25,"column":14}},"range":[352,363],"raw":"算出逻辑地址对应的页号"}],"loc":{"start":{"line":25,"column":3},"end":{"line":25,"column":14}},"range":[352,363],"raw":"算出逻辑地址对应的页号"}],"loc":{"start":{"line":25,"column":0},"end":{"line":25,"column":14}},"range":[349,363],"raw":"1. 算出逻辑地址对应的页号"},{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"要知道页号对应的页面在内存中的起始地址（操作系统会保存）","loc":{"start":{"line":26,"column":3},"end":{"line":26,"column":31}},"range":[367,395],"raw":"要知道页号对应的页面在内存中的起始地址（操作系统会保存）"}],"loc":{"start":{"line":26,"column":3},"end":{"line":26,"column":31}},"range":[367,395],"raw":"要知道页号对应的页面在内存中的起始地址（操作系统会保存）"}],"loc":{"start":{"line":26,"column":0},"end":{"line":26,"column":31}},"range":[364,395],"raw":"2. 要知道页号对应的页面在内存中的起始地址（操作系统会保存）"},{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"算出逻辑地址在页面中的偏移量","loc":{"start":{"line":27,"column":3},"end":{"line":27,"column":17}},"range":[399,413],"raw":"算出逻辑地址在页面中的偏移量"}],"loc":{"start":{"line":27,"column":3},"end":{"line":27,"column":17}},"range":[399,413],"raw":"算出逻辑地址在页面中的偏移量"}],"loc":{"start":{"line":27,"column":0},"end":{"line":27,"column":17}},"range":[396,413],"raw":"3. 算出逻辑地址在页面中的偏移量"},{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"物理地址 = 页面起始地址 + 偏移量","loc":{"start":{"line":28,"column":3},"end":{"line":28,"column":22}},"range":[417,436],"raw":"物理地址 = 页面起始地址 + 偏移量"}],"loc":{"start":{"line":28,"column":3},"end":{"line":28,"column":22}},"range":[417,436],"raw":"物理地址 = 页面起始地址 + 偏移量"}],"loc":{"start":{"line":28,"column":0},"end":{"line":28,"column":22}},"range":[414,436],"raw":"4. 物理地址 = 页面起始地址 + 偏移量"}],"loc":{"start":{"line":25,"column":0},"end":{"line":28,"column":22}},"range":[349,436],"raw":"1. 算出逻辑地址对应的页号\n2. 要知道页号对应的页面在内存中的起始地址（操作系统会保存）\n3. 算出逻辑地址在页面中的偏移量\n4. 物理地址 = 页面起始地址 + 偏移量"},{"type":"BlockQuote","children":[{"type":"Paragraph","children":[{"type":"Str","value":"如果每个页面的大小为 ","loc":{"start":{"line":30,"column":2},"end":{"line":30,"column":13}},"range":[440,451],"raw":"如果每个页面的大小为 "},{"type":"InlineMath","value":"2^{k}B","data":{"hName":"span","hProperties":{"className":["math","math-inline"]},"hChildren":[{"type":"Str","value":"2^{k}B"}]},"loc":{"start":{"line":30,"column":13},"end":{"line":30,"column":21}},"range":[451,459],"raw":"$2^{k}B$"},{"type":"Str","value":" ，用二进制表示其逻辑地址，其末尾的k位即为其页内偏移量，前面的其余部分就是分页的页号。","loc":{"start":{"line":30,"column":21},"end":{"line":30,"column":65}},"range":[459,503],"raw":" ，用二进制表示其逻辑地址，其末尾的k位即为其页内偏移量，前面的其余部分就是分页的页号。"}],"loc":{"start":{"line":30,"column":2},"end":{"line":30,"column":65}},"range":[440,503],"raw":"如果每个页面的大小为 $2^{k}B$ ，用二进制表示其逻辑地址，其末尾的k位即为其页内偏移量，前面的其余部分就是分页的页号。"}],"loc":{"start":{"line":30,"column":0},"end":{"line":30,"column":65}},"range":[438,503],"raw":"> 如果每个页面的大小为 $2^{k}B$ ，用二进制表示其逻辑地址，其末尾的k位即为其页内偏移量，前面的其余部分就是分页的页号。"},{"type":"Paragraph","children":[{"type":"Str","value":"为了能知道每个页面在内存中存放的位置，操作系统要为","loc":{"start":{"line":32,"column":0},"end":{"line":32,"column":25}},"range":[505,530],"raw":"为了能知道每个页面在内存中存放的位置，操作系统要为"},{"type":"Strong","children":[{"type":"Str","value":"每个进程建立一个页表","loc":{"start":{"line":32,"column":27},"end":{"line":32,"column":37}},"range":[532,542],"raw":"每个进程建立一个页表"}],"loc":{"start":{"line":32,"column":25},"end":{"line":32,"column":39}},"range":[530,544],"raw":"**每个进程建立一个页表**"},{"type":"Str","value":"，页表中的页表项由页号和块号组成，页表负责记录进程页面和时机存放的内存块之间的对应关系。","loc":{"start":{"line":32,"column":39},"end":{"line":32,"column":83}},"range":[544,588],"raw":"，页表中的页表项由页号和块号组成，页表负责记录进程页面和时机存放的内存块之间的对应关系。"}],"loc":{"start":{"line":32,"column":0},"end":{"line":32,"column":83}},"range":[505,588],"raw":"为了能知道每个页面在内存中存放的位置，操作系统要为**每个进程建立一个页表**，页表中的页表项由页号和块号组成，页表负责记录进程页面和时机存放的内存块之间的对应关系。"},{"type":"Paragraph","children":[{"type":"Str","value":"值得注意的是，页表中的页号是隐含在页表项的偏移量中的（相当于将页号隐含在数组的下标中）。","loc":{"start":{"line":34,"column":0},"end":{"line":34,"column":44}},"range":[590,634],"raw":"值得注意的是，页表中的页号是隐含在页表项的偏移量中的（相当于将页号隐含在数组的下标中）。"}],"loc":{"start":{"line":34,"column":0},"end":{"line":34,"column":44}},"range":[590,634],"raw":"值得注意的是，页表中的页号是隐含在页表项的偏移量中的（相当于将页号隐含在数组的下标中）。"},{"type":"Header","depth":2,"children":[{"type":"Str","value":"基本地址变换机构","loc":{"start":{"line":36,"column":3},"end":{"line":36,"column":11}},"range":[639,647],"raw":"基本地址变换机构"}],"loc":{"start":{"line":36,"column":0},"end":{"line":36,"column":11}},"range":[636,647],"raw":"## 基本地址变换机构"},{"type":"Paragraph","children":[{"type":"Str","value":"用于实现","loc":{"start":{"line":38,"column":0},"end":{"line":38,"column":4}},"range":[649,653],"raw":"用于实现"},{"type":"Strong","children":[{"type":"Str","value":"逻辑地址到物理地址","loc":{"start":{"line":38,"column":6},"end":{"line":38,"column":15}},"range":[655,664],"raw":"逻辑地址到物理地址"}],"loc":{"start":{"line":38,"column":4},"end":{"line":38,"column":17}},"range":[653,666],"raw":"**逻辑地址到物理地址**"},{"type":"Str","value":"转换的一组","loc":{"start":{"line":38,"column":17},"end":{"line":38,"column":22}},"range":[666,671],"raw":"转换的一组"},{"type":"Strong","children":[{"type":"Str","value":"硬件机构","loc":{"start":{"line":38,"column":24},"end":{"line":38,"column":28}},"range":[673,677],"raw":"硬件机构"}],"loc":{"start":{"line":38,"column":22},"end":{"line":38,"column":30}},"range":[671,679],"raw":"**硬件机构**"},{"type":"Str","value":"。","loc":{"start":{"line":38,"column":30},"end":{"line":38,"column":31}},"range":[679,680],"raw":"。"}],"loc":{"start":{"line":38,"column":0},"end":{"line":38,"column":32}},"range":[649,681],"raw":"用于实现**逻辑地址到物理地址**转换的一组**硬件机构**。 "},{"type":"Paragraph","children":[{"type":"Str","value":"基本地址变换机构借助进程页表将逻辑地址转换为物理地址：基本地址变换机构可以借助进程的页表将逻辑地址转换为物理地址通常会在系统中设置一个","loc":{"start":{"line":40,"column":0},"end":{"line":40,"column":67}},"range":[683,750],"raw":"基本地址变换机构借助进程页表将逻辑地址转换为物理地址：基本地址变换机构可以借助进程的页表将逻辑地址转换为物理地址通常会在系统中设置一个"},{"type":"Strong","children":[{"type":"Str","value":"页表寄存器(PTR)","loc":{"start":{"line":40,"column":69},"end":{"line":40,"column":79}},"range":[752,762],"raw":"页表寄存器(PTR)"}],"loc":{"start":{"line":40,"column":67},"end":{"line":40,"column":81}},"range":[750,764],"raw":"**页表寄存器(PTR)**"},{"type":"Str","value":",存放页表在内存中的起始地址F和页表长度M。\n进程未执行时,页表的始址和页表长度放在进程控制块(PCB)中,当进程被调度时,操作系统内核会把它们放到页表寄存器中。","loc":{"start":{"line":40,"column":81},"end":{"line":41,"column":58}},"range":[764,845],"raw":",存放页表在内存中的起始地址F和页表长度M。\n进程未执行时,页表的始址和页表长度放在进程控制块(PCB)中,当进程被调度时,操作系统内核会把它们放到页表寄存器中。"}],"loc":{"start":{"line":40,"column":0},"end":{"line":41,"column":58}},"range":[683,845],"raw":"基本地址变换机构借助进程页表将逻辑地址转换为物理地址：基本地址变换机构可以借助进程的页表将逻辑地址转换为物理地址通常会在系统中设置一个**页表寄存器(PTR)**,存放页表在内存中的起始地址F和页表长度M。\n进程未执行时,页表的始址和页表长度放在进程控制块(PCB)中,当进程被调度时,操作系统内核会把它们放到页表寄存器中。"},{"type":"List","ordered":false,"start":null,"spread":false,"children":[{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"根据逻辑地址计算出页号、页内偏移量","loc":{"start":{"line":43,"column":2},"end":{"line":43,"column":19}},"range":[849,866],"raw":"根据逻辑地址计算出页号、页内偏移量"}],"loc":{"start":{"line":43,"column":2},"end":{"line":43,"column":19}},"range":[849,866],"raw":"根据逻辑地址计算出页号、页内偏移量"}],"loc":{"start":{"line":43,"column":0},"end":{"line":43,"column":19}},"range":[847,866],"raw":"- 根据逻辑地址计算出页号、页内偏移量"},{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"检查页号是否越界，不合法的时候会出现","loc":{"start":{"line":44,"column":2},"end":{"line":44,"column":20}},"range":[869,887],"raw":"检查页号是否越界，不合法的时候会出现"},{"type":"Strong","children":[{"type":"Str","value":"越界中断","loc":{"start":{"line":44,"column":22},"end":{"line":44,"column":26}},"range":[889,893],"raw":"越界中断"}],"loc":{"start":{"line":44,"column":20},"end":{"line":44,"column":28}},"range":[887,895],"raw":"**越界中断**"}],"loc":{"start":{"line":44,"column":2},"end":{"line":44,"column":28}},"range":[869,895],"raw":"检查页号是否越界，不合法的时候会出现**越界中断**"}],"loc":{"start":{"line":44,"column":0},"end":{"line":44,"column":28}},"range":[867,895],"raw":"- 检查页号是否越界，不合法的时候会出现**越界中断**"},{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"如果页号合法，查询页表，找到页号对应的页表项（ ","loc":{"start":{"line":45,"column":2},"end":{"line":45,"column":26}},"range":[898,922],"raw":"如果页号合法，查询页表，找到页号对应的页表项（ "},{"type":"InlineMath","value":"页表项地址=页表起始地址+页号*页表项长度","data":{"hName":"span","hProperties":{"className":["math","math-inline"]},"hChildren":[{"type":"Str","value":"页表项地址=页表起始地址+页号*页表项长度"}]},"loc":{"start":{"line":45,"column":26},"end":{"line":45,"column":49}},"range":[922,945],"raw":"$页表项地址=页表起始地址+页号*页表项长度$"},{"type":"Str","value":" ），确定页面存放的内存块号","loc":{"start":{"line":45,"column":49},"end":{"line":45,"column":63}},"range":[945,959],"raw":" ），确定页面存放的内存块号"}],"loc":{"start":{"line":45,"column":2},"end":{"line":45,"column":63}},"range":[898,959],"raw":"如果页号合法，查询页表，找到页号对应的页表项（ $页表项地址=页表起始地址+页号*页表项长度$ ），确定页面存放的内存块号"}],"loc":{"start":{"line":45,"column":0},"end":{"line":45,"column":63}},"range":[896,959],"raw":"- 如果页号合法，查询页表，找到页号对应的页表项（ $页表项地址=页表起始地址+页号*页表项长度$ ），确定页面存放的内存块号"},{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"用内存块号和页内偏移量得到物理地址","loc":{"start":{"line":46,"column":2},"end":{"line":46,"column":19}},"range":[962,979],"raw":"用内存块号和页内偏移量得到物理地址"}],"loc":{"start":{"line":46,"column":2},"end":{"line":46,"column":19}},"range":[962,979],"raw":"用内存块号和页内偏移量得到物理地址"}],"loc":{"start":{"line":46,"column":0},"end":{"line":46,"column":19}},"range":[960,979],"raw":"- 用内存块号和页内偏移量得到物理地址"}],"loc":{"start":{"line":43,"column":0},"end":{"line":46,"column":19}},"range":[847,979],"raw":"- 根据逻辑地址计算出页号、页内偏移量\n- 检查页号是否越界，不合法的时候会出现**越界中断**\n- 如果页号合法，查询页表，找到页号对应的页表项（ $页表项地址=页表起始地址+页号*页表项长度$ ），确定页面存放的内存块号\n- 用内存块号和页内偏移量得到物理地址"},{"type":"Header","depth":2,"children":[{"type":"Str","value":"具有快表的地址变换机构","loc":{"start":{"line":48,"column":3},"end":{"line":48,"column":14}},"range":[984,995],"raw":"具有快表的地址变换机构"}],"loc":{"start":{"line":48,"column":0},"end":{"line":48,"column":14}},"range":[981,995],"raw":"## 具有快表的地址变换机构"},{"type":"BlockQuote","children":[{"type":"Paragraph","children":[{"type":"Strong","children":[{"type":"Str","value":"局部性原理","loc":{"start":{"line":50,"column":4},"end":{"line":50,"column":9}},"range":[1001,1006],"raw":"局部性原理"}],"loc":{"start":{"line":50,"column":2},"end":{"line":50,"column":11}},"range":[999,1008],"raw":"**局部性原理**"}],"loc":{"start":{"line":50,"column":2},"end":{"line":50,"column":11}},"range":[999,1008],"raw":"**局部性原理**"},{"type":"Paragraph","children":[{"type":"Strong","children":[{"type":"Str","value":"时间局部性","loc":{"start":{"line":52,"column":4},"end":{"line":52,"column":9}},"range":[1015,1020],"raw":"时间局部性"}],"loc":{"start":{"line":52,"column":2},"end":{"line":52,"column":11}},"range":[1013,1022],"raw":"**时间局部性**"},{"type":"Str","value":"：如果执行了程序中的某条指令，那么不久后这条指令有可能再被执行，如果某个数据被访问过，不久之后很有可能被再次访问。","loc":{"start":{"line":52,"column":11},"end":{"line":52,"column":68}},"range":[1022,1079],"raw":"：如果执行了程序中的某条指令，那么不久后这条指令有可能再被执行，如果某个数据被访问过，不久之后很有可能被再次访问。"}],"loc":{"start":{"line":52,"column":2},"end":{"line":52,"column":68}},"range":[1013,1079],"raw":"**时间局部性**：如果执行了程序中的某条指令，那么不久后这条指令有可能再被执行，如果某个数据被访问过，不久之后很有可能被再次访问。"},{"type":"Paragraph","children":[{"type":"Strong","children":[{"type":"Str","value":"空间局部性","loc":{"start":{"line":54,"column":4},"end":{"line":54,"column":9}},"range":[1086,1091],"raw":"空间局部性"}],"loc":{"start":{"line":54,"column":2},"end":{"line":54,"column":11}},"range":[1084,1093],"raw":"**空间局部性**"},{"type":"Str","value":"：一旦程序访问了某个存储单元，不久之后，其附近的存储单元也很有可能被访问。（很多数据再内存中是连续存放的）。","loc":{"start":{"line":54,"column":11},"end":{"line":54,"column":65}},"range":[1093,1147],"raw":"：一旦程序访问了某个存储单元，不久之后，其附近的存储单元也很有可能被访问。（很多数据再内存中是连续存放的）。"}],"loc":{"start":{"line":54,"column":2},"end":{"line":54,"column":65}},"range":[1084,1147],"raw":"**空间局部性**：一旦程序访问了某个存储单元，不久之后，其附近的存储单元也很有可能被访问。（很多数据再内存中是连续存放的）。"}],"loc":{"start":{"line":50,"column":0},"end":{"line":54,"column":65}},"range":[997,1147],"raw":"> **局部性原理**\n>\n> **时间局部性**：如果执行了程序中的某条指令，那么不久后这条指令有可能再被执行，如果某个数据被访问过，不久之后很有可能被再次访问。\n>\n> **空间局部性**：一旦程序访问了某个存储单元，不久之后，其附近的存储单元也很有可能被访问。（很多数据再内存中是连续存放的）。"},{"type":"Paragraph","children":[{"type":"Str","value":"在基本地址变换机构中，每次要访问一个逻辑地址，都需要查询内存中的页表，由局部性原理，","loc":{"start":{"line":56,"column":0},"end":{"line":56,"column":42}},"range":[1149,1191],"raw":"在基本地址变换机构中，每次要访问一个逻辑地址，都需要查询内存中的页表，由局部性原理，"},{"type":"Strong","children":[{"type":"Str","value":"可能连续很多查到的都是同一个页表项","loc":{"start":{"line":56,"column":44},"end":{"line":56,"column":61}},"range":[1193,1210],"raw":"可能连续很多查到的都是同一个页表项"}],"loc":{"start":{"line":56,"column":42},"end":{"line":56,"column":63}},"range":[1191,1212],"raw":"**可能连续很多查到的都是同一个页表项**"},{"type":"Str","value":"。","loc":{"start":{"line":56,"column":63},"end":{"line":56,"column":64}},"range":[1212,1213],"raw":"。"}],"loc":{"start":{"line":56,"column":0},"end":{"line":56,"column":64}},"range":[1149,1213],"raw":"在基本地址变换机构中，每次要访问一个逻辑地址，都需要查询内存中的页表，由局部性原理，**可能连续很多查到的都是同一个页表项**。"},{"type":"Paragraph","children":[{"type":"Strong","children":[{"type":"Str","value":"快表","loc":{"start":{"line":58,"column":2},"end":{"line":58,"column":4}},"range":[1217,1219],"raw":"快表"}],"loc":{"start":{"line":58,"column":0},"end":{"line":58,"column":6}},"range":[1215,1221],"raw":"**快表**"},{"type":"Str","value":"：联想寄存器（TLB），是一种访问速度","loc":{"start":{"line":58,"column":6},"end":{"line":58,"column":25}},"range":[1221,1240],"raw":"：联想寄存器（TLB），是一种访问速度"},{"type":"Strong","children":[{"type":"Str","value":"比内存快很多","loc":{"start":{"line":58,"column":27},"end":{"line":58,"column":33}},"range":[1242,1248],"raw":"比内存快很多"}],"loc":{"start":{"line":58,"column":25},"end":{"line":58,"column":35}},"range":[1240,1250],"raw":"**比内存快很多**"},{"type":"Str","value":"的高速缓冲存储器，用来存放当前访问的若干表项，以加速地址变换的额过程。与此对应，内存中的页表常被称为","loc":{"start":{"line":58,"column":35},"end":{"line":58,"column":85}},"range":[1250,1300],"raw":"的高速缓冲存储器，用来存放当前访问的若干表项，以加速地址变换的额过程。与此对应，内存中的页表常被称为"},{"type":"Strong","children":[{"type":"Str","value":"慢表","loc":{"start":{"line":58,"column":87},"end":{"line":58,"column":89}},"range":[1302,1304],"raw":"慢表"}],"loc":{"start":{"line":58,"column":85},"end":{"line":58,"column":91}},"range":[1300,1306],"raw":"**慢表**"},{"type":"Str","value":"。==快表中存放的是页表的一部分副本内容==，","loc":{"start":{"line":58,"column":91},"end":{"line":58,"column":114}},"range":[1306,1329],"raw":"。==快表中存放的是页表的一部分副本内容==，"}],"loc":{"start":{"line":58,"column":0},"end":{"line":58,"column":114}},"range":[1215,1329],"raw":"**快表**：联想寄存器（TLB），是一种访问速度**比内存快很多**的高速缓冲存储器，用来存放当前访问的若干表项，以加速地址变换的额过程。与此对应，内存中的页表常被称为**慢表**。==快表中存放的是页表的一部分副本内容==，"},{"type":"Paragraph","children":[{"type":"Str","value":"在地址转换的过程中，查询页表之前，会先根据页号，尝试在快表中查询，如果命中了，就不会再去页表中查询了。","loc":{"start":{"line":60,"column":0},"end":{"line":60,"column":51}},"range":[1331,1382],"raw":"在地址转换的过程中，查询页表之前，会先根据页号，尝试在快表中查询，如果命中了，就不会再去页表中查询了。"}],"loc":{"start":{"line":60,"column":0},"end":{"line":60,"column":51}},"range":[1331,1382],"raw":"在地址转换的过程中，查询页表之前，会先根据页号，尝试在快表中查询，如果命中了，就不会再去页表中查询了。"},{"type":"Header","depth":3,"children":[{"type":"Str","value":"加入快表后的地址变换过程","loc":{"start":{"line":62,"column":4},"end":{"line":62,"column":16}},"range":[1388,1400],"raw":"加入快表后的地址变换过程"}],"loc":{"start":{"line":62,"column":0},"end":{"line":62,"column":16}},"range":[1384,1400],"raw":"### 加入快表后的地址变换过程"},{"type":"Paragraph","children":[{"type":"Str","value":"① cpυ给出逻辑地址,由某个硬件算得页号、页内偏移量,将页号与快表中的所有页号进行比较","loc":{"start":{"line":64,"column":0},"end":{"line":64,"column":44}},"range":[1402,1446],"raw":"① cpυ给出逻辑地址,由某个硬件算得页号、页内偏移量,将页号与快表中的所有页号进行比较"}],"loc":{"start":{"line":64,"column":0},"end":{"line":64,"column":44}},"range":[1402,1446],"raw":"① cpυ给出逻辑地址,由某个硬件算得页号、页内偏移量,将页号与快表中的所有页号进行比较"},{"type":"Paragraph","children":[{"type":"Str","value":"② 如果找到匹配的页号,说明要访问的页表项在快表中有副本,则直接从中取出该页对应的内存块号,再将内存块号与页内偏移量拼接形成物理地址,最后,访问该物理地址对应的内存单元。因此,若快表命中,则访问某个逻辑地址仅需","loc":{"start":{"line":66,"column":0},"end":{"line":66,"column":105}},"range":[1448,1553],"raw":"② 如果找到匹配的页号,说明要访问的页表项在快表中有副本,则直接从中取出该页对应的内存块号,再将内存块号与页内偏移量拼接形成物理地址,最后,访问该物理地址对应的内存单元。因此,若快表命中,则访问某个逻辑地址仅需"},{"type":"Strong","children":[{"type":"Str","value":"一次访存","loc":{"start":{"line":66,"column":107},"end":{"line":66,"column":111}},"range":[1555,1559],"raw":"一次访存"}],"loc":{"start":{"line":66,"column":105},"end":{"line":66,"column":113}},"range":[1553,1561],"raw":"**一次访存**"},{"type":"Str","value":"即可","loc":{"start":{"line":66,"column":113},"end":{"line":66,"column":115}},"range":[1561,1563],"raw":"即可"}],"loc":{"start":{"line":66,"column":0},"end":{"line":66,"column":115}},"range":[1448,1563],"raw":"② 如果找到匹配的页号,说明要访问的页表项在快表中有副本,则直接从中取出该页对应的内存块号,再将内存块号与页内偏移量拼接形成物理地址,最后,访问该物理地址对应的内存单元。因此,若快表命中,则访问某个逻辑地址仅需**一次访存**即可"},{"type":"Paragraph","children":[{"type":"Str","value":"③ 如果没有找到匹配的页号,则需要访问内存中的页表,找到对应页表项,得到页面存放的内存块号,再将内存块号与页内偏移量拼接形成物理地址,最后,访问该物理地址对应的内存单元。因此,若快表未命中,则","loc":{"start":{"line":68,"column":0},"end":{"line":68,"column":96}},"range":[1565,1661],"raw":"③ 如果没有找到匹配的页号,则需要访问内存中的页表,找到对应页表项,得到页面存放的内存块号,再将内存块号与页内偏移量拼接形成物理地址,最后,访问该物理地址对应的内存单元。因此,若快表未命中,则"},{"type":"Strong","children":[{"type":"Str","value":"访问某个逻辑地址需要两次访存","loc":{"start":{"line":68,"column":98},"end":{"line":68,"column":112}},"range":[1663,1677],"raw":"访问某个逻辑地址需要两次访存"}],"loc":{"start":{"line":68,"column":96},"end":{"line":68,"column":114}},"range":[1661,1679],"raw":"**访问某个逻辑地址需要两次访存**"},{"type":"Str","value":"(注意:在找到页表项后,","loc":{"start":{"line":68,"column":114},"end":{"line":68,"column":126}},"range":[1679,1691],"raw":"(注意:在找到页表项后,"},{"type":"Strong","children":[{"type":"Str","value":"应同时将其存入快表以便后面可能的再次访问","loc":{"start":{"line":68,"column":128},"end":{"line":68,"column":148}},"range":[1693,1713],"raw":"应同时将其存入快表以便后面可能的再次访问"}],"loc":{"start":{"line":68,"column":126},"end":{"line":68,"column":150}},"range":[1691,1715],"raw":"**应同时将其存入快表以便后面可能的再次访问**"},{"type":"Str","value":"。但若快表已满,则必须按照一定的算法对旧的","loc":{"start":{"line":68,"column":150},"end":{"line":68,"column":171}},"range":[1715,1736],"raw":"。但若快表已满,则必须按照一定的算法对旧的"},{"type":"Strong","children":[{"type":"Str","value":"表项进行替换","loc":{"start":{"line":68,"column":173},"end":{"line":68,"column":179}},"range":[1738,1744],"raw":"表项进行替换"}],"loc":{"start":{"line":68,"column":171},"end":{"line":68,"column":181}},"range":[1736,1746],"raw":"**表项进行替换**"},{"type":"Str","value":")。","loc":{"start":{"line":68,"column":181},"end":{"line":68,"column":183}},"range":[1746,1748],"raw":")。"}],"loc":{"start":{"line":68,"column":0},"end":{"line":68,"column":183}},"range":[1565,1748],"raw":"③ 如果没有找到匹配的页号,则需要访问内存中的页表,找到对应页表项,得到页面存放的内存块号,再将内存块号与页内偏移量拼接形成物理地址,最后,访问该物理地址对应的内存单元。因此,若快表未命中,则**访问某个逻辑地址需要两次访存**(注意:在找到页表项后,**应同时将其存入快表以便后面可能的再次访问**。但若快表已满,则必须按照一定的算法对旧的**表项进行替换**)。"},{"type":"HorizontalRule","loc":{"start":{"line":70,"column":0},"end":{"line":70,"column":5}},"range":[1750,1755],"raw":"*****"},{"type":"Header","depth":1,"children":[{"type":"Str","value":"两级分页管理","loc":{"start":{"line":72,"column":2},"end":{"line":72,"column":8}},"range":[1759,1765],"raw":"两级分页管理"}],"loc":{"start":{"line":72,"column":0},"end":{"line":72,"column":8}},"range":[1757,1765],"raw":"# 两级分页管理"},{"type":"Header","depth":2,"children":[{"type":"Str","value":"单级分页管理存在的问题","loc":{"start":{"line":74,"column":3},"end":{"line":74,"column":14}},"range":[1770,1781],"raw":"单级分页管理存在的问题"}],"loc":{"start":{"line":74,"column":0},"end":{"line":74,"column":14}},"range":[1767,1781],"raw":"## 单级分页管理存在的问题"},{"type":"List","ordered":true,"start":1,"spread":false,"children":[{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"需要专门为进程分配 ","loc":{"start":{"line":76,"column":3},"end":{"line":76,"column":13}},"range":[1786,1796],"raw":"需要专门为进程分配 "},{"type":"InlineMath","value":"2^{10}=1024","data":{"hName":"span","hProperties":{"className":["math","math-inline"]},"hChildren":[{"type":"Str","value":"2^{10}=1024"}]},"loc":{"start":{"line":76,"column":13},"end":{"line":76,"column":26}},"range":[1796,1809],"raw":"$2^{10}=1024$"},{"type":"Str","value":" 个","loc":{"start":{"line":76,"column":26},"end":{"line":76,"column":28}},"range":[1809,1811],"raw":" 个"},{"type":"Strong","children":[{"type":"Str","value":"连续的页框","loc":{"start":{"line":76,"column":30},"end":{"line":76,"column":35}},"range":[1813,1818],"raw":"连续的页框"}],"loc":{"start":{"line":76,"column":28},"end":{"line":76,"column":37}},"range":[1811,1820],"raw":"**连续的页框**"},{"type":"Str","value":"来存放它们的页表；","loc":{"start":{"line":76,"column":37},"end":{"line":76,"column":46}},"range":[1820,1829],"raw":"来存放它们的页表；"}],"loc":{"start":{"line":76,"column":3},"end":{"line":76,"column":46}},"range":[1786,1829],"raw":"需要专门为进程分配 $2^{10}=1024$ 个**连续的页框**来存放它们的页表；"}],"loc":{"start":{"line":76,"column":0},"end":{"line":76,"column":46}},"range":[1783,1829],"raw":"1. 需要专门为进程分配 $2^{10}=1024$ 个**连续的页框**来存放它们的页表；"},{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"整个页表都需要常驻内存，但是进程可能再一段时间内只访问某几个特定的页面","loc":{"start":{"line":77,"column":3},"end":{"line":77,"column":38}},"range":[1833,1868],"raw":"整个页表都需要常驻内存，但是进程可能再一段时间内只访问某几个特定的页面"}],"loc":{"start":{"line":77,"column":3},"end":{"line":77,"column":38}},"range":[1833,1868],"raw":"整个页表都需要常驻内存，但是进程可能再一段时间内只访问某几个特定的页面"}],"loc":{"start":{"line":77,"column":0},"end":{"line":77,"column":38}},"range":[1830,1868],"raw":"2. 整个页表都需要常驻内存，但是进程可能再一段时间内只访问某几个特定的页面"}],"loc":{"start":{"line":76,"column":0},"end":{"line":77,"column":38}},"range":[1783,1868],"raw":"1. 需要专门为进程分配 $2^{10}=1024$ 个**连续的页框**来存放它们的页表；\n2. 整个页表都需要常驻内存，但是进程可能再一段时间内只访问某几个特定的页面"},{"type":"Header","depth":2,"children":[{"type":"Str","value":"两级分页","loc":{"start":{"line":79,"column":3},"end":{"line":79,"column":7}},"range":[1873,1877],"raw":"两级分页"}],"loc":{"start":{"line":79,"column":0},"end":{"line":79,"column":7}},"range":[1870,1877],"raw":"## 两级分页"},{"type":"List","ordered":false,"start":null,"spread":true,"children":[{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"将单级分页管理中规模庞大的页表进行分组，使每个内存块刚好可以放入一个人族，分组的大小为4KB。每个页表项4B，每个页面可以存放1K个页表项，因此每1K个连续的页表项为一组，刚好占一个内存块。","loc":{"start":{"line":81,"column":2},"end":{"line":81,"column":97}},"range":[1881,1976],"raw":"将单级分页管理中规模庞大的页表进行分组，使每个内存块刚好可以放入一个人族，分组的大小为4KB。每个页表项4B，每个页面可以存放1K个页表项，因此每1K个连续的页表项为一组，刚好占一个内存块。"}],"loc":{"start":{"line":81,"column":2},"end":{"line":81,"column":97}},"range":[1881,1976],"raw":"将单级分页管理中规模庞大的页表进行分组，使每个内存块刚好可以放入一个人族，分组的大小为4KB。每个页表项4B，每个页面可以存放1K个页表项，因此每1K个连续的页表项为一组，刚好占一个内存块。"}],"loc":{"start":{"line":81,"column":0},"end":{"line":81,"column":97}},"range":[1879,1976],"raw":"- 将单级分页管理中规模庞大的页表进行分组，使每个内存块刚好可以放入一个人族，分组的大小为4KB。每个页表项4B，每个页面可以存放1K个页表项，因此每1K个连续的页表项为一组，刚好占一个内存块。"},{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"为离散分配的页表再建立一张页表，称为","loc":{"start":{"line":83,"column":2},"end":{"line":83,"column":20}},"range":[1980,1998],"raw":"为离散分配的页表再建立一张页表，称为"},{"type":"Strong","children":[{"type":"Str","value":"页目录表","loc":{"start":{"line":83,"column":22},"end":{"line":83,"column":26}},"range":[2000,2004],"raw":"页目录表"}],"loc":{"start":{"line":83,"column":20},"end":{"line":83,"column":28}},"range":[1998,2006],"raw":"**页目录表**"},{"type":"Str","value":"，或者称为外层页表、顶层页表。","loc":{"start":{"line":83,"column":28},"end":{"line":83,"column":43}},"range":[2006,2021],"raw":"，或者称为外层页表、顶层页表。"}],"loc":{"start":{"line":83,"column":2},"end":{"line":83,"column":43}},"range":[1980,2021],"raw":"为离散分配的页表再建立一张页表，称为**页目录表**，或者称为外层页表、顶层页表。"}],"loc":{"start":{"line":83,"column":0},"end":{"line":83,"column":43}},"range":[1978,2021],"raw":"- 为离散分配的页表再建立一张页表，称为**页目录表**，或者称为外层页表、顶层页表。"}],"loc":{"start":{"line":81,"column":0},"end":{"line":83,"column":43}},"range":[1879,2021],"raw":"- 将单级分页管理中规模庞大的页表进行分组，使每个内存块刚好可以放入一个人族，分组的大小为4KB。每个页表项4B，每个页面可以存放1K个页表项，因此每1K个连续的页表项为一组，刚好占一个内存块。\n\n- 为离散分配的页表再建立一张页表，称为**页目录表**，或者称为外层页表、顶层页表。"},{"type":"Header","depth":4,"children":[{"type":"Str","value":"两级分页管理中逻辑地址的结构","loc":{"start":{"line":85,"column":5},"end":{"line":85,"column":19}},"range":[2028,2042],"raw":"两级分页管理中逻辑地址的结构"}],"loc":{"start":{"line":85,"column":0},"end":{"line":85,"column":19}},"range":[2023,2042],"raw":"#### 两级分页管理中逻辑地址的结构"},{"type":"Table","align":[null,null,null],"children":[{"type":"TableRow","children":[{"type":"TableCell","children":[{"type":"Str","value":"31 ... 22","loc":{"start":{"line":87,"column":2},"end":{"line":87,"column":11}},"range":[2046,2055],"raw":"31 ... 22"}],"loc":{"start":{"line":87,"column":0},"end":{"line":87,"column":13}},"range":[2044,2057],"raw":"| 31 ... 22 |"},{"type":"TableCell","children":[{"type":"Str","value":"21 ... 12","loc":{"start":{"line":87,"column":14},"end":{"line":87,"column":23}},"range":[2058,2067],"raw":"21 ... 12"}],"loc":{"start":{"line":87,"column":13},"end":{"line":87,"column":25}},"range":[2057,2069],"raw":" 21 ... 12 |"},{"type":"TableCell","children":[{"type":"Str","value":"11 ... 0","loc":{"start":{"line":87,"column":26},"end":{"line":87,"column":34}},"range":[2070,2078],"raw":"11 ... 0"}],"loc":{"start":{"line":87,"column":25},"end":{"line":87,"column":38}},"range":[2069,2082],"raw":" 11 ... 0   |"}],"loc":{"start":{"line":87,"column":0},"end":{"line":87,"column":38}},"range":[2044,2082],"raw":"| 31 ... 22 | 21 ... 12 | 11 ... 0   |"},{"type":"TableRow","children":[{"type":"TableCell","children":[{"type":"Str","value":"一级页号","loc":{"start":{"line":89,"column":2},"end":{"line":89,"column":6}},"range":[2124,2128],"raw":"一级页号"}],"loc":{"start":{"line":89,"column":0},"end":{"line":89,"column":9}},"range":[2122,2131],"raw":"| 一级页号  |"},{"type":"TableCell","children":[{"type":"Str","value":"二级页号","loc":{"start":{"line":89,"column":10},"end":{"line":89,"column":14}},"range":[2132,2136],"raw":"二级页号"}],"loc":{"start":{"line":89,"column":9},"end":{"line":89,"column":17}},"range":[2131,2139],"raw":" 二级页号  |"},{"type":"TableCell","children":[{"type":"Str","value":"页内偏移量","loc":{"start":{"line":89,"column":18},"end":{"line":89,"column":23}},"range":[2140,2145],"raw":"页内偏移量"}],"loc":{"start":{"line":89,"column":17},"end":{"line":89,"column":25}},"range":[2139,2147],"raw":" 页内偏移量 |"}],"loc":{"start":{"line":89,"column":0},"end":{"line":89,"column":25}},"range":[2122,2147],"raw":"| 一级页号  | 二级页号  | 页内偏移量 |"}],"loc":{"start":{"line":87,"column":0},"end":{"line":89,"column":25}},"range":[2044,2147],"raw":"| 31 ... 22 | 21 ... 12 | 11 ... 0   |\n| --------- | --------- | ---------- |\n| 一级页号  | 二级页号  | 页内偏移量 |"},{"type":"Paragraph","children":[{"type":"InlineMath","value":"一级页号 = [逻辑地址 / 4096^{2}]","data":{"hName":"span","hProperties":{"className":["math","math-inline"]},"hChildren":[{"type":"Str","value":"一级页号 = [逻辑地址 / 4096^{2}]"}]},"loc":{"start":{"line":91,"column":1},"end":{"line":91,"column":27}},"range":[2150,2176],"raw":"$一级页号 = [逻辑地址 / 4096^{2}]$"}],"loc":{"start":{"line":91,"column":1},"end":{"line":91,"column":28}},"range":[2150,2177],"raw":"$一级页号 = [逻辑地址 / 4096^{2}]$ "},{"type":"Paragraph","children":[{"type":"InlineMath","value":"二级页号 = [逻辑地址/4096] - 一级页号*4096","data":{"hName":"span","hProperties":{"className":["math","math-inline"]},"hChildren":[{"type":"Str","value":"二级页号 = [逻辑地址/4096] - 一级页号*4096"}]},"loc":{"start":{"line":93,"column":1},"end":{"line":93,"column":33}},"range":[2180,2212],"raw":"$二级页号 = [逻辑地址/4096] - 一级页号*4096$"}],"loc":{"start":{"line":93,"column":1},"end":{"line":93,"column":34}},"range":[2180,2213],"raw":"$二级页号 = [逻辑地址/4096] - 一级页号*4096$ "},{"type":"Paragraph","children":[{"type":"InlineMath","value":"业内偏移量 = 逻辑地址 \\% 4096","data":{"hName":"span","hProperties":{"className":["math","math-inline"]},"hChildren":[{"type":"Str","value":"业内偏移量 = 逻辑地址 \\% 4096"}]},"loc":{"start":{"line":95,"column":1},"end":{"line":95,"column":23}},"range":[2216,2238],"raw":"$业内偏移量 = 逻辑地址 \\% 4096$"}],"loc":{"start":{"line":95,"column":1},"end":{"line":95,"column":24}},"range":[2216,2239],"raw":"$业内偏移量 = 逻辑地址 \\% 4096$ "}],"loc":{"start":{"line":1,"column":0},"end":{"line":97,"column":0}},"range":[0,2241],"raw":"---\ntitle: '内存分页管理'\ntags: ['操作系统','分页','内存']\n---\n# 分页管理\n\n# 单级分页管理\n\n基本分页存储管理的思想：把内存分为一个个相等的小**分区**，再按照分页大小把进程拆分成一个个小部分。\n\n>  分区：又叫页框、页帧、内存块、物理块\n>\n>  页框号：每一个页框的编号，又叫内存块号、页帧号、物理块号，从0开始\n>\n>  页面：将用户进程的地址空间分为与页面大小相同的一个个区域，称为“页”或者“页面”\n>\n>  页号：每个页面都有一个编号，即“页号”，页号和页框号一样从0开始。\n>\n>  ***页框不能设置太大，页框太大会产生较多的内部碎片***\n\n## 地址转换\n\n如果一个操作系统采用分页的管理内存，如果想要通过逻辑地址得到其物理地址：\n\n1. 算出逻辑地址对应的页号\n2. 要知道页号对应的页面在内存中的起始地址（操作系统会保存）\n3. 算出逻辑地址在页面中的偏移量\n4. 物理地址 = 页面起始地址 + 偏移量\n\n> 如果每个页面的大小为 $2^{k}B$ ，用二进制表示其逻辑地址，其末尾的k位即为其页内偏移量，前面的其余部分就是分页的页号。\n\n为了能知道每个页面在内存中存放的位置，操作系统要为**每个进程建立一个页表**，页表中的页表项由页号和块号组成，页表负责记录进程页面和时机存放的内存块之间的对应关系。\n\n值得注意的是，页表中的页号是隐含在页表项的偏移量中的（相当于将页号隐含在数组的下标中）。\n\n## 基本地址变换机构\n\n用于实现**逻辑地址到物理地址**转换的一组**硬件机构**。 \n\n基本地址变换机构借助进程页表将逻辑地址转换为物理地址：基本地址变换机构可以借助进程的页表将逻辑地址转换为物理地址通常会在系统中设置一个**页表寄存器(PTR)**,存放页表在内存中的起始地址F和页表长度M。\n进程未执行时,页表的始址和页表长度放在进程控制块(PCB)中,当进程被调度时,操作系统内核会把它们放到页表寄存器中。\n\n- 根据逻辑地址计算出页号、页内偏移量\n- 检查页号是否越界，不合法的时候会出现**越界中断**\n- 如果页号合法，查询页表，找到页号对应的页表项（ $页表项地址=页表起始地址+页号*页表项长度$ ），确定页面存放的内存块号\n- 用内存块号和页内偏移量得到物理地址\n\n## 具有快表的地址变换机构\n\n> **局部性原理**\n>\n> **时间局部性**：如果执行了程序中的某条指令，那么不久后这条指令有可能再被执行，如果某个数据被访问过，不久之后很有可能被再次访问。\n>\n> **空间局部性**：一旦程序访问了某个存储单元，不久之后，其附近的存储单元也很有可能被访问。（很多数据再内存中是连续存放的）。\n\n在基本地址变换机构中，每次要访问一个逻辑地址，都需要查询内存中的页表，由局部性原理，**可能连续很多查到的都是同一个页表项**。\n\n**快表**：联想寄存器（TLB），是一种访问速度**比内存快很多**的高速缓冲存储器，用来存放当前访问的若干表项，以加速地址变换的额过程。与此对应，内存中的页表常被称为**慢表**。==快表中存放的是页表的一部分副本内容==，\n\n在地址转换的过程中，查询页表之前，会先根据页号，尝试在快表中查询，如果命中了，就不会再去页表中查询了。\n\n### 加入快表后的地址变换过程\n\n① cpυ给出逻辑地址,由某个硬件算得页号、页内偏移量,将页号与快表中的所有页号进行比较\n\n② 如果找到匹配的页号,说明要访问的页表项在快表中有副本,则直接从中取出该页对应的内存块号,再将内存块号与页内偏移量拼接形成物理地址,最后,访问该物理地址对应的内存单元。因此,若快表命中,则访问某个逻辑地址仅需**一次访存**即可\n\n③ 如果没有找到匹配的页号,则需要访问内存中的页表,找到对应页表项,得到页面存放的内存块号,再将内存块号与页内偏移量拼接形成物理地址,最后,访问该物理地址对应的内存单元。因此,若快表未命中,则**访问某个逻辑地址需要两次访存**(注意:在找到页表项后,**应同时将其存入快表以便后面可能的再次访问**。但若快表已满,则必须按照一定的算法对旧的**表项进行替换**)。\n\n*****\n\n# 两级分页管理\n\n## 单级分页管理存在的问题\n\n1. 需要专门为进程分配 $2^{10}=1024$ 个**连续的页框**来存放它们的页表；\n2. 整个页表都需要常驻内存，但是进程可能再一段时间内只访问某几个特定的页面\n\n## 两级分页\n\n- 将单级分页管理中规模庞大的页表进行分组，使每个内存块刚好可以放入一个人族，分组的大小为4KB。每个页表项4B，每个页面可以存放1K个页表项，因此每1K个连续的页表项为一组，刚好占一个内存块。\n\n- 为离散分配的页表再建立一张页表，称为**页目录表**，或者称为外层页表、顶层页表。\n\n#### 两级分页管理中逻辑地址的结构\n\n| 31 ... 22 | 21 ... 12 | 11 ... 0   |\n| --------- | --------- | ---------- |\n| 一级页号  | 二级页号  | 页内偏移量 |\n\n $一级页号 = [逻辑地址 / 4096^{2}]$ \n\n $二级页号 = [逻辑地址/4096] - 一级页号*4096$ \n\n $业内偏移量 = 逻辑地址 \\% 4096$ \n\n"},"catalogue":{"title":"内存分页管理","json-path":"操作系统/2020-08-16-基本存储分页管理的基本概念.json","mdate":"2020-08-16","cover":"https://i.328888.xyz/2022/12/31/nd2oZ.jpeg","icon":"🐿","visible":true,"tags":["操作系统","分页","内存"]}}