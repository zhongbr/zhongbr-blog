{"ast":{"type":"Document","children":[{"type":"Yaml","value":"title: '调度算法'\ntags: ['操作系统','进程']","loc":{"start":{"line":1,"column":0},"end":{"line":4,"column":3}},"range":[0,41],"raw":"---\ntitle: '调度算法'\ntags: ['操作系统','进程']\n---","visible":false},{"type":"Header","depth":1,"children":[{"type":"Str","value":"调度算法","loc":{"start":{"line":5,"column":2},"end":{"line":5,"column":6}},"range":[44,48],"raw":"调度算法"}],"loc":{"start":{"line":5,"column":0},"end":{"line":5,"column":6}},"range":[42,48],"raw":"# 调度算法"},{"type":"Header","depth":2,"children":[{"type":"Str","value":"调度算法好坏的评价指标","loc":{"start":{"line":7,"column":3},"end":{"line":7,"column":14}},"range":[53,64],"raw":"调度算法好坏的评价指标"}],"loc":{"start":{"line":7,"column":0},"end":{"line":7,"column":14}},"range":[50,64],"raw":"## 调度算法好坏的评价指标"},{"type":"Header","depth":3,"children":[{"type":"Str","value":"CPU利用率","loc":{"start":{"line":9,"column":4},"end":{"line":9,"column":10}},"range":[70,76],"raw":"CPU利用率"}],"loc":{"start":{"line":9,"column":0},"end":{"line":9,"column":10}},"range":[66,76],"raw":"### CPU利用率"},{"type":"Paragraph","children":[{"type":"Str","value":"CPU的造价极其昂贵，因此人们会希望让CPU尽可能工作。","loc":{"start":{"line":11,"column":0},"end":{"line":11,"column":28}},"range":[78,106],"raw":"CPU的造价极其昂贵，因此人们会希望让CPU尽可能工作。"}],"loc":{"start":{"line":11,"column":0},"end":{"line":11,"column":28}},"range":[78,106],"raw":"CPU的造价极其昂贵，因此人们会希望让CPU尽可能工作。"},{"type":"Paragraph","children":[{"type":"Str","value":"CPU利用率：指CPU“忙碌”的时间站总时间的比例","loc":{"start":{"line":13,"column":0},"end":{"line":13,"column":25}},"range":[108,133],"raw":"CPU利用率：指CPU“忙碌”的时间站总时间的比例"}],"loc":{"start":{"line":13,"column":0},"end":{"line":13,"column":25}},"range":[108,133],"raw":"CPU利用率：指CPU“忙碌”的时间站总时间的比例"},{"type":"Paragraph","children":[{"type":"InlineMath","value":"利用率=\\frac{忙碌的时间}{总时间}","data":{"hName":"span","hProperties":{"className":["math","math-inline"]},"hChildren":[{"type":"Str","value":"利用率=\\frac{忙碌的时间}{总时间}"}]},"loc":{"start":{"line":15,"column":1},"end":{"line":15,"column":24}},"range":[136,159],"raw":"$利用率=\\frac{忙碌的时间}{总时间}$"}],"loc":{"start":{"line":15,"column":1},"end":{"line":15,"column":25}},"range":[136,160],"raw":"$利用率=\\frac{忙碌的时间}{总时间}$ "},{"type":"Header","depth":4,"children":[{"type":"Str","value":"甘特图","loc":{"start":{"line":17,"column":5},"end":{"line":17,"column":8}},"range":[167,170],"raw":"甘特图"}],"loc":{"start":{"line":17,"column":0},"end":{"line":17,"column":8}},"range":[162,170],"raw":"#### 甘特图"},{"type":"Paragraph","children":[{"type":"Str","value":"用于求多道程序并发执行的情况下的CPU利用率","loc":{"start":{"line":19,"column":0},"end":{"line":19,"column":22}},"range":[172,194],"raw":"用于求多道程序并发执行的情况下的CPU利用率"}],"loc":{"start":{"line":19,"column":0},"end":{"line":19,"column":22}},"range":[172,194],"raw":"用于求多道程序并发执行的情况下的CPU利用率"},{"type":"Header","depth":3,"children":[{"type":"Str","value":"系统吞吐量","loc":{"start":{"line":21,"column":4},"end":{"line":21,"column":9}},"range":[200,205],"raw":"系统吞吐量"}],"loc":{"start":{"line":21,"column":0},"end":{"line":21,"column":9}},"range":[196,205],"raw":"### 系统吞吐量"},{"type":"Paragraph","children":[{"type":"Str","value":"系统吞吐量：单位时间内完成作业的数量","loc":{"start":{"line":23,"column":0},"end":{"line":23,"column":18}},"range":[207,225],"raw":"系统吞吐量：单位时间内完成作业的数量"}],"loc":{"start":{"line":23,"column":0},"end":{"line":23,"column":18}},"range":[207,225],"raw":"系统吞吐量：单位时间内完成作业的数量"},{"type":"Paragraph","children":[{"type":"InlineMath","value":"系统吞吐量=\\frac{总共完成了多少道作业}{总共花了多少时间}","data":{"hName":"span","hProperties":{"className":["math","math-inline"]},"hChildren":[{"type":"Str","value":"系统吞吐量=\\frac{总共完成了多少道作业}{总共花了多少时间}"}]},"loc":{"start":{"line":25,"column":1},"end":{"line":25,"column":36}},"range":[228,263],"raw":"$系统吞吐量=\\frac{总共完成了多少道作业}{总共花了多少时间}$"}],"loc":{"start":{"line":25,"column":1},"end":{"line":25,"column":37}},"range":[228,264],"raw":"$系统吞吐量=\\frac{总共完成了多少道作业}{总共花了多少时间}$ "},{"type":"Header","depth":3,"children":[{"type":"Str","value":"周转时间","loc":{"start":{"line":27,"column":4},"end":{"line":27,"column":8}},"range":[270,274],"raw":"周转时间"}],"loc":{"start":{"line":27,"column":0},"end":{"line":27,"column":8}},"range":[266,274],"raw":"### 周转时间"},{"type":"Paragraph","children":[{"type":"Str","value":"周转时间：从作业","loc":{"start":{"line":29,"column":0},"end":{"line":29,"column":8}},"range":[276,284],"raw":"周转时间：从作业"},{"type":"Strong","children":[{"type":"Str","value":"提交给系统","loc":{"start":{"line":29,"column":10},"end":{"line":29,"column":15}},"range":[286,291],"raw":"提交给系统"}],"loc":{"start":{"line":29,"column":8},"end":{"line":29,"column":17}},"range":[284,293],"raw":"**提交给系统**"},{"type":"Str","value":"开始到","loc":{"start":{"line":29,"column":17},"end":{"line":29,"column":20}},"range":[293,296],"raw":"开始到"},{"type":"Strong","children":[{"type":"Str","value":"作业完成","loc":{"start":{"line":29,"column":22},"end":{"line":29,"column":26}},"range":[298,302],"raw":"作业完成"}],"loc":{"start":{"line":29,"column":20},"end":{"line":29,"column":28}},"range":[296,304],"raw":"**作业完成**"},{"type":"Str","value":"，总共花费的时间。","loc":{"start":{"line":29,"column":28},"end":{"line":29,"column":37}},"range":[304,313],"raw":"，总共花费的时间。"}],"loc":{"start":{"line":29,"column":0},"end":{"line":29,"column":37}},"range":[276,313],"raw":"周转时间：从作业**提交给系统**开始到**作业完成**，总共花费的时间。"},{"type":"Paragraph","children":[{"type":"Str","value":"周转时间包括：","loc":{"start":{"line":31,"column":0},"end":{"line":31,"column":7}},"range":[315,322],"raw":"周转时间包括："}],"loc":{"start":{"line":31,"column":0},"end":{"line":31,"column":7}},"range":[315,322],"raw":"周转时间包括："},{"type":"List","ordered":false,"start":null,"spread":false,"children":[{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"作业在外存上等待作业调度（高级调度）的时间","loc":{"start":{"line":33,"column":2},"end":{"line":33,"column":23}},"range":[326,347],"raw":"作业在外存上等待作业调度（高级调度）的时间"}],"loc":{"start":{"line":33,"column":2},"end":{"line":33,"column":23}},"range":[326,347],"raw":"作业在外存上等待作业调度（高级调度）的时间"}],"loc":{"start":{"line":33,"column":0},"end":{"line":33,"column":23}},"range":[324,347],"raw":"- 作业在外存上等待作业调度（高级调度）的时间"},{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"进程在就绪队列上等待进程调度的时间（可能发生多次）","loc":{"start":{"line":34,"column":2},"end":{"line":34,"column":27}},"range":[350,375],"raw":"进程在就绪队列上等待进程调度的时间（可能发生多次）"}],"loc":{"start":{"line":34,"column":2},"end":{"line":34,"column":27}},"range":[350,375],"raw":"进程在就绪队列上等待进程调度的时间（可能发生多次）"}],"loc":{"start":{"line":34,"column":0},"end":{"line":34,"column":27}},"range":[348,375],"raw":"- 进程在就绪队列上等待进程调度的时间（可能发生多次）"},{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"进程在CPU上执行的时间（可能发生多次）","loc":{"start":{"line":35,"column":2},"end":{"line":35,"column":22}},"range":[378,398],"raw":"进程在CPU上执行的时间（可能发生多次）"}],"loc":{"start":{"line":35,"column":2},"end":{"line":35,"column":22}},"range":[378,398],"raw":"进程在CPU上执行的时间（可能发生多次）"}],"loc":{"start":{"line":35,"column":0},"end":{"line":35,"column":22}},"range":[376,398],"raw":"- 进程在CPU上执行的时间（可能发生多次）"},{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"进程等待I/O操作完成的时间（可能发生多次）","loc":{"start":{"line":36,"column":2},"end":{"line":36,"column":24}},"range":[401,423],"raw":"进程等待I/O操作完成的时间（可能发生多次）"}],"loc":{"start":{"line":36,"column":2},"end":{"line":36,"column":24}},"range":[401,423],"raw":"进程等待I/O操作完成的时间（可能发生多次）"}],"loc":{"start":{"line":36,"column":0},"end":{"line":36,"column":24}},"range":[399,423],"raw":"- 进程等待I/O操作完成的时间（可能发生多次）"}],"loc":{"start":{"line":33,"column":0},"end":{"line":36,"column":24}},"range":[324,423],"raw":"- 作业在外存上等待作业调度（高级调度）的时间\n- 进程在就绪队列上等待进程调度的时间（可能发生多次）\n- 进程在CPU上执行的时间（可能发生多次）\n- 进程等待I/O操作完成的时间（可能发生多次）"},{"type":"Paragraph","children":[{"type":"Str","value":"作业的周转时间 = 作业完成的时间 - 作业提交的时间","loc":{"start":{"line":38,"column":0},"end":{"line":38,"column":27}},"range":[425,452],"raw":"作业的周转时间 = 作业完成的时间 - 作业提交的时间"}],"loc":{"start":{"line":38,"column":0},"end":{"line":38,"column":27}},"range":[425,452],"raw":"作业的周转时间 = 作业完成的时间 - 作业提交的时间"},{"type":"Paragraph","children":[{"type":"InlineMath","value":"平均周转时间 = \\frac{各作业周转时间之和}{作业数}","data":{"hName":"span","hProperties":{"className":["math","math-inline"]},"hChildren":[{"type":"Str","value":"平均周转时间 = \\frac{各作业周转时间之和}{作业数}"}]},"loc":{"start":{"line":40,"column":1},"end":{"line":40,"column":33}},"range":[455,487],"raw":"$平均周转时间 = \\frac{各作业周转时间之和}{作业数}$"}],"loc":{"start":{"line":40,"column":1},"end":{"line":40,"column":34}},"range":[455,488],"raw":"$平均周转时间 = \\frac{各作业周转时间之和}{作业数}$ "},{"type":"Paragraph","children":[{"type":"InlineMath","value":"带权周转时间=\\frac{作业周转时间}{作业实际运行时间}=\\frac{作业完成时间-作业提交时间}{作业实际运行时间}","data":{"hName":"span","hProperties":{"className":["math","math-inline"]},"hChildren":[{"type":"Str","value":"带权周转时间=\\frac{作业周转时间}{作业实际运行时间}=\\frac{作业完成时间-作业提交时间}{作业实际运行时间}"}]},"loc":{"start":{"line":42,"column":1},"end":{"line":42,"column":64}},"range":[491,554],"raw":"$带权周转时间=\\frac{作业周转时间}{作业实际运行时间}=\\frac{作业完成时间-作业提交时间}{作业实际运行时间}$"}],"loc":{"start":{"line":42,"column":1},"end":{"line":42,"column":65}},"range":[491,555],"raw":"$带权周转时间=\\frac{作业周转时间}{作业实际运行时间}=\\frac{作业完成时间-作业提交时间}{作业实际运行时间}$ "},{"type":"Header","depth":3,"children":[{"type":"Str","value":"等待时间","loc":{"start":{"line":44,"column":4},"end":{"line":44,"column":8}},"range":[561,565],"raw":"等待时间"}],"loc":{"start":{"line":44,"column":0},"end":{"line":44,"column":8}},"range":[557,565],"raw":"### 等待时间"},{"type":"Paragraph","children":[{"type":"Str","value":"等待时间：指进程/作业处于等待处理机状态时间之和，等待时间越长，用户满意度越低","loc":{"start":{"line":46,"column":0},"end":{"line":46,"column":39}},"range":[567,606],"raw":"等待时间：指进程/作业处于等待处理机状态时间之和，等待时间越长，用户满意度越低"}],"loc":{"start":{"line":46,"column":0},"end":{"line":46,"column":39}},"range":[567,606],"raw":"等待时间：指进程/作业处于等待处理机状态时间之和，等待时间越长，用户满意度越低"},{"type":"Paragraph","children":[{"type":"Str","value":"对于进程来说，等待时间就是进程建立以后等待被服务的时间之和，在等待I/O完成期间其实进程也是在被服务的，不计入等待时间。","loc":{"start":{"line":48,"column":0},"end":{"line":48,"column":60}},"range":[608,668],"raw":"对于进程来说，等待时间就是进程建立以后等待被服务的时间之和，在等待I/O完成期间其实进程也是在被服务的，不计入等待时间。"}],"loc":{"start":{"line":48,"column":0},"end":{"line":48,"column":60}},"range":[608,668],"raw":"对于进程来说，等待时间就是进程建立以后等待被服务的时间之和，在等待I/O完成期间其实进程也是在被服务的，不计入等待时间。"},{"type":"Paragraph","children":[{"type":"Str","value":"对于作业来说，等待时间还要考虑建立进程之后的等待时间，还要加上作业在外存后背队列中等待的时间。","loc":{"start":{"line":50,"column":0},"end":{"line":50,"column":47}},"range":[670,717],"raw":"对于作业来说，等待时间还要考虑建立进程之后的等待时间，还要加上作业在外存后背队列中等待的时间。"}],"loc":{"start":{"line":50,"column":0},"end":{"line":50,"column":47}},"range":[670,717],"raw":"对于作业来说，等待时间还要考虑建立进程之后的等待时间，还要加上作业在外存后背队列中等待的时间。"},{"type":"Paragraph","children":[{"type":"InlineMath","value":"平均等待时间=\\frac{所有作业的总等待时间}{作业的数量}","data":{"hName":"span","hProperties":{"className":["math","math-inline"]},"hChildren":[{"type":"Str","value":"平均等待时间=\\frac{所有作业的总等待时间}{作业的数量}"}]},"loc":{"start":{"line":52,"column":1},"end":{"line":52,"column":34}},"range":[720,753],"raw":"$平均等待时间=\\frac{所有作业的总等待时间}{作业的数量}$"},{"type":"Str","value":" ，可以用于评价整体性能。","loc":{"start":{"line":52,"column":34},"end":{"line":52,"column":47}},"range":[753,766],"raw":" ，可以用于评价整体性能。"}],"loc":{"start":{"line":52,"column":1},"end":{"line":52,"column":47}},"range":[720,766],"raw":"$平均等待时间=\\frac{所有作业的总等待时间}{作业的数量}$ ，可以用于评价整体性能。"},{"type":"Header","depth":3,"children":[{"type":"Str","value":"响应时间","loc":{"start":{"line":54,"column":4},"end":{"line":54,"column":8}},"range":[772,776],"raw":"响应时间"}],"loc":{"start":{"line":54,"column":0},"end":{"line":54,"column":8}},"range":[768,776],"raw":"### 响应时间"},{"type":"Paragraph","children":[{"type":"Str","value":"响应时间：用户从提交请求到首次产生响应所用的时间","loc":{"start":{"line":56,"column":0},"end":{"line":56,"column":24}},"range":[778,802],"raw":"响应时间：用户从提交请求到首次产生响应所用的时间"}],"loc":{"start":{"line":56,"column":0},"end":{"line":56,"column":24}},"range":[778,802],"raw":"响应时间：用户从提交请求到首次产生响应所用的时间"},{"type":"HorizontalRule","loc":{"start":{"line":60,"column":0},"end":{"line":60,"column":5}},"range":[806,811],"raw":"*****"},{"type":"Header","depth":2,"children":[{"type":"Str","value":"调度算法","loc":{"start":{"line":62,"column":3},"end":{"line":62,"column":7}},"range":[816,820],"raw":"调度算法"}],"loc":{"start":{"line":62,"column":0},"end":{"line":62,"column":7}},"range":[813,820],"raw":"## 调度算法"},{"type":"Header","depth":3,"children":[{"type":"Str","value":"先来先服务、短作业优先和高响应比优先算法","loc":{"start":{"line":64,"column":4},"end":{"line":64,"column":24}},"range":[826,846],"raw":"先来先服务、短作业优先和高响应比优先算法"}],"loc":{"start":{"line":64,"column":0},"end":{"line":64,"column":24}},"range":[822,846],"raw":"### 先来先服务、短作业优先和高响应比优先算法"},{"type":"Table","align":["center",null,null,null,null,null,null],"children":[{"type":"TableRow","children":[{"type":"TableCell","children":[{"type":"Str","value":"算法","loc":{"start":{"line":66,"column":25},"end":{"line":66,"column":27}},"range":[873,875],"raw":"算法"}],"loc":{"start":{"line":66,"column":0},"end":{"line":66,"column":53}},"range":[848,901],"raw":"|                        算法                         |"},{"type":"TableCell","children":[{"type":"Str","value":"规则","loc":{"start":{"line":66,"column":54},"end":{"line":66,"column":56}},"range":[902,904],"raw":"规则"}],"loc":{"start":{"line":66,"column":53},"end":{"line":66,"column":87}},"range":[901,935],"raw":" 规则                              |"},{"type":"TableCell","children":[{"type":"Str","value":"可用于作业/进程调度","loc":{"start":{"line":66,"column":88},"end":{"line":66,"column":98}},"range":[936,946],"raw":"可用于作业/进程调度"}],"loc":{"start":{"line":66,"column":87},"end":{"line":66,"column":136}},"range":[935,984],"raw":" 可用于作业/进程调度                                     |"},{"type":"TableCell","children":[{"type":"Str","value":"抢占","loc":{"start":{"line":66,"column":137},"end":{"line":66,"column":139}},"range":[985,987],"raw":"抢占"}],"loc":{"start":{"line":66,"column":136},"end":{"line":66,"column":197}},"range":[984,1045],"raw":" 抢占                                                         |"},{"type":"TableCell","children":[{"type":"Str","value":"优点","loc":{"start":{"line":66,"column":198},"end":{"line":66,"column":200}},"range":[1046,1048],"raw":"优点"}],"loc":{"start":{"line":66,"column":197},"end":{"line":66,"column":232}},"range":[1045,1080],"raw":" 优点                               |"},{"type":"TableCell","children":[{"type":"Str","value":"缺点","loc":{"start":{"line":66,"column":233},"end":{"line":66,"column":235}},"range":[1081,1083],"raw":"缺点"}],"loc":{"start":{"line":66,"column":232},"end":{"line":66,"column":293}},"range":[1080,1141],"raw":" 缺点                                                         |"},{"type":"TableCell","children":[{"type":"Str","value":"饥饿","loc":{"start":{"line":66,"column":294},"end":{"line":66,"column":296}},"range":[1142,1144],"raw":"饥饿"}],"loc":{"start":{"line":66,"column":293},"end":{"line":66,"column":348}},"range":[1141,1196],"raw":" 饥饿                                                   |"}],"loc":{"start":{"line":66,"column":0},"end":{"line":66,"column":348}},"range":[848,1196],"raw":"|                        算法                         | 规则                              | 可用于作业/进程调度                                     | 抢占                                                         | 优点                               | 缺点                                                         | 饥饿                                                   |"},{"type":"TableRow","children":[{"type":"TableCell","children":[{"type":"Str","value":"先来先服务(First Come First Serve, FCFS)","loc":{"start":{"line":68,"column":7},"end":{"line":68,"column":42}},"range":[1574,1609],"raw":"先来先服务(First Come First Serve, FCFS)"}],"loc":{"start":{"line":68,"column":0},"end":{"line":68,"column":50}},"range":[1567,1617],"raw":"|      先来先服务(First Come First Serve, FCFS)       |"},{"type":"TableCell","children":[{"type":"Str","value":"按照作业/进程的到达顺序进行服务","loc":{"start":{"line":68,"column":51},"end":{"line":68,"column":67}},"range":[1618,1634],"raw":"按照作业/进程的到达顺序进行服务"}],"loc":{"start":{"line":68,"column":50},"end":{"line":68,"column":71}},"range":[1617,1638],"raw":" 按照作业/进程的到达顺序进行服务   |"},{"type":"TableCell","children":[{"type":"Str","value":"先到达后备队列（就绪队列）的作业/进程先得到处理机的处理","loc":{"start":{"line":68,"column":72},"end":{"line":68,"column":100}},"range":[1639,1667],"raw":"先到达后备队列（就绪队列）的作业/进程先得到处理机的处理"}],"loc":{"start":{"line":68,"column":71},"end":{"line":68,"column":102}},"range":[1638,1669],"raw":" 先到达后备队列（就绪队列）的作业/进程先得到处理机的处理 |"},{"type":"TableCell","children":[{"type":"Str","value":"非抢占","loc":{"start":{"line":68,"column":103},"end":{"line":68,"column":106}},"range":[1670,1673],"raw":"非抢占"}],"loc":{"start":{"line":68,"column":102},"end":{"line":68,"column":162}},"range":[1669,1729],"raw":" 非抢占                                                       |"},{"type":"TableCell","children":[{"type":"Str","value":"公平，实现简单","loc":{"start":{"line":68,"column":163},"end":{"line":68,"column":170}},"range":[1730,1737],"raw":"公平，实现简单"}],"loc":{"start":{"line":68,"column":162},"end":{"line":68,"column":192}},"range":[1729,1759],"raw":" 公平，实现简单                     |"},{"type":"TableCell","children":[{"type":"Str","value":"排在长进程后面的短进程需要等待很长的时间才能被服务，","loc":{"start":{"line":68,"column":193},"end":{"line":68,"column":219}},"range":[1760,1786],"raw":"排在长进程后面的短进程需要等待很长的时间才能被服务，"},{"type":"Strong","children":[{"type":"Str","value":"对短作业不利，对长作业也有利","loc":{"start":{"line":68,"column":221},"end":{"line":68,"column":235}},"range":[1788,1802],"raw":"对短作业不利，对长作业也有利"}],"loc":{"start":{"line":68,"column":219},"end":{"line":68,"column":237}},"range":[1786,1804],"raw":"**对短作业不利，对长作业也有利**"}],"loc":{"start":{"line":68,"column":192},"end":{"line":68,"column":239}},"range":[1759,1806],"raw":" 排在长进程后面的短进程需要等待很长的时间才能被服务，**对短作业不利，对长作业也有利** |"},{"type":"TableCell","children":[{"type":"Str","value":"不会","loc":{"start":{"line":68,"column":240},"end":{"line":68,"column":242}},"range":[1807,1809],"raw":"不会"}],"loc":{"start":{"line":68,"column":239},"end":{"line":68,"column":294}},"range":[1806,1861],"raw":" 不会                                                   |"}],"loc":{"start":{"line":68,"column":0},"end":{"line":68,"column":294}},"range":[1567,1861],"raw":"|      先来先服务(First Come First Serve, FCFS)       | 按照作业/进程的到达顺序进行服务   | 先到达后备队列（就绪队列）的作业/进程先得到处理机的处理 | 非抢占                                                       | 公平，实现简单                     | 排在长进程后面的短进程需要等待很长的时间才能被服务，**对短作业不利，对长作业也有利** | 不会                                                   |"},{"type":"TableRow","children":[{"type":"TableCell","children":[{"type":"Str","value":"短作业优先(Shortest Job First, SJF)","loc":{"start":{"line":69,"column":10},"end":{"line":69,"column":40}},"range":[1872,1902],"raw":"短作业优先(Shortest Job First, SJF)"}],"loc":{"start":{"line":69,"column":0},"end":{"line":69,"column":50}},"range":[1862,1912],"raw":"|         短作业优先(Shortest Job First, SJF)         |"},{"type":"TableCell","children":[{"type":"Str","value":"最短的作业/进程优先得到服务","loc":{"start":{"line":69,"column":51},"end":{"line":69,"column":65}},"range":[1913,1927],"raw":"最短的作业/进程优先得到服务"}],"loc":{"start":{"line":69,"column":50},"end":{"line":69,"column":73}},"range":[1912,1935],"raw":" 最短的作业/进程优先得到服务       |"},{"type":"TableCell","children":[{"type":"Str","value":"用于作业调度，用于进程调度的时候称为“短进程优先(SPF)”","loc":{"start":{"line":69,"column":74},"end":{"line":69,"column":104}},"range":[1936,1966],"raw":"用于作业调度，用于进程调度的时候称为“短进程优先(SPF)”"}],"loc":{"start":{"line":69,"column":73},"end":{"line":69,"column":108}},"range":[1935,1970],"raw":" 用于作业调度，用于进程调度的时候称为“短进程优先(SPF)”   |"},{"type":"TableCell","children":[{"type":"Str","value":"SJF和SPF是非抢占式的，也有抢占式的版本：","loc":{"start":{"line":69,"column":109},"end":{"line":69,"column":132}},"range":[1971,1994],"raw":"SJF和SPF是非抢占式的，也有抢占式的版本："},{"type":"Strong","children":[{"type":"Str","value":"最短剩余时间","loc":{"start":{"line":69,"column":134},"end":{"line":69,"column":140}},"range":[1996,2002],"raw":"最短剩余时间"}],"loc":{"start":{"line":69,"column":132},"end":{"line":69,"column":142}},"range":[1994,2004],"raw":"**最短剩余时间**"},{"type":"Str","value":"(SRTN, Shortest Remaining Time Next)","loc":{"start":{"line":69,"column":142},"end":{"line":69,"column":178}},"range":[2004,2040],"raw":"(SRTN, Shortest Remaining Time Next)"}],"loc":{"start":{"line":69,"column":108},"end":{"line":69,"column":180}},"range":[1970,2042],"raw":" SJF和SPF是非抢占式的，也有抢占式的版本：**最短剩余时间**(SRTN, Shortest Remaining Time Next) |"},{"type":"TableCell","children":[{"type":"Str","value":"“最短的”平均等待时间和平均周转时间","loc":{"start":{"line":69,"column":181},"end":{"line":69,"column":199}},"range":[2043,2061],"raw":"“最短的”平均等待时间和平均周转时间"}],"loc":{"start":{"line":69,"column":180},"end":{"line":69,"column":201}},"range":[2042,2063],"raw":" “最短的”平均等待时间和平均周转时间 |"},{"type":"TableCell","children":[{"type":"Str","value":"对短作业有利，对长作业不利，作业的运行时间是用户提供的，并不一定真实","loc":{"start":{"line":69,"column":202},"end":{"line":69,"column":236}},"range":[2064,2098],"raw":"对短作业有利，对长作业不利，作业的运行时间是用户提供的，并不一定真实"}],"loc":{"start":{"line":69,"column":201},"end":{"line":69,"column":238}},"range":[2063,2100],"raw":" 对短作业有利，对长作业不利，作业的运行时间是用户提供的，并不一定真实 |"},{"type":"TableCell","children":[{"type":"Str","value":"会","loc":{"start":{"line":69,"column":239},"end":{"line":69,"column":240}},"range":[2101,2102],"raw":"会"}],"loc":{"start":{"line":69,"column":238},"end":{"line":69,"column":294}},"range":[2100,2156],"raw":" 会                                                     |"}],"loc":{"start":{"line":69,"column":0},"end":{"line":69,"column":294}},"range":[1862,2156],"raw":"|         短作业优先(Shortest Job First, SJF)         | 最短的作业/进程优先得到服务       | 用于作业调度，用于进程调度的时候称为“短进程优先(SPF)”   | SJF和SPF是非抢占式的，也有抢占式的版本：**最短剩余时间**(SRTN, Shortest Remaining Time Next) | “最短的”平均等待时间和平均周转时间 | 对短作业有利，对长作业不利，作业的运行时间是用户提供的，并不一定真实 | 会                                                     |"},{"type":"TableRow","children":[{"type":"TableCell","children":[{"type":"Str","value":"高响应比优先算法(HRRN, Highest Response Ratio Next)","loc":{"start":{"line":70,"column":2},"end":{"line":70,"column":45}},"range":[2159,2202],"raw":"高响应比优先算法(HRRN, Highest Response Ratio Next)"}],"loc":{"start":{"line":70,"column":0},"end":{"line":70,"column":47}},"range":[2157,2204],"raw":"| 高响应比优先算法(HRRN, Highest Response Ratio Next) |"},{"type":"TableCell","children":[{"type":"Str","value":"选择响应比最高的作业/进程为其服务","loc":{"start":{"line":70,"column":48},"end":{"line":70,"column":65}},"range":[2205,2222],"raw":"选择响应比最高的作业/进程为其服务"}],"loc":{"start":{"line":70,"column":47},"end":{"line":70,"column":67}},"range":[2204,2224],"raw":" 选择响应比最高的作业/进程为其服务 |"},{"type":"TableCell","children":[{"type":"Str","value":"可以用于作业调度、也可以用进程调度","loc":{"start":{"line":70,"column":68},"end":{"line":70,"column":85}},"range":[2225,2242],"raw":"可以用于作业调度、也可以用进程调度"}],"loc":{"start":{"line":70,"column":67},"end":{"line":70,"column":108}},"range":[2224,2265],"raw":" 可以用于作业调度、也可以用进程调度                      |"},{"type":"TableCell","children":[{"type":"Str","value":"非抢占式","loc":{"start":{"line":70,"column":109},"end":{"line":70,"column":113}},"range":[2266,2270],"raw":"非抢占式"}],"loc":{"start":{"line":70,"column":108},"end":{"line":70,"column":167}},"range":[2265,2324],"raw":" 非抢占式                                                     |"},{"type":"TableCell","children":[{"type":"Str","value":"综合考虑了等待时间和运行时间","loc":{"start":{"line":70,"column":168},"end":{"line":70,"column":182}},"range":[2325,2339],"raw":"综合考虑了等待时间和运行时间"}],"loc":{"start":{"line":70,"column":167},"end":{"line":70,"column":190}},"range":[2324,2347],"raw":" 综合考虑了等待时间和运行时间       |"},{"type":"TableCell","children":[],"loc":{"start":{"line":70,"column":190},"end":{"line":70,"column":253}},"range":[2347,2410],"raw":"                                                              |"},{"type":"TableCell","children":[{"type":"Str","value":"随着等待时间越大，响应比也会越来越大，所以不会产生饥饿","loc":{"start":{"line":70,"column":254},"end":{"line":70,"column":281}},"range":[2411,2438],"raw":"随着等待时间越大，响应比也会越来越大，所以不会产生饥饿"}],"loc":{"start":{"line":70,"column":253},"end":{"line":70,"column":283}},"range":[2410,2440],"raw":" 随着等待时间越大，响应比也会越来越大，所以不会产生饥饿 |"}],"loc":{"start":{"line":70,"column":0},"end":{"line":70,"column":283}},"range":[2157,2440],"raw":"| 高响应比优先算法(HRRN, Highest Response Ratio Next) | 选择响应比最高的作业/进程为其服务 | 可以用于作业调度、也可以用进程调度                      | 非抢占式                                                     | 综合考虑了等待时间和运行时间       |                                                              | 随着等待时间越大，响应比也会越来越大，所以不会产生饥饿 |"}],"loc":{"start":{"line":66,"column":0},"end":{"line":70,"column":283}},"range":[848,2440],"raw":"|                        算法                         | 规则                              | 可用于作业/进程调度                                     | 抢占                                                         | 优点                               | 缺点                                                         | 饥饿                                                   |\n| :-------------------------------------------------: | --------------------------------- | ------------------------------------------------------- | ------------------------------------------------------------ | ---------------------------------- | ------------------------------------------------------------ | ------------------------------------------------------ |\n|      先来先服务(First Come First Serve, FCFS)       | 按照作业/进程的到达顺序进行服务   | 先到达后备队列（就绪队列）的作业/进程先得到处理机的处理 | 非抢占                                                       | 公平，实现简单                     | 排在长进程后面的短进程需要等待很长的时间才能被服务，**对短作业不利，对长作业也有利** | 不会                                                   |\n|         短作业优先(Shortest Job First, SJF)         | 最短的作业/进程优先得到服务       | 用于作业调度，用于进程调度的时候称为“短进程优先(SPF)”   | SJF和SPF是非抢占式的，也有抢占式的版本：**最短剩余时间**(SRTN, Shortest Remaining Time Next) | “最短的”平均等待时间和平均周转时间 | 对短作业有利，对长作业不利，作业的运行时间是用户提供的，并不一定真实 | 会                                                     |\n| 高响应比优先算法(HRRN, Highest Response Ratio Next) | 选择响应比最高的作业/进程为其服务 | 可以用于作业调度、也可以用进程调度                      | 非抢占式                                                     | 综合考虑了等待时间和运行时间       |                                                              | 随着等待时间越大，响应比也会越来越大，所以不会产生饥饿 |"},{"type":"BlockQuote","children":[{"type":"Paragraph","children":[{"type":"Str","value":"在所有的进程可运行的时间相同时，SJF调度算法的平均等待时间、平均周转时间最少","loc":{"start":{"line":72,"column":2},"end":{"line":72,"column":41}},"range":[2444,2483],"raw":"在所有的进程可运行的时间相同时，SJF调度算法的平均等待时间、平均周转时间最少"}],"loc":{"start":{"line":72,"column":2},"end":{"line":72,"column":41}},"range":[2444,2483],"raw":"在所有的进程可运行的时间相同时，SJF调度算法的平均等待时间、平均周转时间最少"},{"type":"Paragraph","children":[{"type":"Str","value":"** ","loc":{"start":{"line":74,"column":2},"end":{"line":74,"column":5}},"range":[2488,2491],"raw":"** "},{"type":"InlineMath","value":"响应比=\\frac{等待时间+要求服务时间}{要求服务时间}","data":{"hName":"span","hProperties":{"className":["math","math-inline"]},"hChildren":[{"type":"Str","value":"响应比=\\frac{等待时间+要求服务时间}{要求服务时间}"}]},"loc":{"start":{"line":74,"column":5},"end":{"line":74,"column":37}},"range":[2491,2523],"raw":"$响应比=\\frac{等待时间+要求服务时间}{要求服务时间}$"},{"type":"Str","value":" **","loc":{"start":{"line":74,"column":37},"end":{"line":74,"column":40}},"range":[2523,2526],"raw":" **"}],"loc":{"start":{"line":74,"column":2},"end":{"line":74,"column":40}},"range":[2488,2526],"raw":"** $响应比=\\frac{等待时间+要求服务时间}{要求服务时间}$ **"}],"loc":{"start":{"line":72,"column":0},"end":{"line":74,"column":40}},"range":[2442,2526],"raw":"> 在所有的进程可运行的时间相同时，SJF调度算法的平均等待时间、平均周转时间最少\n>\n> ** $响应比=\\frac{等待时间+要求服务时间}{要求服务时间}$ **"},{"type":"Header","depth":3,"children":[{"type":"Str","value":"时间片轮转调度、优先级调度和多级反馈队列调度","loc":{"start":{"line":76,"column":4},"end":{"line":76,"column":26}},"range":[2532,2554],"raw":"时间片轮转调度、优先级调度和多级反馈队列调度"}],"loc":{"start":{"line":76,"column":0},"end":{"line":76,"column":26}},"range":[2528,2554],"raw":"### 时间片轮转调度、优先级调度和多级反馈队列调度"},{"type":"Table","align":[null,"center",null,null,null,null,null],"children":[{"type":"TableRow","children":[{"type":"TableCell","children":[{"type":"Str","value":"算法","loc":{"start":{"line":78,"column":2},"end":{"line":78,"column":4}},"range":[2558,2560],"raw":"算法"}],"loc":{"start":{"line":78,"column":0},"end":{"line":78,"column":18}},"range":[2556,2574],"raw":"| 算法             |"},{"type":"TableCell","children":[{"type":"Str","value":"规则","loc":{"start":{"line":78,"column":47},"end":{"line":78,"column":49}},"range":[2603,2605],"raw":"规则"}],"loc":{"start":{"line":78,"column":18},"end":{"line":78,"column":79}},"range":[2574,2635],"raw":"                             规则                             |"},{"type":"TableCell","children":[{"type":"Str","value":"可用于作业/进程","loc":{"start":{"line":78,"column":80},"end":{"line":78,"column":88}},"range":[2636,2644],"raw":"可用于作业/进程"}],"loc":{"start":{"line":78,"column":79},"end":{"line":78,"column":133}},"range":[2635,2689],"raw":" 可用于作业/进程                                            |"},{"type":"TableCell","children":[{"type":"Str","value":"抢占","loc":{"start":{"line":78,"column":134},"end":{"line":78,"column":136}},"range":[2690,2692],"raw":"抢占"}],"loc":{"start":{"line":78,"column":133},"end":{"line":78,"column":185}},"range":[2689,2741],"raw":" 抢占                                                |"},{"type":"TableCell","children":[{"type":"Str","value":"优点","loc":{"start":{"line":78,"column":186},"end":{"line":78,"column":188}},"range":[2742,2744],"raw":"优点"}],"loc":{"start":{"line":78,"column":185},"end":{"line":78,"column":246}},"range":[2741,2802],"raw":" 优点                                                         |"},{"type":"TableCell","children":[{"type":"Str","value":"缺点","loc":{"start":{"line":78,"column":247},"end":{"line":78,"column":249}},"range":[2803,2805],"raw":"缺点"}],"loc":{"start":{"line":78,"column":246},"end":{"line":78,"column":307}},"range":[2802,2863],"raw":" 缺点                                                         |"},{"type":"TableCell","children":[{"type":"Str","value":"饥饿","loc":{"start":{"line":78,"column":308},"end":{"line":78,"column":310}},"range":[2864,2866],"raw":"饥饿"}],"loc":{"start":{"line":78,"column":307},"end":{"line":78,"column":312}},"range":[2863,2868],"raw":" 饥饿 |"}],"loc":{"start":{"line":78,"column":0},"end":{"line":78,"column":312}},"range":[2556,2868],"raw":"| 算法             |                             规则                             | 可用于作业/进程                                            | 抢占                                                | 优点                                                         | 缺点                                                         | 饥饿 |"},{"type":"TableRow","children":[{"type":"TableCell","children":[{"type":"Str","value":"时间片轮流","loc":{"start":{"line":80,"column":2},"end":{"line":80,"column":7}},"range":[3203,3208],"raw":"时间片轮流"}],"loc":{"start":{"line":80,"column":0},"end":{"line":80,"column":15}},"range":[3201,3216],"raw":"| 时间片轮流       |"},{"type":"TableCell","children":[{"type":"Str","value":"按照各个进程到达就绪队列的顺序，轮流让各个进程执行一个时间片。","loc":{"start":{"line":80,"column":16},"end":{"line":80,"column":47}},"range":[3217,3248],"raw":"按照各个进程到达就绪队列的顺序，轮流让各个进程执行一个时间片。"},{"type":"Strong","children":[{"type":"Str","value":"如果时间片太大，会退化成先来先服务去调度","loc":{"start":{"line":80,"column":49},"end":{"line":80,"column":69}},"range":[3250,3270],"raw":"如果时间片太大，会退化成先来先服务去调度"}],"loc":{"start":{"line":80,"column":47},"end":{"line":80,"column":71}},"range":[3248,3272],"raw":"**如果时间片太大，会退化成先来先服务去调度**"},{"type":"Str","value":"。时间片太小会导致进程切换过于频繁，花大量的时间进行进程切换。","loc":{"start":{"line":80,"column":71},"end":{"line":80,"column":102}},"range":[3272,3303],"raw":"。时间片太小会导致进程切换过于频繁，花大量的时间进行进程切换。"}],"loc":{"start":{"line":80,"column":15},"end":{"line":80,"column":104}},"range":[3216,3305],"raw":" 按照各个进程到达就绪队列的顺序，轮流让各个进程执行一个时间片。**如果时间片太大，会退化成先来先服务去调度**。时间片太小会导致进程切换过于频繁，花大量的时间进行进程切换。 |"},{"type":"TableCell","children":[{"type":"Str","value":"用于进程调度，作业只有建立了相应的进程之后才能被分配时间片","loc":{"start":{"line":80,"column":105},"end":{"line":80,"column":134}},"range":[3306,3335],"raw":"用于进程调度，作业只有建立了相应的进程之后才能被分配时间片"}],"loc":{"start":{"line":80,"column":104},"end":{"line":80,"column":136}},"range":[3305,3337],"raw":" 用于进程调度，作业只有建立了相应的进程之后才能被分配时间片 |"},{"type":"TableCell","children":[{"type":"Str","value":"抢占式。由时钟装置发出时钟中断来通知CPU时间片已到。","loc":{"start":{"line":80,"column":137},"end":{"line":80,"column":164}},"range":[3338,3365],"raw":"抢占式。由时钟装置发出时钟中断来通知CPU时间片已到。"}],"loc":{"start":{"line":80,"column":136},"end":{"line":80,"column":166}},"range":[3337,3367],"raw":" 抢占式。由时钟装置发出时钟中断来通知CPU时间片已到。 |"},{"type":"TableCell","children":[{"type":"Str","value":"公平，响应快，适用于分时操作系统","loc":{"start":{"line":80,"column":167},"end":{"line":80,"column":183}},"range":[3368,3384],"raw":"公平，响应快，适用于分时操作系统"}],"loc":{"start":{"line":80,"column":166},"end":{"line":80,"column":213}},"range":[3367,3414],"raw":" 公平，响应快，适用于分时操作系统                             |"},{"type":"TableCell","children":[{"type":"Str","value":"进程切换有一定的开销，且不区分任务的紧急程度","loc":{"start":{"line":80,"column":214},"end":{"line":80,"column":236}},"range":[3415,3437],"raw":"进程切换有一定的开销，且不区分任务的紧急程度"}],"loc":{"start":{"line":80,"column":213},"end":{"line":80,"column":254}},"range":[3414,3455],"raw":" 进程切换有一定的开销，且不区分任务的紧急程度                 |"},{"type":"TableCell","children":[{"type":"Str","value":"不会","loc":{"start":{"line":80,"column":255},"end":{"line":80,"column":257}},"range":[3456,3458],"raw":"不会"}],"loc":{"start":{"line":80,"column":254},"end":{"line":80,"column":259}},"range":[3455,3460],"raw":" 不会 |"}],"loc":{"start":{"line":80,"column":0},"end":{"line":80,"column":259}},"range":[3201,3460],"raw":"| 时间片轮流       | 按照各个进程到达就绪队列的顺序，轮流让各个进程执行一个时间片。**如果时间片太大，会退化成先来先服务去调度**。时间片太小会导致进程切换过于频繁，花大量的时间进行进程切换。 | 用于进程调度，作业只有建立了相应的进程之后才能被分配时间片 | 抢占式。由时钟装置发出时钟中断来通知CPU时间片已到。 | 公平，响应快，适用于分时操作系统                             | 进程切换有一定的开销，且不区分任务的紧急程度                 | 不会 |"},{"type":"TableRow","children":[{"type":"TableCell","children":[{"type":"Str","value":"优先级调度算法","loc":{"start":{"line":81,"column":2},"end":{"line":81,"column":9}},"range":[3463,3470],"raw":"优先级调度算法"}],"loc":{"start":{"line":81,"column":0},"end":{"line":81,"column":13}},"range":[3461,3474],"raw":"| 优先级调度算法   |"},{"type":"TableCell","children":[{"type":"Str","value":"为每一个作业/进程设置一个优先级，调度时选择优先级最高的作业/进程","loc":{"start":{"line":81,"column":14},"end":{"line":81,"column":47}},"range":[3475,3508],"raw":"为每一个作业/进程设置一个优先级，调度时选择优先级最高的作业/进程"}],"loc":{"start":{"line":81,"column":13},"end":{"line":81,"column":49}},"range":[3474,3510],"raw":" 为每一个作业/进程设置一个优先级，调度时选择优先级最高的作业/进程 |"},{"type":"TableCell","children":[{"type":"Str","value":"既可以用于作业调度，也可以用于进程调度","loc":{"start":{"line":81,"column":50},"end":{"line":81,"column":69}},"range":[3511,3530],"raw":"既可以用于作业调度，也可以用于进程调度"}],"loc":{"start":{"line":81,"column":49},"end":{"line":81,"column":91}},"range":[3510,3552],"raw":" 既可以用于作业调度，也可以用于进程调度                     |"},{"type":"TableCell","children":[{"type":"Str","value":"抢占式、非抢占式","loc":{"start":{"line":81,"column":92},"end":{"line":81,"column":100}},"range":[3553,3561],"raw":"抢占式、非抢占式"}],"loc":{"start":{"line":81,"column":91},"end":{"line":81,"column":137}},"range":[3552,3598],"raw":" 抢占式、非抢占式                                    |"},{"type":"TableCell","children":[{"type":"Str","value":"区分任务的紧急程度，适用于实时操作系统","loc":{"start":{"line":81,"column":138},"end":{"line":81,"column":157}},"range":[3599,3618],"raw":"区分任务的紧急程度，适用于实时操作系统"}],"loc":{"start":{"line":81,"column":137},"end":{"line":81,"column":181}},"range":[3598,3642],"raw":" 区分任务的紧急程度，适用于实时操作系统                       |"},{"type":"TableCell","children":[{"type":"Str","value":"如果不断地有高优先级地进程到达，可能会导致低优先级地进程饥饿","loc":{"start":{"line":81,"column":182},"end":{"line":81,"column":212}},"range":[3643,3673],"raw":"如果不断地有高优先级地进程到达，可能会导致低优先级地进程饥饿"}],"loc":{"start":{"line":81,"column":181},"end":{"line":81,"column":214}},"range":[3642,3675],"raw":" 如果不断地有高优先级地进程到达，可能会导致低优先级地进程饥饿 |"},{"type":"TableCell","children":[{"type":"Str","value":"会","loc":{"start":{"line":81,"column":215},"end":{"line":81,"column":216}},"range":[3676,3677],"raw":"会"}],"loc":{"start":{"line":81,"column":214},"end":{"line":81,"column":220}},"range":[3675,3681],"raw":" 会   |"}],"loc":{"start":{"line":81,"column":0},"end":{"line":81,"column":220}},"range":[3461,3681],"raw":"| 优先级调度算法   | 为每一个作业/进程设置一个优先级，调度时选择优先级最高的作业/进程 | 既可以用于作业调度，也可以用于进程调度                     | 抢占式、非抢占式                                    | 区分任务的紧急程度，适用于实时操作系统                       | 如果不断地有高优先级地进程到达，可能会导致低优先级地进程饥饿 | 会   |"},{"type":"TableRow","children":[{"type":"TableCell","children":[{"type":"Str","value":"多级反馈队列调度","loc":{"start":{"line":82,"column":2},"end":{"line":82,"column":10}},"range":[3684,3692],"raw":"多级反馈队列调度"}],"loc":{"start":{"line":82,"column":0},"end":{"line":82,"column":12}},"range":[3682,3694],"raw":"| 多级反馈队列调度 |"},{"type":"TableCell","children":[{"type":"Str","value":"1. 设置多级就绪队列，各级队列优先级从高到低，时间片从小到大；2. 新进程到达时进入第1级队列，如果用完时间片进程还未结束，则进程进入下一级队列地队尾，如果此时已经是最下级地队列，重新放回该队列队尾；3. 第k级为空时，第k+1级队头地进程分配时间片","loc":{"start":{"line":82,"column":13},"end":{"line":82,"column":139}},"range":[3695,3821],"raw":"1. 设置多级就绪队列，各级队列优先级从高到低，时间片从小到大；2. 新进程到达时进入第1级队列，如果用完时间片进程还未结束，则进程进入下一级队列地队尾，如果此时已经是最下级地队列，重新放回该队列队尾；3. 第k级为空时，第k+1级队头地进程分配时间片"}],"loc":{"start":{"line":82,"column":12},"end":{"line":82,"column":141}},"range":[3694,3823],"raw":" 1. 设置多级就绪队列，各级队列优先级从高到低，时间片从小到大；2. 新进程到达时进入第1级队列，如果用完时间片进程还未结束，则进程进入下一级队列地队尾，如果此时已经是最下级地队列，重新放回该队列队尾；3. 第k级为空时，第k+1级队头地进程分配时间片 |"},{"type":"TableCell","children":[{"type":"Str","value":"用于进程调度","loc":{"start":{"line":82,"column":142},"end":{"line":82,"column":148}},"range":[3824,3830],"raw":"用于进程调度"}],"loc":{"start":{"line":82,"column":141},"end":{"line":82,"column":196}},"range":[3823,3878],"raw":" 用于进程调度                                               |"},{"type":"TableCell","children":[{"type":"Str","value":"抢占式","loc":{"start":{"line":82,"column":197},"end":{"line":82,"column":200}},"range":[3879,3882],"raw":"抢占式"}],"loc":{"start":{"line":82,"column":196},"end":{"line":82,"column":247}},"range":[3878,3929],"raw":" 抢占式                                              |"},{"type":"TableCell","children":[{"type":"Str","value":"对各类进程相对公平；对每个新到达地进程都可以很快响应；段进程只用很少的时间就可以完成；不必实现估计进程的运行时间；可以灵活调整对割各类进程的偏好程度","loc":{"start":{"line":82,"column":248},"end":{"line":82,"column":322}},"range":[3930,4004],"raw":"对各类进程相对公平；对每个新到达地进程都可以很快响应；段进程只用很少的时间就可以完成；不必实现估计进程的运行时间；可以灵活调整对割各类进程的偏好程度"}],"loc":{"start":{"line":82,"column":247},"end":{"line":82,"column":324}},"range":[3929,4006],"raw":" 对各类进程相对公平；对每个新到达地进程都可以很快响应；段进程只用很少的时间就可以完成；不必实现估计进程的运行时间；可以灵活调整对割各类进程的偏好程度 |"},{"type":"TableCell","children":[],"loc":{"start":{"line":82,"column":324},"end":{"line":82,"column":387}},"range":[4006,4069],"raw":"                                                              |"},{"type":"TableCell","children":[{"type":"Str","value":"会","loc":{"start":{"line":82,"column":388},"end":{"line":82,"column":389}},"range":[4070,4071],"raw":"会"}],"loc":{"start":{"line":82,"column":387},"end":{"line":82,"column":393}},"range":[4069,4075],"raw":" 会   |"}],"loc":{"start":{"line":82,"column":0},"end":{"line":82,"column":393}},"range":[3682,4075],"raw":"| 多级反馈队列调度 | 1. 设置多级就绪队列，各级队列优先级从高到低，时间片从小到大；2. 新进程到达时进入第1级队列，如果用完时间片进程还未结束，则进程进入下一级队列地队尾，如果此时已经是最下级地队列，重新放回该队列队尾；3. 第k级为空时，第k+1级队头地进程分配时间片 | 用于进程调度                                               | 抢占式                                              | 对各类进程相对公平；对每个新到达地进程都可以很快响应；段进程只用很少的时间就可以完成；不必实现估计进程的运行时间；可以灵活调整对割各类进程的偏好程度 |                                                              | 会   |"}],"loc":{"start":{"line":78,"column":0},"end":{"line":82,"column":393}},"range":[2556,4075],"raw":"| 算法             |                             规则                             | 可用于作业/进程                                            | 抢占                                                | 优点                                                         | 缺点                                                         | 饥饿 |\n| ---------------- | :----------------------------------------------------------: | ---------------------------------------------------------- | --------------------------------------------------- | ------------------------------------------------------------ | ------------------------------------------------------------ | ---- |\n| 时间片轮流       | 按照各个进程到达就绪队列的顺序，轮流让各个进程执行一个时间片。**如果时间片太大，会退化成先来先服务去调度**。时间片太小会导致进程切换过于频繁，花大量的时间进行进程切换。 | 用于进程调度，作业只有建立了相应的进程之后才能被分配时间片 | 抢占式。由时钟装置发出时钟中断来通知CPU时间片已到。 | 公平，响应快，适用于分时操作系统                             | 进程切换有一定的开销，且不区分任务的紧急程度                 | 不会 |\n| 优先级调度算法   | 为每一个作业/进程设置一个优先级，调度时选择优先级最高的作业/进程 | 既可以用于作业调度，也可以用于进程调度                     | 抢占式、非抢占式                                    | 区分任务的紧急程度，适用于实时操作系统                       | 如果不断地有高优先级地进程到达，可能会导致低优先级地进程饥饿 | 会   |\n| 多级反馈队列调度 | 1. 设置多级就绪队列，各级队列优先级从高到低，时间片从小到大；2. 新进程到达时进入第1级队列，如果用完时间片进程还未结束，则进程进入下一级队列地队尾，如果此时已经是最下级地队列，重新放回该队列队尾；3. 第k级为空时，第k+1级队头地进程分配时间片 | 用于进程调度                                               | 抢占式                                              | 对各类进程相对公平；对每个新到达地进程都可以很快响应；段进程只用很少的时间就可以完成；不必实现估计进程的运行时间；可以灵活调整对割各类进程的偏好程度 |                                                              | 会   |"},{"type":"BlockQuote","children":[{"type":"Paragraph","children":[{"type":"Str","value":"设计时间片的大小要让进程切换到时间开销占比不超过1%。","loc":{"start":{"line":84,"column":2},"end":{"line":84,"column":29}},"range":[4079,4106],"raw":"设计时间片的大小要让进程切换到时间开销占比不超过1%。"}],"loc":{"start":{"line":84,"column":2},"end":{"line":84,"column":29}},"range":[4079,4106],"raw":"设计时间片的大小要让进程切换到时间开销占比不超过1%。"}],"loc":{"start":{"line":84,"column":0},"end":{"line":84,"column":29}},"range":[4077,4106],"raw":"> 设计时间片的大小要让进程切换到时间开销占比不超过1%。"}],"loc":{"start":{"line":1,"column":0},"end":{"line":86,"column":0}},"range":[0,4108],"raw":"---\ntitle: '调度算法'\ntags: ['操作系统','进程']\n---\n# 调度算法\n\n## 调度算法好坏的评价指标\n\n### CPU利用率\n\nCPU的造价极其昂贵，因此人们会希望让CPU尽可能工作。\n\nCPU利用率：指CPU“忙碌”的时间站总时间的比例\n\n $利用率=\\frac{忙碌的时间}{总时间}$ \n\n#### 甘特图\n\n用于求多道程序并发执行的情况下的CPU利用率\n\n### 系统吞吐量\n\n系统吞吐量：单位时间内完成作业的数量\n\n $系统吞吐量=\\frac{总共完成了多少道作业}{总共花了多少时间}$ \n\n### 周转时间\n\n周转时间：从作业**提交给系统**开始到**作业完成**，总共花费的时间。\n\n周转时间包括：\n\n- 作业在外存上等待作业调度（高级调度）的时间\n- 进程在就绪队列上等待进程调度的时间（可能发生多次）\n- 进程在CPU上执行的时间（可能发生多次）\n- 进程等待I/O操作完成的时间（可能发生多次）\n\n作业的周转时间 = 作业完成的时间 - 作业提交的时间\n\n $平均周转时间 = \\frac{各作业周转时间之和}{作业数}$ \n\n $带权周转时间=\\frac{作业周转时间}{作业实际运行时间}=\\frac{作业完成时间-作业提交时间}{作业实际运行时间}$ \n\n### 等待时间\n\n等待时间：指进程/作业处于等待处理机状态时间之和，等待时间越长，用户满意度越低\n\n对于进程来说，等待时间就是进程建立以后等待被服务的时间之和，在等待I/O完成期间其实进程也是在被服务的，不计入等待时间。\n\n对于作业来说，等待时间还要考虑建立进程之后的等待时间，还要加上作业在外存后背队列中等待的时间。\n\n $平均等待时间=\\frac{所有作业的总等待时间}{作业的数量}$ ，可以用于评价整体性能。\n\n### 响应时间\n\n响应时间：用户从提交请求到首次产生响应所用的时间\n\n\n\n*****\n\n## 调度算法\n\n### 先来先服务、短作业优先和高响应比优先算法\n\n|                        算法                         | 规则                              | 可用于作业/进程调度                                     | 抢占                                                         | 优点                               | 缺点                                                         | 饥饿                                                   |\n| :-------------------------------------------------: | --------------------------------- | ------------------------------------------------------- | ------------------------------------------------------------ | ---------------------------------- | ------------------------------------------------------------ | ------------------------------------------------------ |\n|      先来先服务(First Come First Serve, FCFS)       | 按照作业/进程的到达顺序进行服务   | 先到达后备队列（就绪队列）的作业/进程先得到处理机的处理 | 非抢占                                                       | 公平，实现简单                     | 排在长进程后面的短进程需要等待很长的时间才能被服务，**对短作业不利，对长作业也有利** | 不会                                                   |\n|         短作业优先(Shortest Job First, SJF)         | 最短的作业/进程优先得到服务       | 用于作业调度，用于进程调度的时候称为“短进程优先(SPF)”   | SJF和SPF是非抢占式的，也有抢占式的版本：**最短剩余时间**(SRTN, Shortest Remaining Time Next) | “最短的”平均等待时间和平均周转时间 | 对短作业有利，对长作业不利，作业的运行时间是用户提供的，并不一定真实 | 会                                                     |\n| 高响应比优先算法(HRRN, Highest Response Ratio Next) | 选择响应比最高的作业/进程为其服务 | 可以用于作业调度、也可以用进程调度                      | 非抢占式                                                     | 综合考虑了等待时间和运行时间       |                                                              | 随着等待时间越大，响应比也会越来越大，所以不会产生饥饿 |\n\n> 在所有的进程可运行的时间相同时，SJF调度算法的平均等待时间、平均周转时间最少\n>\n> ** $响应比=\\frac{等待时间+要求服务时间}{要求服务时间}$ **\n\n### 时间片轮转调度、优先级调度和多级反馈队列调度\n\n| 算法             |                             规则                             | 可用于作业/进程                                            | 抢占                                                | 优点                                                         | 缺点                                                         | 饥饿 |\n| ---------------- | :----------------------------------------------------------: | ---------------------------------------------------------- | --------------------------------------------------- | ------------------------------------------------------------ | ------------------------------------------------------------ | ---- |\n| 时间片轮流       | 按照各个进程到达就绪队列的顺序，轮流让各个进程执行一个时间片。**如果时间片太大，会退化成先来先服务去调度**。时间片太小会导致进程切换过于频繁，花大量的时间进行进程切换。 | 用于进程调度，作业只有建立了相应的进程之后才能被分配时间片 | 抢占式。由时钟装置发出时钟中断来通知CPU时间片已到。 | 公平，响应快，适用于分时操作系统                             | 进程切换有一定的开销，且不区分任务的紧急程度                 | 不会 |\n| 优先级调度算法   | 为每一个作业/进程设置一个优先级，调度时选择优先级最高的作业/进程 | 既可以用于作业调度，也可以用于进程调度                     | 抢占式、非抢占式                                    | 区分任务的紧急程度，适用于实时操作系统                       | 如果不断地有高优先级地进程到达，可能会导致低优先级地进程饥饿 | 会   |\n| 多级反馈队列调度 | 1. 设置多级就绪队列，各级队列优先级从高到低，时间片从小到大；2. 新进程到达时进入第1级队列，如果用完时间片进程还未结束，则进程进入下一级队列地队尾，如果此时已经是最下级地队列，重新放回该队列队尾；3. 第k级为空时，第k+1级队头地进程分配时间片 | 用于进程调度                                               | 抢占式                                              | 对各类进程相对公平；对每个新到达地进程都可以很快响应；段进程只用很少的时间就可以完成；不必实现估计进程的运行时间；可以灵活调整对割各类进程的偏好程度 |                                                              | 会   |\n\n> 设计时间片的大小要让进程切换到时间开销占比不超过1%。\n\n"},"catalogue":{"title":"调度算法","json-path":"操作系统/2020-08-12-调度算法.json","mdate":"2020-08-12","cover":"https://i.328888.xyz/2023/01/01/tZMoa.jpeg","icon":"☀️","visible":true,"tags":["操作系统","进程"]}}