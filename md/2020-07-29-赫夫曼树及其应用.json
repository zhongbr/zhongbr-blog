{"ast":{"type":"Document","children":[{"type":"Yaml","value":"tags: ['数据结构','树']","loc":{"start":{"line":1,"column":0},"end":{"line":3,"column":3}},"range":[0,26],"raw":"---\ntags: ['数据结构','树']\n---"},{"type":"Header","depth":1,"children":[{"type":"Str","value":"赫夫曼树及其应用","loc":{"start":{"line":5,"column":2},"end":{"line":5,"column":10}},"range":[30,38],"raw":"赫夫曼树及其应用"}],"loc":{"start":{"line":5,"column":0},"end":{"line":5,"column":10}},"range":[28,38],"raw":"# 赫夫曼树及其应用"},{"type":"BlockQuote","children":[{"type":"Paragraph","children":[{"type":"Str","value":"路径长度：路径上所经历的边的个数","loc":{"start":{"line":7,"column":2},"end":{"line":7,"column":18}},"range":[42,58],"raw":"路径长度：路径上所经历的边的个数"}],"loc":{"start":{"line":7,"column":2},"end":{"line":7,"column":18}},"range":[42,58],"raw":"路径长度：路径上所经历的边的个数"},{"type":"Paragraph","children":[{"type":"Str","value":"结点的权：结点被赋予的数值","loc":{"start":{"line":9,"column":2},"end":{"line":9,"column":15}},"range":[63,76],"raw":"结点的权：结点被赋予的数值"}],"loc":{"start":{"line":9,"column":2},"end":{"line":9,"column":15}},"range":[63,76],"raw":"结点的权：结点被赋予的数值"},{"type":"Paragraph","children":[{"type":"Str","value":"树的带权路径长度（WPL）：树的所有叶节点的带权路径长度之和","loc":{"start":{"line":11,"column":2},"end":{"line":11,"column":32}},"range":[81,111],"raw":"树的带权路径长度（WPL）：树的所有叶节点的带权路径长度之和"}],"loc":{"start":{"line":11,"column":2},"end":{"line":11,"column":32}},"range":[81,111],"raw":"树的带权路径长度（WPL）：树的所有叶节点的带权路径长度之和"},{"type":"Paragraph","children":[{"type":"Str","value":"$$WPL=\\sum_{i=0}^{n}{w_{i}l_{i}}$$","loc":{"start":{"line":13,"column":2},"end":{"line":13,"column":36}},"range":[116,150],"raw":"$$WPL=\\sum_{i=0}^{n}{w_{i}l_{i}}$$"}],"loc":{"start":{"line":13,"column":2},"end":{"line":13,"column":36}},"range":[116,150],"raw":"$$WPL=\\sum_{i=0}^{n}{w_{i}l_{i}}$$"}],"loc":{"start":{"line":7,"column":0},"end":{"line":13,"column":36}},"range":[40,150],"raw":"> 路径长度：路径上所经历的边的个数\n>\n> 结点的权：结点被赋予的数值\n>\n> 树的带权路径长度（WPL）：树的所有叶节点的带权路径长度之和\n>\n> $$WPL=\\sum_{i=0}^{n}{w_{i}l_{i}}$$"},{"type":"Paragraph","children":[{"type":"Str","value":"赫夫曼树（最优二叉树）：含有n个带权叶子结点的带权路径长度最小的二叉树。","loc":{"start":{"line":15,"column":0},"end":{"line":15,"column":36}},"range":[152,188],"raw":"赫夫曼树（最优二叉树）：含有n个带权叶子结点的带权路径长度最小的二叉树。"}],"loc":{"start":{"line":15,"column":0},"end":{"line":15,"column":36}},"range":[152,188],"raw":"赫夫曼树（最优二叉树）：含有n个带权叶子结点的带权路径长度最小的二叉树。"},{"type":"Header","depth":2,"children":[{"type":"Str","value":"赫夫曼树的构造方法","loc":{"start":{"line":17,"column":3},"end":{"line":17,"column":12}},"range":[193,202],"raw":"赫夫曼树的构造方法"}],"loc":{"start":{"line":17,"column":0},"end":{"line":17,"column":12}},"range":[190,202],"raw":"## 赫夫曼树的构造方法"},{"type":"List","ordered":false,"start":null,"spread":false,"children":[{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"将n个带权叶子结点看作只有一个根结点的二叉树，构成森林F：","loc":{"start":{"line":19,"column":2},"end":{"line":19,"column":31}},"range":[206,235],"raw":"将n个带权叶子结点看作只有一个根结点的二叉树，构成森林F："}],"loc":{"start":{"line":19,"column":2},"end":{"line":19,"column":31}},"range":[206,235],"raw":"将n个带权叶子结点看作只有一个根结点的二叉树，构成森林F："}],"loc":{"start":{"line":19,"column":0},"end":{"line":19,"column":31}},"range":[204,235],"raw":"- 将n个带权叶子结点看作只有一个根结点的二叉树，构成森林F："},{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"生成一个新结点，并从F中寻找两个权值最小的树作为其左右子树，且新结点的权值为二者权值之和","loc":{"start":{"line":20,"column":2},"end":{"line":20,"column":46}},"range":[238,282],"raw":"生成一个新结点，并从F中寻找两个权值最小的树作为其左右子树，且新结点的权值为二者权值之和"}],"loc":{"start":{"line":20,"column":2},"end":{"line":20,"column":46}},"range":[238,282],"raw":"生成一个新结点，并从F中寻找两个权值最小的树作为其左右子树，且新结点的权值为二者权值之和"}],"loc":{"start":{"line":20,"column":0},"end":{"line":20,"column":46}},"range":[236,282],"raw":"- 生成一个新结点，并从F中寻找两个权值最小的树作为其左右子树，且新结点的权值为二者权值之和"},{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"将新生成的结点加入到F中，并从F中删除这两棵树","loc":{"start":{"line":21,"column":2},"end":{"line":21,"column":25}},"range":[285,308],"raw":"将新生成的结点加入到F中，并从F中删除这两棵树"}],"loc":{"start":{"line":21,"column":2},"end":{"line":21,"column":25}},"range":[285,308],"raw":"将新生成的结点加入到F中，并从F中删除这两棵树"}],"loc":{"start":{"line":21,"column":0},"end":{"line":21,"column":25}},"range":[283,308],"raw":"- 将新生成的结点加入到F中，并从F中删除这两棵树"},{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"重复上面两步，直到森林F中只有一棵树，就可得到赫夫曼树","loc":{"start":{"line":22,"column":2},"end":{"line":22,"column":29}},"range":[311,338],"raw":"重复上面两步，直到森林F中只有一棵树，就可得到赫夫曼树"}],"loc":{"start":{"line":22,"column":2},"end":{"line":22,"column":29}},"range":[311,338],"raw":"重复上面两步，直到森林F中只有一棵树，就可得到赫夫曼树"}],"loc":{"start":{"line":22,"column":0},"end":{"line":22,"column":29}},"range":[309,338],"raw":"- 重复上面两步，直到森林F中只有一棵树，就可得到赫夫曼树"}],"loc":{"start":{"line":19,"column":0},"end":{"line":22,"column":29}},"range":[204,338],"raw":"- 将n个带权叶子结点看作只有一个根结点的二叉树，构成森林F：\n- 生成一个新结点，并从F中寻找两个权值最小的树作为其左右子树，且新结点的权值为二者权值之和\n- 将新生成的结点加入到F中，并从F中删除这两棵树\n- 重复上面两步，直到森林F中只有一棵树，就可得到赫夫曼树"},{"type":"Paragraph","children":[{"type":"Str","value":"构造赫夫曼树的特点：","loc":{"start":{"line":24,"column":0},"end":{"line":24,"column":10}},"range":[340,350],"raw":"构造赫夫曼树的特点："}],"loc":{"start":{"line":24,"column":0},"end":{"line":24,"column":10}},"range":[340,350],"raw":"构造赫夫曼树的特点："},{"type":"List","ordered":false,"start":null,"spread":false,"children":[{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"初始结点都会成为叶子结点","loc":{"start":{"line":26,"column":2},"end":{"line":26,"column":14}},"range":[354,366],"raw":"初始结点都会成为叶子结点"}],"loc":{"start":{"line":26,"column":2},"end":{"line":26,"column":14}},"range":[354,366],"raw":"初始结点都会成为叶子结点"}],"loc":{"start":{"line":26,"column":0},"end":{"line":26,"column":14}},"range":[352,366],"raw":"- 初始结点都会成为叶子结点"},{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"结点的权值越大距离根结点越近，权值越小距离根结点越远","loc":{"start":{"line":27,"column":2},"end":{"line":27,"column":28}},"range":[369,395],"raw":"结点的权值越大距离根结点越近，权值越小距离根结点越远"}],"loc":{"start":{"line":27,"column":2},"end":{"line":27,"column":28}},"range":[369,395],"raw":"结点的权值越大距离根结点越近，权值越小距离根结点越远"}],"loc":{"start":{"line":27,"column":0},"end":{"line":27,"column":28}},"range":[367,395],"raw":"- 结点的权值越大距离根结点越近，权值越小距离根结点越远"},{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"赫夫曼树中所有结点的度都大于1","loc":{"start":{"line":28,"column":2},"end":{"line":28,"column":17}},"range":[398,413],"raw":"赫夫曼树中所有结点的度都大于1"}],"loc":{"start":{"line":28,"column":2},"end":{"line":28,"column":17}},"range":[398,413],"raw":"赫夫曼树中所有结点的度都大于1"}],"loc":{"start":{"line":28,"column":0},"end":{"line":28,"column":17}},"range":[396,413],"raw":"- 赫夫曼树中所有结点的度都大于1"},{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"n个叶子结点的赫夫曼树的结点数为2n-1，度为2的结点数为n-1","loc":{"start":{"line":29,"column":2},"end":{"line":29,"column":34}},"range":[416,448],"raw":"n个叶子结点的赫夫曼树的结点数为2n-1，度为2的结点数为n-1"}],"loc":{"start":{"line":29,"column":2},"end":{"line":29,"column":34}},"range":[416,448],"raw":"n个叶子结点的赫夫曼树的结点数为2n-1，度为2的结点数为n-1"}],"loc":{"start":{"line":29,"column":0},"end":{"line":29,"column":34}},"range":[414,448],"raw":"- n个叶子结点的赫夫曼树的结点数为2n-1，度为2的结点数为n-1"}],"loc":{"start":{"line":26,"column":0},"end":{"line":29,"column":34}},"range":[352,448],"raw":"- 初始结点都会成为叶子结点\n- 结点的权值越大距离根结点越近，权值越小距离根结点越远\n- 赫夫曼树中所有结点的度都大于1\n- n个叶子结点的赫夫曼树的结点数为2n-1，度为2的结点数为n-1"},{"type":"Header","depth":2,"children":[{"type":"Str","value":"赫夫曼树解决前缀编码的方法","loc":{"start":{"line":31,"column":3},"end":{"line":31,"column":16}},"range":[453,466],"raw":"赫夫曼树解决前缀编码的方法"}],"loc":{"start":{"line":31,"column":0},"end":{"line":31,"column":16}},"range":[450,466],"raw":"## 赫夫曼树解决前缀编码的方法"},{"type":"BlockQuote","children":[{"type":"Paragraph","children":[{"type":"Str","value":"前缀编码：没有一个编码是另一个编码的前缀的编码","loc":{"start":{"line":33,"column":2},"end":{"line":33,"column":25}},"range":[470,493],"raw":"前缀编码：没有一个编码是另一个编码的前缀的编码"}],"loc":{"start":{"line":33,"column":2},"end":{"line":33,"column":25}},"range":[470,493],"raw":"前缀编码：没有一个编码是另一个编码的前缀的编码"},{"type":"Paragraph","children":[{"type":"Str","value":"使用前缀编码作为可变长度编码不会产生歧义","loc":{"start":{"line":35,"column":2},"end":{"line":35,"column":22}},"range":[498,518],"raw":"使用前缀编码作为可变长度编码不会产生歧义"}],"loc":{"start":{"line":35,"column":2},"end":{"line":35,"column":22}},"range":[498,518],"raw":"使用前缀编码作为可变长度编码不会产生歧义"}],"loc":{"start":{"line":33,"column":0},"end":{"line":35,"column":22}},"range":[468,518],"raw":"> 前缀编码：没有一个编码是另一个编码的前缀的编码\n>\n> 使用前缀编码作为可变长度编码不会产生歧义"},{"type":"Paragraph","children":[{"type":"Image","title":null,"url":"https://i.loli.net/2020/07/30/ZjbBkK5corQElem.png","alt":"quicker_2616610f-80a9-4298-86cd-7141f22bc132.png","loc":{"start":{"line":37,"column":0},"end":{"line":37,"column":102}},"range":[520,622],"raw":"![quicker_2616610f-80a9-4298-86cd-7141f22bc132.png](https://i.loli.net/2020/07/30/ZjbBkK5corQElem.png)"}],"loc":{"start":{"line":37,"column":0},"end":{"line":37,"column":102}},"range":[520,622],"raw":"![quicker_2616610f-80a9-4298-86cd-7141f22bc132.png](https://i.loli.net/2020/07/30/ZjbBkK5corQElem.png)"}],"loc":{"start":{"line":1,"column":0},"end":{"line":38,"column":0}},"range":[0,623],"raw":"---\ntags: ['数据结构','树']\n---\n\n# 赫夫曼树及其应用\n\n> 路径长度：路径上所经历的边的个数\n>\n> 结点的权：结点被赋予的数值\n>\n> 树的带权路径长度（WPL）：树的所有叶节点的带权路径长度之和\n>\n> $$WPL=\\sum_{i=0}^{n}{w_{i}l_{i}}$$\n\n赫夫曼树（最优二叉树）：含有n个带权叶子结点的带权路径长度最小的二叉树。\n\n## 赫夫曼树的构造方法\n\n- 将n个带权叶子结点看作只有一个根结点的二叉树，构成森林F：\n- 生成一个新结点，并从F中寻找两个权值最小的树作为其左右子树，且新结点的权值为二者权值之和\n- 将新生成的结点加入到F中，并从F中删除这两棵树\n- 重复上面两步，直到森林F中只有一棵树，就可得到赫夫曼树\n\n构造赫夫曼树的特点：\n\n- 初始结点都会成为叶子结点\n- 结点的权值越大距离根结点越近，权值越小距离根结点越远\n- 赫夫曼树中所有结点的度都大于1\n- n个叶子结点的赫夫曼树的结点数为2n-1，度为2的结点数为n-1\n\n## 赫夫曼树解决前缀编码的方法\n\n> 前缀编码：没有一个编码是另一个编码的前缀的编码\n>\n> 使用前缀编码作为可变长度编码不会产生歧义\n\n![quicker_2616610f-80a9-4298-86cd-7141f22bc132.png](https://i.loli.net/2020/07/30/ZjbBkK5corQElem.png)\n"},"catalogue":{"title":"2020-07-29-赫夫曼树及其应用","json-path":"2020-07-29-赫夫曼树及其应用.json","mdate":"2022-08-30T14:19:31.449Z","tags":["数据结构","树"]}}