{"ast":{"type":"Document","children":[{"type":"Yaml","value":"title: '虚拟内存——请求分页存储管理'\ntags: ['操作系统','虚拟内存','内存']","loc":{"start":{"line":1,"column":0},"end":{"line":4,"column":3}},"range":[0,58],"raw":"---\ntitle: '虚拟内存——请求分页存储管理'\ntags: ['操作系统','虚拟内存','内存']\n---"},{"type":"Header","depth":1,"children":[{"type":"Str","value":"虚拟内存——请求分页存储管理","loc":{"start":{"line":5,"column":2},"end":{"line":5,"column":16}},"range":[61,75],"raw":"虚拟内存——请求分页存储管理"}],"loc":{"start":{"line":5,"column":0},"end":{"line":5,"column":16}},"range":[59,75],"raw":"# 虚拟内存——请求分页存储管理"},{"type":"Header","depth":2,"children":[{"type":"Str","value":"请求分页存储管理","loc":{"start":{"line":7,"column":3},"end":{"line":7,"column":11}},"range":[80,88],"raw":"请求分页存储管理"}],"loc":{"start":{"line":7,"column":0},"end":{"line":7,"column":11}},"range":[77,88],"raw":"## 请求分页存储管理"},{"type":"Paragraph","children":[{"type":"Str","value":"请求分页与基本分页的区别：","loc":{"start":{"line":9,"column":0},"end":{"line":9,"column":13}},"range":[90,103],"raw":"请求分页与基本分页的区别："}],"loc":{"start":{"line":9,"column":0},"end":{"line":9,"column":13}},"range":[90,103],"raw":"请求分页与基本分页的区别："},{"type":"Paragraph","children":[{"type":"Str","value":"在程序执行的过程中，","loc":{"start":{"line":11,"column":0},"end":{"line":11,"column":10}},"range":[105,115],"raw":"在程序执行的过程中，"}],"loc":{"start":{"line":11,"column":0},"end":{"line":11,"column":10}},"range":[105,115],"raw":"在程序执行的过程中，"},{"type":"Paragraph","children":[{"type":"Str","value":"请求调页：由操作系统负责将苏需要的信息从外存调入到内存，然后继续执行程序；","loc":{"start":{"line":13,"column":0},"end":{"line":13,"column":37}},"range":[117,154],"raw":"请求调页：由操作系统负责将苏需要的信息从外存调入到内存，然后继续执行程序；"}],"loc":{"start":{"line":13,"column":0},"end":{"line":13,"column":37}},"range":[117,154],"raw":"请求调页：由操作系统负责将苏需要的信息从外存调入到内存，然后继续执行程序；"},{"type":"Paragraph","children":[{"type":"Str","value":"页面置换：内存空间不够的时候，由操作系统将暂时用不到的信息换出到外存。","loc":{"start":{"line":15,"column":0},"end":{"line":15,"column":35}},"range":[156,191],"raw":"页面置换：内存空间不够的时候，由操作系统将暂时用不到的信息换出到外存。"}],"loc":{"start":{"line":15,"column":0},"end":{"line":15,"column":35}},"range":[156,191],"raw":"页面置换：内存空间不够的时候，由操作系统将暂时用不到的信息换出到外存。"},{"type":"Header","depth":3,"children":[{"type":"Str","value":"页表机制","loc":{"start":{"line":17,"column":4},"end":{"line":17,"column":8}},"range":[197,201],"raw":"页表机制"}],"loc":{"start":{"line":17,"column":0},"end":{"line":17,"column":8}},"range":[193,201],"raw":"### 页表机制"},{"type":"Paragraph","children":[{"type":"Str","value":"与基本分页相比，请求分页存储管理为了实现“请求调页”功能，操作系统需要知道：","loc":{"start":{"line":19,"column":0},"end":{"line":19,"column":38}},"range":[203,241],"raw":"与基本分页相比，请求分页存储管理为了实现“请求调页”功能，操作系统需要知道："}],"loc":{"start":{"line":19,"column":0},"end":{"line":19,"column":38}},"range":[203,241],"raw":"与基本分页相比，请求分页存储管理为了实现“请求调页”功能，操作系统需要知道："},{"type":"List","ordered":false,"start":null,"spread":false,"children":[{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"每个页面是否已经调入了内存","loc":{"start":{"line":21,"column":2},"end":{"line":21,"column":15}},"range":[245,258],"raw":"每个页面是否已经调入了内存"}],"loc":{"start":{"line":21,"column":2},"end":{"line":21,"column":15}},"range":[245,258],"raw":"每个页面是否已经调入了内存"}],"loc":{"start":{"line":21,"column":0},"end":{"line":21,"column":15}},"range":[243,258],"raw":"- 每个页面是否已经调入了内存"},{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"没有调入内存的页面在外存中的位置","loc":{"start":{"line":22,"column":2},"end":{"line":22,"column":18}},"range":[261,277],"raw":"没有调入内存的页面在外存中的位置"}],"loc":{"start":{"line":22,"column":2},"end":{"line":22,"column":18}},"range":[261,277],"raw":"没有调入内存的页面在外存中的位置"}],"loc":{"start":{"line":22,"column":0},"end":{"line":22,"column":18}},"range":[259,277],"raw":"- 没有调入内存的页面在外存中的位置"}],"loc":{"start":{"line":21,"column":0},"end":{"line":22,"column":18}},"range":[243,277],"raw":"- 每个页面是否已经调入了内存\n- 没有调入内存的页面在外存中的位置"},{"type":"Paragraph","children":[{"type":"Str","value":"为了实现“页面置换”功能，决定将那些页面置换，需要知道：","loc":{"start":{"line":24,"column":0},"end":{"line":24,"column":28}},"range":[279,307],"raw":"为了实现“页面置换”功能，决定将那些页面置换，需要知道："}],"loc":{"start":{"line":24,"column":0},"end":{"line":24,"column":28}},"range":[279,307],"raw":"为了实现“页面置换”功能，决定将那些页面置换，需要知道："},{"type":"List","ordered":false,"start":null,"spread":false,"children":[{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"页面是否被修改过","loc":{"start":{"line":26,"column":2},"end":{"line":26,"column":10}},"range":[311,319],"raw":"页面是否被修改过"}],"loc":{"start":{"line":26,"column":2},"end":{"line":26,"column":10}},"range":[311,319],"raw":"页面是否被修改过"}],"loc":{"start":{"line":26,"column":0},"end":{"line":26,"column":10}},"range":[309,319],"raw":"- 页面是否被修改过"}],"loc":{"start":{"line":26,"column":0},"end":{"line":26,"column":10}},"range":[309,319],"raw":"- 页面是否被修改过"},{"type":"Header","depth":4,"children":[{"type":"Str","value":"请求分页存储管理的页表","loc":{"start":{"line":28,"column":5},"end":{"line":28,"column":16}},"range":[326,337],"raw":"请求分页存储管理的页表"}],"loc":{"start":{"line":28,"column":0},"end":{"line":28,"column":16}},"range":[321,337],"raw":"#### 请求分页存储管理的页表"},{"type":"Paragraph","children":[{"type":"Image","title":null,"url":"https://i.loli.net/2020/08/17/rqN73oBKjXDdctP.png","alt":"quicker_9aa32b9d-efac-44fb-8837-74a558cb0a0a.png","loc":{"start":{"line":30,"column":0},"end":{"line":30,"column":102}},"range":[339,441],"raw":"![quicker_9aa32b9d-efac-44fb-8837-74a558cb0a0a.png](https://i.loli.net/2020/08/17/rqN73oBKjXDdctP.png)"}],"loc":{"start":{"line":30,"column":0},"end":{"line":30,"column":102}},"range":[339,441],"raw":"![quicker_9aa32b9d-efac-44fb-8837-74a558cb0a0a.png](https://i.loli.net/2020/08/17/rqN73oBKjXDdctP.png)"},{"type":"List","ordered":false,"start":null,"spread":false,"children":[{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"状态位：标记页面是否在内存中","loc":{"start":{"line":32,"column":2},"end":{"line":32,"column":16}},"range":[445,459],"raw":"状态位：标记页面是否在内存中"}],"loc":{"start":{"line":32,"column":2},"end":{"line":32,"column":16}},"range":[445,459],"raw":"状态位：标记页面是否在内存中"}],"loc":{"start":{"line":32,"column":0},"end":{"line":32,"column":16}},"range":[443,459],"raw":"- 状态位：标记页面是否在内存中"},{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"访问字段：记录最近该页面被访问的次数，供置换时参考","loc":{"start":{"line":33,"column":2},"end":{"line":33,"column":27}},"range":[462,487],"raw":"访问字段：记录最近该页面被访问的次数，供置换时参考"}],"loc":{"start":{"line":33,"column":2},"end":{"line":33,"column":27}},"range":[462,487],"raw":"访问字段：记录最近该页面被访问的次数，供置换时参考"}],"loc":{"start":{"line":33,"column":0},"end":{"line":33,"column":27}},"range":[460,487],"raw":"- 访问字段：记录最近该页面被访问的次数，供置换时参考"},{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"修改位：标记页面是否被修改过","loc":{"start":{"line":34,"column":2},"end":{"line":34,"column":16}},"range":[490,504],"raw":"修改位：标记页面是否被修改过"}],"loc":{"start":{"line":34,"column":2},"end":{"line":34,"column":16}},"range":[490,504],"raw":"修改位：标记页面是否被修改过"}],"loc":{"start":{"line":34,"column":0},"end":{"line":34,"column":16}},"range":[488,504],"raw":"- 修改位：标记页面是否被修改过"},{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"外存地址：各个页面在外存中的存储位置","loc":{"start":{"line":35,"column":2},"end":{"line":35,"column":20}},"range":[507,525],"raw":"外存地址：各个页面在外存中的存储位置"}],"loc":{"start":{"line":35,"column":2},"end":{"line":35,"column":20}},"range":[507,525],"raw":"外存地址：各个页面在外存中的存储位置"}],"loc":{"start":{"line":35,"column":0},"end":{"line":35,"column":20}},"range":[505,525],"raw":"- 外存地址：各个页面在外存中的存储位置"}],"loc":{"start":{"line":32,"column":0},"end":{"line":35,"column":20}},"range":[443,525],"raw":"- 状态位：标记页面是否在内存中\n- 访问字段：记录最近该页面被访问的次数，供置换时参考\n- 修改位：标记页面是否被修改过\n- 外存地址：各个页面在外存中的存储位置"},{"type":"Header","depth":3,"children":[{"type":"Str","value":"缺页中断机构","loc":{"start":{"line":37,"column":4},"end":{"line":37,"column":10}},"range":[531,537],"raw":"缺页中断机构"}],"loc":{"start":{"line":37,"column":0},"end":{"line":37,"column":10}},"range":[527,537],"raw":"### 缺页中断机构"},{"type":"Paragraph","children":[{"type":"Str","value":"缺页中断属于","loc":{"start":{"line":39,"column":0},"end":{"line":39,"column":6}},"range":[539,545],"raw":"缺页中断属于"},{"type":"Strong","children":[{"type":"Str","value":"内中断中的故障(falut)","loc":{"start":{"line":39,"column":8},"end":{"line":39,"column":22}},"range":[547,561],"raw":"内中断中的故障(falut)"}],"loc":{"start":{"line":39,"column":6},"end":{"line":39,"column":24}},"range":[545,563],"raw":"**内中断中的故障(falut)**"}],"loc":{"start":{"line":39,"column":0},"end":{"line":39,"column":24}},"range":[539,563],"raw":"缺页中断属于**内中断中的故障(falut)**"},{"type":"Paragraph","children":[{"type":"Str","value":"在请求分页系统中，当要访问的页面不在内存中的时候，会产生一个","loc":{"start":{"line":41,"column":0},"end":{"line":41,"column":30}},"range":[565,595],"raw":"在请求分页系统中，当要访问的页面不在内存中的时候，会产生一个"},{"type":"Strong","children":[{"type":"Str","value":"缺页中断信号","loc":{"start":{"line":41,"column":32},"end":{"line":41,"column":38}},"range":[597,603],"raw":"缺页中断信号"}],"loc":{"start":{"line":41,"column":30},"end":{"line":41,"column":40}},"range":[595,605],"raw":"**缺页中断信号**"},{"type":"Str","value":"，然后由操作系统的缺页中断处理程序处理中断。","loc":{"start":{"line":41,"column":40},"end":{"line":41,"column":62}},"range":[605,627],"raw":"，然后由操作系统的缺页中断处理程序处理中断。"}],"loc":{"start":{"line":41,"column":0},"end":{"line":41,"column":62}},"range":[565,627],"raw":"在请求分页系统中，当要访问的页面不在内存中的时候，会产生一个**缺页中断信号**，然后由操作系统的缺页中断处理程序处理中断。"},{"type":"Paragraph","children":[{"type":"Str","value":"操作系统缺页中断处理程序处理时，缺页的进程进入组赛状态，调页完成后将其唤醒，放回就绪队列。","loc":{"start":{"line":43,"column":0},"end":{"line":43,"column":45}},"range":[629,674],"raw":"操作系统缺页中断处理程序处理时，缺页的进程进入组赛状态，调页完成后将其唤醒，放回就绪队列。"}],"loc":{"start":{"line":43,"column":0},"end":{"line":43,"column":45}},"range":[629,674],"raw":"操作系统缺页中断处理程序处理时，缺页的进程进入组赛状态，调页完成后将其唤醒，放回就绪队列。"},{"type":"Paragraph","children":[{"type":"Str","value":"如果此时内存中有空闲的块，位进程分配一个空闲的块，将所缺的页面装入该块，并修改页表中对应的页表项；","loc":{"start":{"line":45,"column":0},"end":{"line":45,"column":49}},"range":[676,725],"raw":"如果此时内存中有空闲的块，位进程分配一个空闲的块，将所缺的页面装入该块，并修改页表中对应的页表项；"}],"loc":{"start":{"line":45,"column":0},"end":{"line":45,"column":49}},"range":[676,725],"raw":"如果此时内存中有空闲的块，位进程分配一个空闲的块，将所缺的页面装入该块，并修改页表中对应的页表项；"},{"type":"Paragraph","children":[{"type":"Str","value":"如果此时内存中没有空闲的块，由置换算法选择一个页面置换到外存中，将调入的页面装到被置换的页面处，修改页表中对应的项。","loc":{"start":{"line":47,"column":0},"end":{"line":47,"column":58}},"range":[727,785],"raw":"如果此时内存中没有空闲的块，由置换算法选择一个页面置换到外存中，将调入的页面装到被置换的页面处，修改页表中对应的项。"}],"loc":{"start":{"line":47,"column":0},"end":{"line":47,"column":58}},"range":[727,785],"raw":"如果此时内存中没有空闲的块，由置换算法选择一个页面置换到外存中，将调入的页面装到被置换的页面处，修改页表中对应的项。"},{"type":"Header","depth":3,"children":[{"type":"Str","value":"地址变换机构","loc":{"start":{"line":49,"column":4},"end":{"line":49,"column":10}},"range":[791,797],"raw":"地址变换机构"}],"loc":{"start":{"line":49,"column":0},"end":{"line":49,"column":10}},"range":[787,797],"raw":"### 地址变换机构"},{"type":"Paragraph","children":[{"type":"Str","value":"与基础分页相比，请求分页存储管理的地址转换增加了如下的三个步骤：","loc":{"start":{"line":51,"column":0},"end":{"line":51,"column":32}},"range":[799,831],"raw":"与基础分页相比，请求分页存储管理的地址转换增加了如下的三个步骤："}],"loc":{"start":{"line":51,"column":0},"end":{"line":51,"column":32}},"range":[799,831],"raw":"与基础分页相比，请求分页存储管理的地址转换增加了如下的三个步骤："},{"type":"List","ordered":true,"start":1,"spread":false,"children":[{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"请求调页：查到页表项时需要根据其是否在内存中来决定是否要请求调页","loc":{"start":{"line":53,"column":3},"end":{"line":53,"column":35}},"range":[836,868],"raw":"请求调页：查到页表项时需要根据其是否在内存中来决定是否要请求调页"}],"loc":{"start":{"line":53,"column":3},"end":{"line":53,"column":35}},"range":[836,868],"raw":"请求调页：查到页表项时需要根据其是否在内存中来决定是否要请求调页"}],"loc":{"start":{"line":53,"column":0},"end":{"line":53,"column":35}},"range":[833,868],"raw":"1. 请求调页：查到页表项时需要根据其是否在内存中来决定是否要请求调页"},{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"页面置换：需要调入页面时，没有空闲内存块时进行","loc":{"start":{"line":54,"column":3},"end":{"line":54,"column":26}},"range":[872,895],"raw":"页面置换：需要调入页面时，没有空闲内存块时进行"}],"loc":{"start":{"line":54,"column":3},"end":{"line":54,"column":26}},"range":[872,895],"raw":"页面置换：需要调入页面时，没有空闲内存块时进行"}],"loc":{"start":{"line":54,"column":0},"end":{"line":54,"column":26}},"range":[869,895],"raw":"2. 页面置换：需要调入页面时，没有空闲内存块时进行"},{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"修改请求页表中的表项","loc":{"start":{"line":55,"column":3},"end":{"line":55,"column":13}},"range":[899,909],"raw":"修改请求页表中的表项"}],"loc":{"start":{"line":55,"column":3},"end":{"line":55,"column":13}},"range":[899,909],"raw":"修改请求页表中的表项"}],"loc":{"start":{"line":55,"column":0},"end":{"line":55,"column":13}},"range":[896,909],"raw":"3. 修改请求页表中的表项"}],"loc":{"start":{"line":53,"column":0},"end":{"line":55,"column":13}},"range":[833,909],"raw":"1. 请求调页：查到页表项时需要根据其是否在内存中来决定是否要请求调页\n2. 页面置换：需要调入页面时，没有空闲内存块时进行\n3. 修改请求页表中的表项"},{"type":"Header","depth":2,"children":[{"type":"Str","value":"页面置换算法","loc":{"start":{"line":57,"column":3},"end":{"line":57,"column":9}},"range":[914,920],"raw":"页面置换算法"}],"loc":{"start":{"line":57,"column":0},"end":{"line":57,"column":9}},"range":[911,920],"raw":"## 页面置换算法"},{"type":"Header","depth":3,"children":[{"type":"Str","value":"最佳置换（OPT，Optional）","loc":{"start":{"line":59,"column":4},"end":{"line":59,"column":22}},"range":[926,944],"raw":"最佳置换（OPT，Optional）"}],"loc":{"start":{"line":59,"column":0},"end":{"line":59,"column":22}},"range":[922,944],"raw":"### 最佳置换（OPT，Optional）"},{"type":"Paragraph","children":[{"type":"Str","value":"每次选择淘汰的页面是以后永不使用，或者","loc":{"start":{"line":61,"column":0},"end":{"line":61,"column":19}},"range":[946,965],"raw":"每次选择淘汰的页面是以后永不使用，或者"},{"type":"Strong","children":[{"type":"Str","value":"长时间不会再被访问的页面","loc":{"start":{"line":61,"column":21},"end":{"line":61,"column":33}},"range":[967,979],"raw":"长时间不会再被访问的页面"}],"loc":{"start":{"line":61,"column":19},"end":{"line":61,"column":35}},"range":[965,981],"raw":"**长时间不会再被访问的页面**"},{"type":"Str","value":"，这样可以保证最低的缺页率。","loc":{"start":{"line":61,"column":35},"end":{"line":61,"column":49}},"range":[981,995],"raw":"，这样可以保证最低的缺页率。"}],"loc":{"start":{"line":61,"column":0},"end":{"line":61,"column":49}},"range":[946,995],"raw":"每次选择淘汰的页面是以后永不使用，或者**长时间不会再被访问的页面**，这样可以保证最低的缺页率。"},{"type":"BlockQuote","children":[{"type":"Paragraph","children":[{"type":"Strong","children":[{"type":"Str","value":"缺页率 = 缺页中断的次数/访问页面的次数","loc":{"start":{"line":63,"column":4},"end":{"line":63,"column":25}},"range":[1001,1022],"raw":"缺页率 = 缺页中断的次数/访问页面的次数"}],"loc":{"start":{"line":63,"column":2},"end":{"line":63,"column":27}},"range":[999,1024],"raw":"**缺页率 = 缺页中断的次数/访问页面的次数**"}],"loc":{"start":{"line":63,"column":2},"end":{"line":63,"column":27}},"range":[999,1024],"raw":"**缺页率 = 缺页中断的次数/访问页面的次数**"}],"loc":{"start":{"line":63,"column":0},"end":{"line":63,"column":27}},"range":[997,1024],"raw":"> **缺页率 = 缺页中断的次数/访问页面的次数**"},{"type":"Paragraph","children":[{"type":"Str","value":"最佳置换算法可以保证最低的缺页率，但是实际上，只有在进程执行的过程中才能知道接下来会访问到的是哪个页面，所以操作系统","loc":{"start":{"line":65,"column":0},"end":{"line":65,"column":58}},"range":[1026,1084],"raw":"最佳置换算法可以保证最低的缺页率，但是实际上，只有在进程执行的过程中才能知道接下来会访问到的是哪个页面，所以操作系统"},{"type":"Strong","children":[{"type":"Str","value":"无法提前预判页面的访问序列","loc":{"start":{"line":65,"column":60},"end":{"line":65,"column":73}},"range":[1086,1099],"raw":"无法提前预判页面的访问序列"}],"loc":{"start":{"line":65,"column":58},"end":{"line":65,"column":75}},"range":[1084,1101],"raw":"**无法提前预判页面的访问序列**"},{"type":"Str","value":"。所以，","loc":{"start":{"line":65,"column":75},"end":{"line":65,"column":79}},"range":[1101,1105],"raw":"。所以，"},{"type":"Strong","children":[{"type":"Str","value":"最佳置换算法是无法实现的","loc":{"start":{"line":65,"column":81},"end":{"line":65,"column":93}},"range":[1107,1119],"raw":"最佳置换算法是无法实现的"}],"loc":{"start":{"line":65,"column":79},"end":{"line":65,"column":95}},"range":[1105,1121],"raw":"**最佳置换算法是无法实现的**"},{"type":"Str","value":"。","loc":{"start":{"line":65,"column":95},"end":{"line":65,"column":96}},"range":[1121,1122],"raw":"。"}],"loc":{"start":{"line":65,"column":0},"end":{"line":65,"column":96}},"range":[1026,1122],"raw":"最佳置换算法可以保证最低的缺页率，但是实际上，只有在进程执行的过程中才能知道接下来会访问到的是哪个页面，所以操作系统**无法提前预判页面的访问序列**。所以，**最佳置换算法是无法实现的**。"},{"type":"Header","depth":3,"children":[{"type":"Str","value":"先进先出置换算法（FIFO）","loc":{"start":{"line":67,"column":4},"end":{"line":67,"column":18}},"range":[1128,1142],"raw":"先进先出置换算法（FIFO）"}],"loc":{"start":{"line":67,"column":0},"end":{"line":67,"column":18}},"range":[1124,1142],"raw":"### 先进先出置换算法（FIFO）"},{"type":"Paragraph","children":[{"type":"Str","value":"每次选择淘汰的页面是","loc":{"start":{"line":69,"column":0},"end":{"line":69,"column":10}},"range":[1144,1154],"raw":"每次选择淘汰的页面是"},{"type":"Strong","children":[{"type":"Str","value":"最早进入内存","loc":{"start":{"line":69,"column":12},"end":{"line":69,"column":18}},"range":[1156,1162],"raw":"最早进入内存"}],"loc":{"start":{"line":69,"column":10},"end":{"line":69,"column":20}},"range":[1154,1164],"raw":"**最早进入内存**"},{"type":"Str","value":"的页面","loc":{"start":{"line":69,"column":20},"end":{"line":69,"column":23}},"range":[1164,1167],"raw":"的页面"}],"loc":{"start":{"line":69,"column":0},"end":{"line":69,"column":23}},"range":[1144,1167],"raw":"每次选择淘汰的页面是**最早进入内存**的页面"},{"type":"Paragraph","children":[{"type":"Str","value":"实现方法：把调入内存的页面根据调入的先后顺序排成一个队列，需要置换页面的时候，选择队头的页面即可。","loc":{"start":{"line":71,"column":0},"end":{"line":71,"column":49}},"range":[1169,1218],"raw":"实现方法：把调入内存的页面根据调入的先后顺序排成一个队列，需要置换页面的时候，选择队头的页面即可。"},{"type":"Strong","children":[{"type":"Str","value":"队列的长度取决于系统为进程分配的内存块的数目","loc":{"start":{"line":71,"column":51},"end":{"line":71,"column":73}},"range":[1220,1242],"raw":"队列的长度取决于系统为进程分配的内存块的数目"}],"loc":{"start":{"line":71,"column":49},"end":{"line":71,"column":75}},"range":[1218,1244],"raw":"**队列的长度取决于系统为进程分配的内存块的数目**"},{"type":"Str","value":"。","loc":{"start":{"line":71,"column":75},"end":{"line":71,"column":76}},"range":[1244,1245],"raw":"。"}],"loc":{"start":{"line":71,"column":0},"end":{"line":71,"column":76}},"range":[1169,1245],"raw":"实现方法：把调入内存的页面根据调入的先后顺序排成一个队列，需要置换页面的时候，选择队头的页面即可。**队列的长度取决于系统为进程分配的内存块的数目**。"},{"type":"BlockQuote","children":[{"type":"Paragraph","children":[{"type":"Str","value":"Belady异常：为进程分配的内存块数增多时，缺页的次数不减反增的现象称为","loc":{"start":{"line":73,"column":2},"end":{"line":73,"column":39}},"range":[1249,1286],"raw":"Belady异常：为进程分配的内存块数增多时，缺页的次数不减反增的现象称为"},{"type":"Strong","children":[{"type":"Str","value":"Belady异常","loc":{"start":{"line":73,"column":41},"end":{"line":73,"column":49}},"range":[1288,1296],"raw":"Belady异常"}],"loc":{"start":{"line":73,"column":39},"end":{"line":73,"column":51}},"range":[1286,1298],"raw":"**Belady异常**"}],"loc":{"start":{"line":73,"column":2},"end":{"line":73,"column":51}},"range":[1249,1298],"raw":"Belady异常：为进程分配的内存块数增多时，缺页的次数不减反增的现象称为**Belady异常**"}],"loc":{"start":{"line":73,"column":0},"end":{"line":73,"column":51}},"range":[1247,1298],"raw":"> Belady异常：为进程分配的内存块数增多时，缺页的次数不减反增的现象称为**Belady异常**"},{"type":"Paragraph","children":[{"type":"Str","value":"只有FIFO算法会产生Belady异常。","loc":{"start":{"line":75,"column":0},"end":{"line":75,"column":20}},"range":[1300,1320],"raw":"只有FIFO算法会产生Belady异常。"}],"loc":{"start":{"line":75,"column":0},"end":{"line":75,"column":20}},"range":[1300,1320],"raw":"只有FIFO算法会产生Belady异常。"},{"type":"Paragraph","children":[{"type":"Str","value":"优点：实现简单","loc":{"start":{"line":77,"column":0},"end":{"line":77,"column":7}},"range":[1322,1329],"raw":"优点：实现简单"}],"loc":{"start":{"line":77,"column":0},"end":{"line":77,"column":7}},"range":[1322,1329],"raw":"优点：实现简单"},{"type":"Paragraph","children":[{"type":"Str","value":"缺点：算法与进程实际运行规律不适应，先进入的页面可能经常被访问，算法的性能差。","loc":{"start":{"line":79,"column":0},"end":{"line":79,"column":39}},"range":[1331,1370],"raw":"缺点：算法与进程实际运行规律不适应，先进入的页面可能经常被访问，算法的性能差。"}],"loc":{"start":{"line":79,"column":0},"end":{"line":79,"column":39}},"range":[1331,1370],"raw":"缺点：算法与进程实际运行规律不适应，先进入的页面可能经常被访问，算法的性能差。"},{"type":"Header","depth":3,"children":[{"type":"Str","value":"最近最久未使用置换算法（LRU, Latest Recently Used）","loc":{"start":{"line":81,"column":4},"end":{"line":81,"column":42}},"range":[1376,1414],"raw":"最近最久未使用置换算法（LRU, Latest Recently Used）"}],"loc":{"start":{"line":81,"column":0},"end":{"line":81,"column":42}},"range":[1372,1414],"raw":"### 最近最久未使用置换算法（LRU, Latest Recently Used）"},{"type":"Paragraph","children":[{"type":"Str","value":"每次淘汰的页面时最近最久未使用的页面。","loc":{"start":{"line":83,"column":0},"end":{"line":83,"column":19}},"range":[1416,1435],"raw":"每次淘汰的页面时最近最久未使用的页面。"}],"loc":{"start":{"line":83,"column":0},"end":{"line":83,"column":19}},"range":[1416,1435],"raw":"每次淘汰的页面时最近最久未使用的页面。"},{"type":"Paragraph","children":[{"type":"Str","value":"实现方法：在每个页面对应的页表项中，用访问字段记录上次被访问以来所经历的时间t。当需要淘汰一个页面的时候，选择所有的页表项中t值最大的，即最近最久未使用的页面。","loc":{"start":{"line":85,"column":0},"end":{"line":85,"column":80}},"range":[1437,1517],"raw":"实现方法：在每个页面对应的页表项中，用访问字段记录上次被访问以来所经历的时间t。当需要淘汰一个页面的时候，选择所有的页表项中t值最大的，即最近最久未使用的页面。"}],"loc":{"start":{"line":85,"column":0},"end":{"line":85,"column":80}},"range":[1437,1517],"raw":"实现方法：在每个页面对应的页表项中，用访问字段记录上次被访问以来所经历的时间t。当需要淘汰一个页面的时候，选择所有的页表项中t值最大的，即最近最久未使用的页面。"},{"type":"Paragraph","children":[{"type":"Str","value":"优点：算法性能好","loc":{"start":{"line":87,"column":0},"end":{"line":87,"column":8}},"range":[1519,1527],"raw":"优点：算法性能好"}],"loc":{"start":{"line":87,"column":0},"end":{"line":87,"column":8}},"range":[1519,1527],"raw":"优点：算法性能好"},{"type":"Paragraph","children":[{"type":"Str","value":"缺点：实现需要专门的硬件支持，实现的难度大、开销大","loc":{"start":{"line":89,"column":0},"end":{"line":89,"column":25}},"range":[1529,1554],"raw":"缺点：实现需要专门的硬件支持，实现的难度大、开销大"}],"loc":{"start":{"line":89,"column":0},"end":{"line":89,"column":25}},"range":[1529,1554],"raw":"缺点：实现需要专门的硬件支持，实现的难度大、开销大"},{"type":"Header","depth":3,"children":[{"type":"Str","value":"时钟置换算法（CLOCK）","loc":{"start":{"line":91,"column":4},"end":{"line":91,"column":17}},"range":[1560,1573],"raw":"时钟置换算法（CLOCK）"}],"loc":{"start":{"line":91,"column":0},"end":{"line":91,"column":17}},"range":[1556,1573],"raw":"### 时钟置换算法（CLOCK）"},{"type":"Paragraph","children":[{"type":"Str","value":"时钟置换算法是性能和开销比较均衡的算法，也被称为","loc":{"start":{"line":93,"column":0},"end":{"line":93,"column":24}},"range":[1575,1599],"raw":"时钟置换算法是性能和开销比较均衡的算法，也被称为"},{"type":"Strong","children":[{"type":"Str","value":"最近未使用算法(NRU, Not Recently Used)","loc":{"start":{"line":93,"column":26},"end":{"line":93,"column":57}},"range":[1601,1632],"raw":"最近未使用算法(NRU, Not Recently Used)"}],"loc":{"start":{"line":93,"column":24},"end":{"line":93,"column":59}},"range":[1599,1634],"raw":"**最近未使用算法(NRU, Not Recently Used)**"},{"type":"Str","value":"。","loc":{"start":{"line":93,"column":59},"end":{"line":93,"column":60}},"range":[1634,1635],"raw":"。"}],"loc":{"start":{"line":93,"column":0},"end":{"line":93,"column":60}},"range":[1575,1635],"raw":"时钟置换算法是性能和开销比较均衡的算法，也被称为**最近未使用算法(NRU, Not Recently Used)**。"},{"type":"Header","depth":4,"children":[{"type":"Str","value":"简单时钟置换算法","loc":{"start":{"line":95,"column":5},"end":{"line":95,"column":13}},"range":[1642,1650],"raw":"简单时钟置换算法"}],"loc":{"start":{"line":95,"column":0},"end":{"line":95,"column":13}},"range":[1637,1650],"raw":"#### 简单时钟置换算法"},{"type":"Paragraph","children":[{"type":"Str","value":"为每个页面设置一个访问位，将内存中的页面通过链接指针链接成一个循环队列。页面被访问的时候，其访问位 置为1.当需要淘汰一个页面的时候，检查其访问位，如果是0就将这个页面置换出；如果是1就将其置为0，暂不换出，继续检查下一个页面，若第一轮扫描中所有的页面都是1，则进行第二轮扫描（一定会访问到访问位为0的页面），将第一个访问位位0的页面置换出。简单时钟置换算法淘汰页面","loc":{"start":{"line":97,"column":0},"end":{"line":97,"column":183}},"range":[1652,1835],"raw":"为每个页面设置一个访问位，将内存中的页面通过链接指针链接成一个循环队列。页面被访问的时候，其访问位 置为1.当需要淘汰一个页面的时候，检查其访问位，如果是0就将这个页面置换出；如果是1就将其置为0，暂不换出，继续检查下一个页面，若第一轮扫描中所有的页面都是1，则进行第二轮扫描（一定会访问到访问位为0的页面），将第一个访问位位0的页面置换出。简单时钟置换算法淘汰页面"},{"type":"Strong","children":[{"type":"Str","value":"最多会经历两次扫描","loc":{"start":{"line":97,"column":185},"end":{"line":97,"column":194}},"range":[1837,1846],"raw":"最多会经历两次扫描"}],"loc":{"start":{"line":97,"column":183},"end":{"line":97,"column":196}},"range":[1835,1848],"raw":"**最多会经历两次扫描**"},{"type":"Str","value":"。","loc":{"start":{"line":97,"column":196},"end":{"line":97,"column":197}},"range":[1848,1849],"raw":"。"}],"loc":{"start":{"line":97,"column":0},"end":{"line":97,"column":197}},"range":[1652,1849],"raw":"为每个页面设置一个访问位，将内存中的页面通过链接指针链接成一个循环队列。页面被访问的时候，其访问位 置为1.当需要淘汰一个页面的时候，检查其访问位，如果是0就将这个页面置换出；如果是1就将其置为0，暂不换出，继续检查下一个页面，若第一轮扫描中所有的页面都是1，则进行第二轮扫描（一定会访问到访问位为0的页面），将第一个访问位位0的页面置换出。简单时钟置换算法淘汰页面**最多会经历两次扫描**。"},{"type":"Header","depth":4,"children":[{"type":"Str","value":"改进型时钟置换算法","loc":{"start":{"line":99,"column":5},"end":{"line":99,"column":14}},"range":[1856,1865],"raw":"改进型时钟置换算法"}],"loc":{"start":{"line":99,"column":0},"end":{"line":99,"column":14}},"range":[1851,1865],"raw":"#### 改进型时钟置换算法"},{"type":"Paragraph","children":[{"type":"Strong","children":[{"type":"Str","value":"算法思想","loc":{"start":{"line":101,"column":2},"end":{"line":101,"column":6}},"range":[1869,1873],"raw":"算法思想"}],"loc":{"start":{"line":101,"column":0},"end":{"line":101,"column":8}},"range":[1867,1875],"raw":"**算法思想**"},{"type":"Str","value":"：考虑一个页面最近有没有被访问过之外,操作系统还考虑页面有没有被修改过。在其他条件都相同时,应优先淘汰没有修改过的页面,避免I/O操作。这就是改进型的时钟置换算法的思想。\n修改位=0,表示页面没有被修改过:修改位=1,表示页面被修改过。","loc":{"start":{"line":101,"column":8},"end":{"line":102,"column":32}},"range":[1875,1993],"raw":"：考虑一个页面最近有没有被访问过之外,操作系统还考虑页面有没有被修改过。在其他条件都相同时,应优先淘汰没有修改过的页面,避免I/O操作。这就是改进型的时钟置换算法的思想。\n修改位=0,表示页面没有被修改过:修改位=1,表示页面被修改过。"}],"loc":{"start":{"line":101,"column":0},"end":{"line":102,"column":32}},"range":[1867,1993],"raw":"**算法思想**：考虑一个页面最近有没有被访问过之外,操作系统还考虑页面有没有被修改过。在其他条件都相同时,应优先淘汰没有修改过的页面,避免I/O操作。这就是改进型的时钟置换算法的思想。\n修改位=0,表示页面没有被修改过:修改位=1,表示页面被修改过。"},{"type":"Paragraph","children":[{"type":"Strong","children":[{"type":"Str","value":"算法规则","loc":{"start":{"line":104,"column":2},"end":{"line":104,"column":6}},"range":[1997,2001],"raw":"算法规则"}],"loc":{"start":{"line":104,"column":0},"end":{"line":104,"column":8}},"range":[1995,2003],"raw":"**算法规则**"},{"type":"Str","value":"：将所有可能被置换的页面排成一个循环队列","loc":{"start":{"line":104,"column":8},"end":{"line":104,"column":28}},"range":[2003,2023],"raw":"：将所有可能被置换的页面排成一个循环队列"}],"loc":{"start":{"line":104,"column":0},"end":{"line":104,"column":28}},"range":[1995,2023],"raw":"**算法规则**：将所有可能被置换的页面排成一个循环队列"},{"type":"Paragraph","children":[{"type":"Str","value":"第一轮：从当前位置开始扫描到第一个(0,0)【没有被修改过，也没有被访问过的页面】的帧用于替换，本轮扫描不修改任何标志位","loc":{"start":{"line":106,"column":0},"end":{"line":106,"column":60}},"range":[2025,2085],"raw":"第一轮：从当前位置开始扫描到第一个(0,0)【没有被修改过，也没有被访问过的页面】的帧用于替换，本轮扫描不修改任何标志位"}],"loc":{"start":{"line":106,"column":0},"end":{"line":106,"column":60}},"range":[2025,2085],"raw":"第一轮：从当前位置开始扫描到第一个(0,0)【没有被修改过，也没有被访问过的页面】的帧用于替换，本轮扫描不修改任何标志位"},{"type":"Paragraph","children":[{"type":"Str","value":"第二轮：如果第一轮扫描失败，重新扫描，查找第一个(0,1)【没有被访问过，但是被修改过的页面】的帧用于替换，本轮扫描将所有扫描过的帧的访问位设为0","loc":{"start":{"line":108,"column":0},"end":{"line":108,"column":73}},"range":[2087,2160],"raw":"第二轮：如果第一轮扫描失败，重新扫描，查找第一个(0,1)【没有被访问过，但是被修改过的页面】的帧用于替换，本轮扫描将所有扫描过的帧的访问位设为0"}],"loc":{"start":{"line":108,"column":0},"end":{"line":108,"column":73}},"range":[2087,2160],"raw":"第二轮：如果第一轮扫描失败，重新扫描，查找第一个(0,1)【没有被访问过，但是被修改过的页面】的帧用于替换，本轮扫描将所有扫描过的帧的访问位设为0"},{"type":"Paragraph","children":[{"type":"Str","value":"第三轮：如果第二轮扫描失败，重新扫描，查找第一个(0,0)【没有被修改过，也没有被访问过的页面】的帧用于替换，本轮扫描不修改任何标志位。","loc":{"start":{"line":110,"column":0},"end":{"line":110,"column":68}},"range":[2162,2230],"raw":"第三轮：如果第二轮扫描失败，重新扫描，查找第一个(0,0)【没有被修改过，也没有被访问过的页面】的帧用于替换，本轮扫描不修改任何标志位。"}],"loc":{"start":{"line":110,"column":0},"end":{"line":110,"column":68}},"range":[2162,2230],"raw":"第三轮：如果第二轮扫描失败，重新扫描，查找第一个(0,0)【没有被修改过，也没有被访问过的页面】的帧用于替换，本轮扫描不修改任何标志位。"},{"type":"Paragraph","children":[{"type":"Str","value":"第四轮：如果第三轮扫描失败，重新扫描，查找第一个(0,1)【没有被访问过，但是被修改过的页面】的帧用于替换。","loc":{"start":{"line":112,"column":0},"end":{"line":112,"column":54}},"range":[2232,2286],"raw":"第四轮：如果第三轮扫描失败，重新扫描，查找第一个(0,1)【没有被访问过，但是被修改过的页面】的帧用于替换。"}],"loc":{"start":{"line":112,"column":0},"end":{"line":112,"column":54}},"range":[2232,2286],"raw":"第四轮：如果第三轮扫描失败，重新扫描，查找第一个(0,1)【没有被访问过，但是被修改过的页面】的帧用于替换。"}],"loc":{"start":{"line":1,"column":0},"end":{"line":114,"column":0}},"range":[0,2288],"raw":"---\ntitle: '虚拟内存——请求分页存储管理'\ntags: ['操作系统','虚拟内存','内存']\n---\n# 虚拟内存——请求分页存储管理\n\n## 请求分页存储管理\n\n请求分页与基本分页的区别：\n\n在程序执行的过程中，\n\n请求调页：由操作系统负责将苏需要的信息从外存调入到内存，然后继续执行程序；\n\n页面置换：内存空间不够的时候，由操作系统将暂时用不到的信息换出到外存。\n\n### 页表机制\n\n与基本分页相比，请求分页存储管理为了实现“请求调页”功能，操作系统需要知道：\n\n- 每个页面是否已经调入了内存\n- 没有调入内存的页面在外存中的位置\n\n为了实现“页面置换”功能，决定将那些页面置换，需要知道：\n\n- 页面是否被修改过\n\n#### 请求分页存储管理的页表\n\n![quicker_9aa32b9d-efac-44fb-8837-74a558cb0a0a.png](https://i.loli.net/2020/08/17/rqN73oBKjXDdctP.png)\n\n- 状态位：标记页面是否在内存中\n- 访问字段：记录最近该页面被访问的次数，供置换时参考\n- 修改位：标记页面是否被修改过\n- 外存地址：各个页面在外存中的存储位置\n\n### 缺页中断机构\n\n缺页中断属于**内中断中的故障(falut)**\n\n在请求分页系统中，当要访问的页面不在内存中的时候，会产生一个**缺页中断信号**，然后由操作系统的缺页中断处理程序处理中断。\n\n操作系统缺页中断处理程序处理时，缺页的进程进入组赛状态，调页完成后将其唤醒，放回就绪队列。\n\n如果此时内存中有空闲的块，位进程分配一个空闲的块，将所缺的页面装入该块，并修改页表中对应的页表项；\n\n如果此时内存中没有空闲的块，由置换算法选择一个页面置换到外存中，将调入的页面装到被置换的页面处，修改页表中对应的项。\n\n### 地址变换机构\n\n与基础分页相比，请求分页存储管理的地址转换增加了如下的三个步骤：\n\n1. 请求调页：查到页表项时需要根据其是否在内存中来决定是否要请求调页\n2. 页面置换：需要调入页面时，没有空闲内存块时进行\n3. 修改请求页表中的表项\n\n## 页面置换算法\n\n### 最佳置换（OPT，Optional）\n\n每次选择淘汰的页面是以后永不使用，或者**长时间不会再被访问的页面**，这样可以保证最低的缺页率。\n\n> **缺页率 = 缺页中断的次数/访问页面的次数**\n\n最佳置换算法可以保证最低的缺页率，但是实际上，只有在进程执行的过程中才能知道接下来会访问到的是哪个页面，所以操作系统**无法提前预判页面的访问序列**。所以，**最佳置换算法是无法实现的**。\n\n### 先进先出置换算法（FIFO）\n\n每次选择淘汰的页面是**最早进入内存**的页面\n\n实现方法：把调入内存的页面根据调入的先后顺序排成一个队列，需要置换页面的时候，选择队头的页面即可。**队列的长度取决于系统为进程分配的内存块的数目**。\n\n> Belady异常：为进程分配的内存块数增多时，缺页的次数不减反增的现象称为**Belady异常**\n\n只有FIFO算法会产生Belady异常。\n\n优点：实现简单\n\n缺点：算法与进程实际运行规律不适应，先进入的页面可能经常被访问，算法的性能差。\n\n### 最近最久未使用置换算法（LRU, Latest Recently Used）\n\n每次淘汰的页面时最近最久未使用的页面。\n\n实现方法：在每个页面对应的页表项中，用访问字段记录上次被访问以来所经历的时间t。当需要淘汰一个页面的时候，选择所有的页表项中t值最大的，即最近最久未使用的页面。\n\n优点：算法性能好\n\n缺点：实现需要专门的硬件支持，实现的难度大、开销大\n\n### 时钟置换算法（CLOCK）\n\n时钟置换算法是性能和开销比较均衡的算法，也被称为**最近未使用算法(NRU, Not Recently Used)**。\n\n#### 简单时钟置换算法\n\n为每个页面设置一个访问位，将内存中的页面通过链接指针链接成一个循环队列。页面被访问的时候，其访问位 置为1.当需要淘汰一个页面的时候，检查其访问位，如果是0就将这个页面置换出；如果是1就将其置为0，暂不换出，继续检查下一个页面，若第一轮扫描中所有的页面都是1，则进行第二轮扫描（一定会访问到访问位为0的页面），将第一个访问位位0的页面置换出。简单时钟置换算法淘汰页面**最多会经历两次扫描**。\n\n#### 改进型时钟置换算法\n\n**算法思想**：考虑一个页面最近有没有被访问过之外,操作系统还考虑页面有没有被修改过。在其他条件都相同时,应优先淘汰没有修改过的页面,避免I/O操作。这就是改进型的时钟置换算法的思想。\n修改位=0,表示页面没有被修改过:修改位=1,表示页面被修改过。\n\n**算法规则**：将所有可能被置换的页面排成一个循环队列\n\n第一轮：从当前位置开始扫描到第一个(0,0)【没有被修改过，也没有被访问过的页面】的帧用于替换，本轮扫描不修改任何标志位\n\n第二轮：如果第一轮扫描失败，重新扫描，查找第一个(0,1)【没有被访问过，但是被修改过的页面】的帧用于替换，本轮扫描将所有扫描过的帧的访问位设为0\n\n第三轮：如果第二轮扫描失败，重新扫描，查找第一个(0,0)【没有被修改过，也没有被访问过的页面】的帧用于替换，本轮扫描不修改任何标志位。\n\n第四轮：如果第三轮扫描失败，重新扫描，查找第一个(0,1)【没有被访问过，但是被修改过的页面】的帧用于替换。\n\n"},"catalogue":{"title":"虚拟内存——请求分页存储管理","json-path":"2020-08-17-虚拟内存——请求分页存储管理.json","mdate":"2022-08-30T14:19:31.455Z","tags":["操作系统","虚拟内存","内存"]}}