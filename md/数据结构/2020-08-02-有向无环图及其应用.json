{"ast":{"type":"Document","children":[{"type":"Yaml","value":"title: '拓扑排序'\ntags: ['图','拓扑','数据结构']","loc":{"start":{"line":1,"column":0},"end":{"line":4,"column":3}},"range":[0,45],"raw":"﻿---\ntitle: '拓扑排序'\ntags: ['图','拓扑','数据结构']\n--","visible":false},{"type":"Header","depth":1,"children":[{"type":"Str","value":"有向无环图及其应用","loc":{"start":{"line":5,"column":2},"end":{"line":5,"column":11}},"range":[48,57],"raw":" 有向无环图及其应"}],"loc":{"start":{"line":5,"column":0},"end":{"line":5,"column":11}},"range":[46,57],"raw":"\n# 有向无环图及其应"},{"type":"Paragraph","children":[{"type":"Str","value":"没有回路的有向图被成为有向无环图(directed acyline graph)，简称DAG图，DAG图是一类特殊的有向图。","loc":{"start":{"line":7,"column":0},"end":{"line":7,"column":62}},"range":[59,121],"raw":"\n没有回路的有向图被成为有向无环图(directed acyline graph)，简称DAG图，DAG图是一类特殊的有向图"}],"loc":{"start":{"line":7,"column":0},"end":{"line":7,"column":62}},"range":[59,121],"raw":"\n没有回路的有向图被成为有向无环图(directed acyline graph)，简称DAG图，DAG图是一类特殊的有向图"},{"type":"Paragraph","children":[{"type":"Str","value":"可以通过使用深度优先搜索的方式来检查一个有向图内是否存在回路，如果在深度优先搜索的过程中遇到回边（指向已经访问过的顶点的边），则说明图中一定存在由回路。","loc":{"start":{"line":9,"column":0},"end":{"line":9,"column":76}},"range":[123,199],"raw":"\n可以通过使用深度优先搜索的方式来检查一个有向图内是否存在回路，如果在深度优先搜索的过程中遇到回边（指向已经访问过的顶点的边），则说明图中一定存在由回路"}],"loc":{"start":{"line":9,"column":0},"end":{"line":9,"column":76}},"range":[123,199],"raw":"\n可以通过使用深度优先搜索的方式来检查一个有向图内是否存在回路，如果在深度优先搜索的过程中遇到回边（指向已经访问过的顶点的边），则说明图中一定存在由回路"},{"type":"Header","depth":2,"children":[{"type":"Str","value":"拓扑排序(Topological Sort)","loc":{"start":{"line":11,"column":3},"end":{"line":11,"column":25}},"range":[204,226],"raw":" 拓扑排序(Topological Sort"}],"loc":{"start":{"line":11,"column":0},"end":{"line":11,"column":25}},"range":[201,226],"raw":"\n## 拓扑排序(Topological Sort"},{"type":"Paragraph","children":[{"type":"Str","value":"有向无环图不存在环的有向图,简称DAG图AOV网若用一个DAG图表示一个工程,其顶点表示活动,用有向边 ","loc":{"start":{"line":13,"column":0},"end":{"line":13,"column":52}},"range":[228,280],"raw":"\n有向无环图不存在环的有向图,简称DAG图AOV网若用一个DAG图表示一个工程,其顶点表示活动,用有向边"},{"type":"InlineMath","value":"<v_{i},v_{j}>","data":{"hName":"span","hProperties":{"className":["math","math-inline"]},"hChildren":[{"type":"Str","value":"<v_{i},v_{j}>"}]},"loc":{"start":{"line":13,"column":52},"end":{"line":13,"column":67}},"range":[280,295],"raw":" $<v_{i},v_{j}>"},{"type":"Str","value":" 表示活动ⅵ冼先于活动进行的传递关系,则将这种DAG称为顶点表示活动网络,记为AOV网。","loc":{"start":{"line":13,"column":67},"end":{"line":13,"column":111}},"range":[295,339],"raw":"$ 表示活动ⅵ冼先于活动进行的传递关系,则将这种DAG称为顶点表示活动网络,记为AOV网"}],"loc":{"start":{"line":13,"column":0},"end":{"line":13,"column":111}},"range":[228,339],"raw":"\n有向无环图不存在环的有向图,简称DAG图AOV网若用一个DAG图表示一个工程,其顶点表示活动,用有向边 $<v_{i},v_{j}>$ 表示活动ⅵ冼先于活动进行的传递关系,则将这种DAG称为顶点表示活动网络,记为AOV网"},{"type":"Paragraph","children":[{"type":"Str","value":"拓扑排序就是对DAG的排序，如果在DAG中存在一条顶点A到顶点B的路径，就将顶点B排在顶点A的后面。","loc":{"start":{"line":15,"column":0},"end":{"line":15,"column":50}},"range":[341,391],"raw":"\n拓扑排序就是对DAG的排序，如果在DAG中存在一条顶点A到顶点B的路径，就将顶点B排在顶点A的后面"}],"loc":{"start":{"line":15,"column":0},"end":{"line":15,"column":50}},"range":[341,391],"raw":"\n拓扑排序就是对DAG的排序，如果在DAG中存在一条顶点A到顶点B的路径，就将顶点B排在顶点A的后面"},{"type":"Paragraph","children":[{"type":"Str","value":"算法思想：","loc":{"start":{"line":17,"column":0},"end":{"line":17,"column":5}},"range":[393,398],"raw":"\n算法思想"}],"loc":{"start":{"line":17,"column":0},"end":{"line":17,"column":5}},"range":[393,398],"raw":"\n算法思想"},{"type":"List","ordered":false,"start":null,"spread":false,"children":[{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"从DAG中选择一个入度为0的顶点（如果有多个为0的说明拓扑排序不唯一），并输出","loc":{"start":{"line":19,"column":2},"end":{"line":19,"column":41}},"range":[402,441],"raw":" 从DAG中选择一个入度为0的顶点（如果有多个为0的说明拓扑排序不唯一），并输"}],"loc":{"start":{"line":19,"column":2},"end":{"line":19,"column":41}},"range":[402,441],"raw":" 从DAG中选择一个入度为0的顶点（如果有多个为0的说明拓扑排序不唯一），并输"}],"loc":{"start":{"line":19,"column":0},"end":{"line":19,"column":41}},"range":[400,441],"raw":"\n- 从DAG中选择一个入度为0的顶点（如果有多个为0的说明拓扑排序不唯一），并输"},{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"从DAG中删除所有以该节点为起点的有向边","loc":{"start":{"line":20,"column":2},"end":{"line":20,"column":22}},"range":[444,464],"raw":" 从DAG中删除所有以该节点为起点的有向"}],"loc":{"start":{"line":20,"column":2},"end":{"line":20,"column":22}},"range":[444,464],"raw":" 从DAG中删除所有以该节点为起点的有向"}],"loc":{"start":{"line":20,"column":0},"end":{"line":20,"column":22}},"range":[442,464],"raw":"\n- 从DAG中删除所有以该节点为起点的有向"},{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"重复上面的两个步骤，直到DAG为空，或者","loc":{"start":{"line":21,"column":2},"end":{"line":21,"column":22}},"range":[467,487],"raw":" 重复上面的两个步骤，直到DAG为空，或"},{"type":"Strong","children":[{"type":"Str","value":"图中没有无前驱的顶点为止","loc":{"start":{"line":21,"column":24},"end":{"line":21,"column":36}},"range":[489,501],"raw":"*图中没有无前驱的顶点为"}],"loc":{"start":{"line":21,"column":22},"end":{"line":21,"column":38}},"range":[487,503],"raw":"者**图中没有无前驱的顶点为止*"},{"type":"Str","value":"（此时说明此有向图不是DAG，其中存在以剩下的顶点组成的环路）。","loc":{"start":{"line":21,"column":38},"end":{"line":21,"column":70}},"range":[503,535],"raw":"*（此时说明此有向图不是DAG，其中存在以剩下的顶点组成的环路）"}],"loc":{"start":{"line":21,"column":2},"end":{"line":21,"column":70}},"range":[467,535],"raw":" 重复上面的两个步骤，直到DAG为空，或者**图中没有无前驱的顶点为止**（此时说明此有向图不是DAG，其中存在以剩下的顶点组成的环路）"}],"loc":{"start":{"line":21,"column":0},"end":{"line":21,"column":70}},"range":[465,535],"raw":"\n- 重复上面的两个步骤，直到DAG为空，或者**图中没有无前驱的顶点为止**（此时说明此有向图不是DAG，其中存在以剩下的顶点组成的环路）"}],"loc":{"start":{"line":19,"column":0},"end":{"line":21,"column":70}},"range":[400,535],"raw":"\n- 从DAG中选择一个入度为0的顶点（如果有多个为0的说明拓扑排序不唯一），并输出\n- 从DAG中删除所有以该节点为起点的有向边\n- 重复上面的两个步骤，直到DAG为空，或者**图中没有无前驱的顶点为止**（此时说明此有向图不是DAG，其中存在以剩下的顶点组成的环路）"},{"type":"CodeBlock","lang":"c","meta":null,"value":"#define MAX_VERTEX_NUM 100\n#define false 0\n#define true 1\n\ntypedef Boolean int;\n\nint InputDegree(Graph g, int v); // 获取图g的第v个顶点的入度\nint results[MAX_VERTEX_NUM];\n\nBoolean TopologicalSort(Graph g){\n    int inDegrees[MAX_VERTEX_NUM]; // 辅助数组\n    for(int i=0;i<g.vernum;i++) inDegrees[i] = InputDegree(i); // 初始化辅助数组\n    Stack stack; // 入度为0待输出的顶点栈\n    InitStack(&stack);\n    for(int i=0;i<g.vernum;i++){\n        if(inDegrees[i]==0) Push(&stack, i);\n    } // 计算每个顶点的入度\n    int count;\n    for(count=0;!isEmpty(&stack);count++){\n        int i;\n        Pop(&stack, &i);\n        results[count] = i;\n        for(p=g.vertices[i].firstarc;p;p=p->nextarc){\n            v = p->adjvex; // 与当前顶点相连的另一个顶点\n            inDegrees[v]--;\n            if(!inDegrees[v]) Push(&stack, v);\n        }\n    }\n    if(count<g.vernum) return false;\n    else return true;\n}","loc":{"start":{"line":23,"column":0},"end":{"line":55,"column":3}},"range":[537,1385],"raw":"\n```c\n#define MAX_VERTEX_NUM 100\n#define false 0\n#define true 1\n\ntypedef Boolean int;\n\nint InputDegree(Graph g, int v); // 获取图g的第v个顶点的入度\nint results[MAX_VERTEX_NUM];\n\nBoolean TopologicalSort(Graph g){\n    int inDegrees[MAX_VERTEX_NUM]; // 辅助数组\n    for(int i=0;i<g.vernum;i++) inDegrees[i] = InputDegree(i); // 初始化辅助数组\n    Stack stack; // 入度为0待输出的顶点栈\n    InitStack(&stack);\n    for(int i=0;i<g.vernum;i++){\n        if(inDegrees[i]==0) Push(&stack, i);\n    } // 计算每个顶点的入度\n    int count;\n    for(count=0;!isEmpty(&stack);count++){\n        int i;\n        Pop(&stack, &i);\n        results[count] = i;\n        for(p=g.vertices[i].firstarc;p;p=p->nextarc){\n            v = p->adjvex; // 与当前顶点相连的另一个顶点\n            inDegrees[v]--;\n            if(!inDegrees[v]) Push(&stack, v);\n        }\n    }\n    if(count<g.vernum) return false;\n    else return true;\n}\n``"},{"type":"Paragraph","children":[{"type":"Str","value":"在进行拓扑排序时，我们需要对图的所有的顶点进行访问，访问顶点的同时也会遍历一次图所有的边，所以拓扑排序的时间复杂度是 ","loc":{"start":{"line":57,"column":0},"end":{"line":57,"column":59}},"range":[1387,1446],"raw":"\n在进行拓扑排序时，我们需要对图的所有的顶点进行访问，访问顶点的同时也会遍历一次图所有的边，所以拓扑排序的时间复杂度是"},{"type":"InlineMath","value":"O(\\lvert V \\rvert + \\lvert E \\rvert)","data":{"hName":"span","hProperties":{"className":["math","math-inline"]},"hChildren":[{"type":"Str","value":"O(\\lvert V \\rvert + \\lvert E \\rvert)"}]},"loc":{"start":{"line":57,"column":59},"end":{"line":57,"column":97}},"range":[1446,1484],"raw":" $O(\\lvert V \\rvert + \\lvert E \\rvert)"},{"type":"Str","value":" 。","loc":{"start":{"line":57,"column":97},"end":{"line":57,"column":99}},"range":[1484,1486],"raw":"$ "}],"loc":{"start":{"line":57,"column":0},"end":{"line":57,"column":99}},"range":[1387,1486],"raw":"\n在进行拓扑排序时，我们需要对图的所有的顶点进行访问，访问顶点的同时也会遍历一次图所有的边，所以拓扑排序的时间复杂度是 $O(\\lvert V \\rvert + \\lvert E \\rvert)$ "}],"loc":{"start":{"line":1,"column":0},"end":{"line":58,"column":0}},"range":[0,1487],"raw":"﻿---\ntitle: '拓扑排序'\ntags: ['图','拓扑','数据结构']\n---\n# 有向无环图及其应用\n\n没有回路的有向图被成为有向无环图(directed acyline graph)，简称DAG图，DAG图是一类特殊的有向图。\n\n可以通过使用深度优先搜索的方式来检查一个有向图内是否存在回路，如果在深度优先搜索的过程中遇到回边（指向已经访问过的顶点的边），则说明图中一定存在由回路。\n\n## 拓扑排序(Topological Sort)\n\n有向无环图不存在环的有向图,简称DAG图AOV网若用一个DAG图表示一个工程,其顶点表示活动,用有向边 $<v_{i},v_{j}>$ 表示活动ⅵ冼先于活动进行的传递关系,则将这种DAG称为顶点表示活动网络,记为AOV网。\n\n拓扑排序就是对DAG的排序，如果在DAG中存在一条顶点A到顶点B的路径，就将顶点B排在顶点A的后面。\n\n算法思想：\n\n- 从DAG中选择一个入度为0的顶点（如果有多个为0的说明拓扑排序不唯一），并输出\n- 从DAG中删除所有以该节点为起点的有向边\n- 重复上面的两个步骤，直到DAG为空，或者**图中没有无前驱的顶点为止**（此时说明此有向图不是DAG，其中存在以剩下的顶点组成的环路）。\n\n```c\n#define MAX_VERTEX_NUM 100\n#define false 0\n#define true 1\n\ntypedef Boolean int;\n\nint InputDegree(Graph g, int v); // 获取图g的第v个顶点的入度\nint results[MAX_VERTEX_NUM];\n\nBoolean TopologicalSort(Graph g){\n    int inDegrees[MAX_VERTEX_NUM]; // 辅助数组\n    for(int i=0;i<g.vernum;i++) inDegrees[i] = InputDegree(i); // 初始化辅助数组\n    Stack stack; // 入度为0待输出的顶点栈\n    InitStack(&stack);\n    for(int i=0;i<g.vernum;i++){\n        if(inDegrees[i]==0) Push(&stack, i);\n    } // 计算每个顶点的入度\n    int count;\n    for(count=0;!isEmpty(&stack);count++){\n        int i;\n        Pop(&stack, &i);\n        results[count] = i;\n        for(p=g.vertices[i].firstarc;p;p=p->nextarc){\n            v = p->adjvex; // 与当前顶点相连的另一个顶点\n            inDegrees[v]--;\n            if(!inDegrees[v]) Push(&stack, v);\n        }\n    }\n    if(count<g.vernum) return false;\n    else return true;\n}\n```\n\n在进行拓扑排序时，我们需要对图的所有的顶点进行访问，访问顶点的同时也会遍历一次图所有的边，所以拓扑排序的时间复杂度是 $O(\\lvert V \\rvert + \\lvert E \\rvert)$ 。"},"catalogue":{"title":"拓扑排序","json-path":"数据结构/2020-08-02-有向无环图及其应用.json","mdate":"2020-08-02","cover":"https://i.328888.xyz/2023/01/01/tZa8k.jpeg","icon":"💊","visible":true,"tags":["图","拓扑","数据结构"]}}