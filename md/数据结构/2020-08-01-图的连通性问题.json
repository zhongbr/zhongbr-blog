{"ast":{"type":"Document","children":[{"type":"Yaml","value":"tags: ['数据结构','图']","loc":{"start":{"line":1,"column":0},"end":{"line":3,"column":3}},"range":[0,26],"raw":"﻿---\ntags: ['数据结构','图']\n--","visible":false},{"type":"Header","depth":1,"children":[{"type":"Str","value":"图的连通性问题","loc":{"start":{"line":4,"column":2},"end":{"line":4,"column":9}},"range":[29,36],"raw":" 图的连通性问"}],"loc":{"start":{"line":4,"column":0},"end":{"line":4,"column":9}},"range":[27,36],"raw":"\n# 图的连通性问"},{"type":"Header","depth":2,"children":[{"type":"Str","value":"无向图的连通分量和生成树","loc":{"start":{"line":6,"column":3},"end":{"line":6,"column":15}},"range":[41,53],"raw":" 无向图的连通分量和生成"}],"loc":{"start":{"line":6,"column":0},"end":{"line":6,"column":15}},"range":[38,53],"raw":"\n## 无向图的连通分量和生成"},{"type":"List","ordered":false,"start":null,"spread":false,"children":[{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"对于连通图，从一个顶点出发，进行深度或者广度优先搜索，就可以访问到所有的顶点","loc":{"start":{"line":8,"column":2},"end":{"line":8,"column":40}},"range":[57,95],"raw":" 对于连通图，从一个顶点出发，进行深度或者广度优先搜索，就可以访问到所有的顶"}],"loc":{"start":{"line":8,"column":2},"end":{"line":8,"column":40}},"range":[57,95],"raw":" 对于连通图，从一个顶点出发，进行深度或者广度优先搜索，就可以访问到所有的顶"}],"loc":{"start":{"line":8,"column":0},"end":{"line":8,"column":40}},"range":[55,95],"raw":"\n- 对于连通图，从一个顶点出发，进行深度或者广度优先搜索，就可以访问到所有的顶"},{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"对于非连通图，需要从多个顶点出发进行搜索，每一次从一个新的起始点出发搜索到的各个顶点访问序列恰好为各个连通分量的顶点集。","loc":{"start":{"line":9,"column":2},"end":{"line":9,"column":62}},"range":[98,158],"raw":" 对于非连通图，需要从多个顶点出发进行搜索，每一次从一个新的起始点出发搜索到的各个顶点访问序列恰好为各个连通分量的顶点集"}],"loc":{"start":{"line":9,"column":2},"end":{"line":9,"column":62}},"range":[98,158],"raw":" 对于非连通图，需要从多个顶点出发进行搜索，每一次从一个新的起始点出发搜索到的各个顶点访问序列恰好为各个连通分量的顶点集"}],"loc":{"start":{"line":9,"column":0},"end":{"line":9,"column":62}},"range":[96,158],"raw":"\n- 对于非连通图，需要从多个顶点出发进行搜索，每一次从一个新的起始点出发搜索到的各个顶点访问序列恰好为各个连通分量的顶点集"}],"loc":{"start":{"line":8,"column":0},"end":{"line":9,"column":62}},"range":[55,158],"raw":"\n- 对于连通图，从一个顶点出发，进行深度或者广度优先搜索，就可以访问到所有的顶点\n- 对于非连通图，需要从多个顶点出发进行搜索，每一次从一个新的起始点出发搜索到的各个顶点访问序列恰好为各个连通分量的顶点集"},{"type":"Paragraph","children":[{"type":"Str","value":"深度优先得到的生成树成为深度优先生成树，广度优先得到的生成树成为广度优先生成树。","loc":{"start":{"line":11,"column":0},"end":{"line":11,"column":40}},"range":[160,200],"raw":"\n深度优先得到的生成树成为深度优先生成树，广度优先得到的生成树成为广度优先生成树"}],"loc":{"start":{"line":11,"column":0},"end":{"line":11,"column":40}},"range":[160,200],"raw":"\n深度优先得到的生成树成为深度优先生成树，广度优先得到的生成树成为广度优先生成树"},{"type":"Paragraph","children":[{"type":"Str","value":"对于非连通图，每个联通分量中的顶点集和遍历所经过的边构成的生成树组成了非连通图的生成森林。","loc":{"start":{"line":13,"column":0},"end":{"line":13,"column":45}},"range":[202,247],"raw":"\n对于非连通图，每个联通分量中的顶点集和遍历所经过的边构成的生成树组成了非连通图的生成森林"}],"loc":{"start":{"line":13,"column":0},"end":{"line":13,"column":45}},"range":[202,247],"raw":"\n对于非连通图，每个联通分量中的顶点集和遍历所经过的边构成的生成树组成了非连通图的生成森林"},{"type":"Header","depth":2,"children":[{"type":"Str","value":"有向图的强连通分量","loc":{"start":{"line":15,"column":3},"end":{"line":15,"column":12}},"range":[252,261],"raw":" 有向图的强连通分"}],"loc":{"start":{"line":15,"column":0},"end":{"line":15,"column":12}},"range":[249,261],"raw":"\n## 有向图的强连通分"},{"type":"Paragraph","children":[{"type":"Str","value":"深度优先搜索是生成有向图的强连通分量的一种有效方式。","loc":{"start":{"line":17,"column":0},"end":{"line":17,"column":26}},"range":[263,289],"raw":"\n深度优先搜索是生成有向图的强连通分量的一种有效方式"}],"loc":{"start":{"line":17,"column":0},"end":{"line":17,"column":26}},"range":[263,289],"raw":"\n深度优先搜索是生成有向图的强连通分量的一种有效方式"},{"type":"Paragraph","children":[{"type":"Str","value":"以十字链表作为有向图的存储方式：","loc":{"start":{"line":19,"column":0},"end":{"line":19,"column":16}},"range":[291,307],"raw":"\n以十字链表作为有向图的存储方式"}],"loc":{"start":{"line":19,"column":0},"end":{"line":19,"column":16}},"range":[291,307],"raw":"\n以十字链表作为有向图的存储方式"},{"type":"List","ordered":false,"start":null,"spread":false,"children":[{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"从某个顶点出发沿着以该顶点为弧尾的弧，进行深度优先搜索遍历，按照其所有邻接点都完成的顺序将所有顶点排列起来。","loc":{"start":{"line":21,"column":2},"end":{"line":21,"column":56}},"range":[311,365],"raw":" 从某个顶点出发沿着以该顶点为弧尾的弧，进行深度优先搜索遍历，按照其所有邻接点都完成的顺序将所有顶点排列起来"}],"loc":{"start":{"line":21,"column":2},"end":{"line":21,"column":56}},"range":[311,365],"raw":" 从某个顶点出发沿着以该顶点为弧尾的弧，进行深度优先搜索遍历，按照其所有邻接点都完成的顺序将所有顶点排列起来"}],"loc":{"start":{"line":21,"column":0},"end":{"line":21,"column":56}},"range":[309,365],"raw":"\n- 从某个顶点出发沿着以该顶点为弧尾的弧，进行深度优先搜索遍历，按照其所有邻接点都完成的顺序将所有顶点排列起来"},{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"从最后完成搜索的节点出发，沿着以该结点为弧头的顶点进行深度优先搜索，如果此次遍历不能访问到所有的顶点，则从余下的顶点中最后完成搜索的顶点出发，继续进行深度优先搜索，以此类推，直至图中所有的顶点都被访问一次为止。","loc":{"start":{"line":22,"column":2},"end":{"line":22,"column":107}},"range":[368,473],"raw":" 从最后完成搜索的节点出发，沿着以该结点为弧头的顶点进行深度优先搜索，如果此次遍历不能访问到所有的顶点，则从余下的顶点中最后完成搜索的顶点出发，继续进行深度优先搜索，以此类推，直至图中所有的顶点都被访问一次为止"}],"loc":{"start":{"line":22,"column":2},"end":{"line":22,"column":107}},"range":[368,473],"raw":" 从最后完成搜索的节点出发，沿着以该结点为弧头的顶点进行深度优先搜索，如果此次遍历不能访问到所有的顶点，则从余下的顶点中最后完成搜索的顶点出发，继续进行深度优先搜索，以此类推，直至图中所有的顶点都被访问一次为止"}],"loc":{"start":{"line":22,"column":0},"end":{"line":22,"column":107}},"range":[366,473],"raw":"\n- 从最后完成搜索的节点出发，沿着以该结点为弧头的顶点进行深度优先搜索，如果此次遍历不能访问到所有的顶点，则从余下的顶点中最后完成搜索的顶点出发，继续进行深度优先搜索，以此类推，直至图中所有的顶点都被访问一次为止"}],"loc":{"start":{"line":21,"column":0},"end":{"line":22,"column":107}},"range":[309,473],"raw":"\n- 从某个顶点出发沿着以该顶点为弧尾的弧，进行深度优先搜索遍历，按照其所有邻接点都完成的顺序将所有顶点排列起来。\n- 从最后完成搜索的节点出发，沿着以该结点为弧头的顶点进行深度优先搜索，如果此次遍历不能访问到所有的顶点，则从余下的顶点中最后完成搜索的顶点出发，继续进行深度优先搜索，以此类推，直至图中所有的顶点都被访问一次为止"},{"type":"Header","depth":2,"children":[{"type":"Str","value":"最小生成树(MST)","loc":{"start":{"line":24,"column":3},"end":{"line":24,"column":13}},"range":[478,488],"raw":" 最小生成树(MST"}],"loc":{"start":{"line":24,"column":0},"end":{"line":24,"column":13}},"range":[475,488],"raw":"\n## 最小生成树(MST"},{"type":"Paragraph","children":[{"type":"Str","value":"生成树：连通图包含全部顶点的一个极小连通子图。","loc":{"start":{"line":26,"column":0},"end":{"line":26,"column":23}},"range":[490,513],"raw":"\n生成树：连通图包含全部顶点的一个极小连通子图"}],"loc":{"start":{"line":26,"column":0},"end":{"line":26,"column":23}},"range":[490,513],"raw":"\n生成树：连通图包含全部顶点的一个极小连通子图"},{"type":"Paragraph","children":[{"type":"Str","value":"对于带权无向连通图，最小生成树是其所有生成树中所有边的权值最小的生成树。","loc":{"start":{"line":28,"column":0},"end":{"line":28,"column":36}},"range":[515,551],"raw":"\n对于带权无向连通图，最小生成树是其所有生成树中所有边的权值最小的生成树"}],"loc":{"start":{"line":28,"column":0},"end":{"line":28,"column":36}},"range":[515,551],"raw":"\n对于带权无向连通图，最小生成树是其所有生成树中所有边的权值最小的生成树"},{"type":"Header","depth":3,"children":[{"type":"Str","value":"性质","loc":{"start":{"line":30,"column":4},"end":{"line":30,"column":6}},"range":[557,559],"raw":" 性"}],"loc":{"start":{"line":30,"column":0},"end":{"line":30,"column":6}},"range":[553,559],"raw":"\n### 性"},{"type":"List","ordered":false,"start":null,"spread":false,"children":[{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"不一定唯一：只有当所有边的权值均不相同或者只有顶点数-1条边的时候，最小生成树一定唯一的，其他时候不一定唯一","loc":{"start":{"line":32,"column":2},"end":{"line":32,"column":56}},"range":[563,617],"raw":" 不一定唯一：只有当所有边的权值均不相同或者只有顶点数-1条边的时候，最小生成树一定唯一的，其他时候不一定唯"}],"loc":{"start":{"line":32,"column":2},"end":{"line":32,"column":56}},"range":[563,617],"raw":" 不一定唯一：只有当所有边的权值均不相同或者只有顶点数-1条边的时候，最小生成树一定唯一的，其他时候不一定唯"}],"loc":{"start":{"line":32,"column":0},"end":{"line":32,"column":56}},"range":[561,617],"raw":"\n- 不一定唯一：只有当所有边的权值均不相同或者只有顶点数-1条边的时候，最小生成树一定唯一的，其他时候不一定唯"},{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"权重之和唯一：最小生成树的权值之和一定是唯一的","loc":{"start":{"line":33,"column":2},"end":{"line":33,"column":25}},"range":[620,643],"raw":" 权重之和唯一：最小生成树的权值之和一定是唯一"}],"loc":{"start":{"line":33,"column":2},"end":{"line":33,"column":25}},"range":[620,643],"raw":" 权重之和唯一：最小生成树的权值之和一定是唯一"}],"loc":{"start":{"line":33,"column":0},"end":{"line":33,"column":25}},"range":[618,643],"raw":"\n- 权重之和唯一：最小生成树的权值之和一定是唯一"},{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"最小生成树的边数等于顶点数-1","loc":{"start":{"line":34,"column":2},"end":{"line":34,"column":17}},"range":[646,661],"raw":" 最小生成树的边数等于顶点数-"}],"loc":{"start":{"line":34,"column":2},"end":{"line":34,"column":17}},"range":[646,661],"raw":" 最小生成树的边数等于顶点数-"}],"loc":{"start":{"line":34,"column":0},"end":{"line":34,"column":17}},"range":[644,661],"raw":"\n- 最小生成树的边数等于顶点数-"}],"loc":{"start":{"line":32,"column":0},"end":{"line":34,"column":17}},"range":[561,661],"raw":"\n- 不一定唯一：只有当所有边的权值均不相同或者只有顶点数-1条边的时候，最小生成树一定唯一的，其他时候不一定唯一\n- 权重之和唯一：最小生成树的权值之和一定是唯一的\n- 最小生成树的边数等于顶点数-"},{"type":"Header","depth":2,"children":[{"type":"Str","value":"最小生成树的生成算法","loc":{"start":{"line":36,"column":3},"end":{"line":36,"column":13}},"range":[666,676],"raw":" 最小生成树的生成算"}],"loc":{"start":{"line":36,"column":0},"end":{"line":36,"column":13}},"range":[663,676],"raw":"\n## 最小生成树的生成算"},{"type":"Paragraph","children":[{"type":"Str","value":"贪心算法","loc":{"start":{"line":38,"column":0},"end":{"line":38,"column":4}},"range":[678,682],"raw":"\n贪心算"}],"loc":{"start":{"line":38,"column":0},"end":{"line":38,"column":4}},"range":[678,682],"raw":"\n贪心算"},{"type":"CodeBlock","lang":"c","meta":null,"value":"GENRIC_MST(G){\n    T = NULL;\n    while T 未生成一棵生成树{\n        do 找到一条最下的代价边(u, v)并且加入T后不会产生回路;\n        T = Tu(u, v);\n    }\n}","loc":{"start":{"line":40,"column":0},"end":{"line":48,"column":3}},"range":[684,814],"raw":"\n```c\nGENRIC_MST(G){\n    T = NULL;\n    while T 未生成一棵生成树{\n        do 找到一条最下的代价边(u, v)并且加入T后不会产生回路;\n        T = Tu(u, v);\n    }\n}\n``"},{"type":"Header","depth":3,"children":[{"type":"Str","value":"Prim算法","loc":{"start":{"line":50,"column":4},"end":{"line":50,"column":10}},"range":[820,826],"raw":" Prim算"}],"loc":{"start":{"line":50,"column":0},"end":{"line":50,"column":10}},"range":[816,826],"raw":"\n### Prim算"},{"type":"List","ordered":false,"start":null,"spread":false,"children":[{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"初始化：向空的结果树 ","loc":{"start":{"line":52,"column":2},"end":{"line":52,"column":13}},"range":[830,841],"raw":" 初始化：向空的结果树"},{"type":"InlineMath","value":"T=(V_{T}, E_{T})","data":{"hName":"span","hProperties":{"className":["math","math-inline"]},"hChildren":[{"type":"Str","value":"T=(V_{T}, E_{T})"}]},"loc":{"start":{"line":52,"column":13},"end":{"line":52,"column":31}},"range":[841,859],"raw":" $T=(V_{T}, E_{T})"},{"type":"Str","value":" 中添加图 ","loc":{"start":{"line":52,"column":31},"end":{"line":52,"column":37}},"range":[859,865],"raw":"$ 中添加图"},{"type":"InlineMath","value":"G=(V,E)","data":{"hName":"span","hProperties":{"className":["math","math-inline"]},"hChildren":[{"type":"Str","value":"G=(V,E)"}]},"loc":{"start":{"line":52,"column":37},"end":{"line":52,"column":46}},"range":[865,874],"raw":" $G=(V,E)"},{"type":"Str","value":" 中的任意顶点 ","loc":{"start":{"line":52,"column":46},"end":{"line":52,"column":54}},"range":[874,882],"raw":"$ 中的任意顶点"},{"type":"InlineMath","value":"v_{0}","data":{"hName":"span","hProperties":{"className":["math","math-inline"]},"hChildren":[{"type":"Str","value":"v_{0}"}]},"loc":{"start":{"line":52,"column":54},"end":{"line":52,"column":61}},"range":[882,889],"raw":" $v_{0}"},{"type":"Str","value":" ，使 ","loc":{"start":{"line":52,"column":61},"end":{"line":52,"column":65}},"range":[889,893],"raw":"$ ，使"},{"type":"InlineMath","value":"V_{T}=\\{u_{0}\\}","data":{"hName":"span","hProperties":{"className":["math","math-inline"]},"hChildren":[{"type":"Str","value":"V_{T}=\\{u_{0}\\}"}]},"loc":{"start":{"line":52,"column":65},"end":{"line":52,"column":82}},"range":[893,910],"raw":" $V_{T}=\\{u_{0}\\}"},{"type":"Str","value":" ， ","loc":{"start":{"line":52,"column":82},"end":{"line":52,"column":85}},"range":[910,913],"raw":"$ ，"},{"type":"InlineMath","value":"E_{T}","data":{"hName":"span","hProperties":{"className":["math","math-inline"]},"hChildren":[{"type":"Str","value":"E_{T}"}]},"loc":{"start":{"line":52,"column":85},"end":{"line":52,"column":92}},"range":[913,920],"raw":" $E_{T}"},{"type":"Str","value":" 为空集；","loc":{"start":{"line":52,"column":92},"end":{"line":52,"column":97}},"range":[920,925],"raw":"$ 为空集"}],"loc":{"start":{"line":52,"column":2},"end":{"line":52,"column":97}},"range":[830,925],"raw":" 初始化：向空的结果树 $T=(V_{T}, E_{T})$ 中添加图 $G=(V,E)$ 中的任意顶点 $v_{0}$ ，使 $V_{T}=\\{u_{0}\\}$ ， $E_{T}$ 为空集"}],"loc":{"start":{"line":52,"column":0},"end":{"line":52,"column":97}},"range":[828,925],"raw":"\n- 初始化：向空的结果树 $T=(V_{T}, E_{T})$ 中添加图 $G=(V,E)$ 中的任意顶点 $v_{0}$ ，使 $V_{T}=\\{u_{0}\\}$ ， $E_{T}$ 为空集"},{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"从G中选取符合  ","loc":{"start":{"line":53,"column":2},"end":{"line":53,"column":11}},"range":[928,937],"raw":" 从G中选取符合 "},{"type":"InlineMath","value":"\\{(u,v)\\lvert u \\in V_{T}, v \\in (V-V_{T})\\}","data":{"hName":"span","hProperties":{"className":["math","math-inline"]},"hChildren":[{"type":"Str","value":"\\{(u,v)\\lvert u \\in V_{T}, v \\in (V-V_{T})\\}"}]},"loc":{"start":{"line":53,"column":11},"end":{"line":53,"column":57}},"range":[937,983],"raw":" $\\{(u,v)\\lvert u \\in V_{T}, v \\in (V-V_{T})\\}"},{"type":"Str","value":" （此条件避免了产生回路） 且具有最小权值的边  ","loc":{"start":{"line":53,"column":57},"end":{"line":53,"column":82}},"range":[983,1008],"raw":"$ （此条件避免了产生回路） 且具有最小权值的边 "},{"type":"InlineMath","value":"(u, v)","data":{"hName":"span","hProperties":{"className":["math","math-inline"]},"hChildren":[{"type":"Str","value":"(u, v)"}]},"loc":{"start":{"line":53,"column":82},"end":{"line":53,"column":90}},"range":[1008,1016],"raw":" $(u, v)"},{"type":"Str","value":"  的顶点，然后令  ","loc":{"start":{"line":53,"column":90},"end":{"line":53,"column":101}},"range":[1016,1027],"raw":"$  的顶点，然后令 "},{"type":"InlineMath","value":"V_{T}=V_{T}\\cup\\{v\\}","data":{"hName":"span","hProperties":{"className":["math","math-inline"]},"hChildren":[{"type":"Str","value":"V_{T}=V_{T}\\cup\\{v\\}"}]},"loc":{"start":{"line":53,"column":101},"end":{"line":53,"column":123}},"range":[1027,1049],"raw":" $V_{T}=V_{T}\\cup\\{v\\}"},{"type":"Str","value":" ， ","loc":{"start":{"line":53,"column":123},"end":{"line":53,"column":126}},"range":[1049,1052],"raw":"$ ，"},{"type":"InlineMath","value":"E_{T}=E_{T}\\cup\\{(u,v)\\}","data":{"hName":"span","hProperties":{"className":["math","math-inline"]},"hChildren":[{"type":"Str","value":"E_{T}=E_{T}\\cup\\{(u,v)\\}"}]},"loc":{"start":{"line":53,"column":126},"end":{"line":53,"column":152}},"range":[1052,1078],"raw":" $E_{T}=E_{T}\\cup\\{(u,v)\\}"},{"type":"Str","value":" ，重复这个步骤，直到 ","loc":{"start":{"line":53,"column":152},"end":{"line":53,"column":164}},"range":[1078,1090],"raw":"$ ，重复这个步骤，直到"},{"type":"InlineMath","value":"V_{T}=V","data":{"hName":"span","hProperties":{"className":["math","math-inline"]},"hChildren":[{"type":"Str","value":"V_{T}=V"}]},"loc":{"start":{"line":53,"column":164},"end":{"line":53,"column":173}},"range":[1090,1099],"raw":" $V_{T}=V"},{"type":"Str","value":" 。","loc":{"start":{"line":53,"column":173},"end":{"line":53,"column":175}},"range":[1099,1101],"raw":"$ "}],"loc":{"start":{"line":53,"column":2},"end":{"line":53,"column":175}},"range":[928,1101],"raw":" 从G中选取符合  $\\{(u,v)\\lvert u \\in V_{T}, v \\in (V-V_{T})\\}$ （此条件避免了产生回路） 且具有最小权值的边  $(u, v)$  的顶点，然后令  $V_{T}=V_{T}\\cup\\{v\\}$ ， $E_{T}=E_{T}\\cup\\{(u,v)\\}$ ，重复这个步骤，直到 $V_{T}=V$ "}],"loc":{"start":{"line":53,"column":0},"end":{"line":53,"column":175}},"range":[926,1101],"raw":"\n- 从G中选取符合  $\\{(u,v)\\lvert u \\in V_{T}, v \\in (V-V_{T})\\}$ （此条件避免了产生回路） 且具有最小权值的边  $(u, v)$  的顶点，然后令  $V_{T}=V_{T}\\cup\\{v\\}$ ， $E_{T}=E_{T}\\cup\\{(u,v)\\}$ ，重复这个步骤，直到 $V_{T}=V$ "}],"loc":{"start":{"line":52,"column":0},"end":{"line":53,"column":175}},"range":[828,1101],"raw":"\n- 初始化：向空的结果树 $T=(V_{T}, E_{T})$ 中添加图 $G=(V,E)$ 中的任意顶点 $v_{0}$ ，使 $V_{T}=\\{u_{0}\\}$ ， $E_{T}$ 为空集；\n- 从G中选取符合  $\\{(u,v)\\lvert u \\in V_{T}, v \\in (V-V_{T})\\}$ （此条件避免了产生回路） 且具有最小权值的边  $(u, v)$  的顶点，然后令  $V_{T}=V_{T}\\cup\\{v\\}$ ， $E_{T}=E_{T}\\cup\\{(u,v)\\}$ ，重复这个步骤，直到 $V_{T}=V$ "},{"type":"CodeBlock","lang":"c","meta":null,"value":"// 记录最小的边的辅助数组\nstruct {\n    VertexType adjvex;\n    VRType lowcost;\n} closedge[MAX_VERTEX_NUM];\n\nvoid MinSpanTreePrim(Graph g, VertexType u){\n    k = locate(g, u);\n    for(j=0;j<g.vexnum;j++){\n        if(j != k) closedge[j] = {u, g.arcs[k][j].adj};\n    }\n    closedge[k].lowcost = 0;\n    for(i=1;i<g.vexnum;i++){\n        k = minium(closedge);\n        closedge[k].lowcost = 0;\n        for(j=0;j<g.vexnum;j++){\n            if(g.arcs[k][j].adj < closedge[j].lowcost){\n                closedge[j] = {g.vexs[k], g.arcs[k][j].adj};\n            }\n        }\n    }\n}","loc":{"start":{"line":55,"column":0},"end":{"line":78,"column":3}},"range":[1103,1668],"raw":"\n```c\n// 记录最小的边的辅助数组\nstruct {\n    VertexType adjvex;\n    VRType lowcost;\n} closedge[MAX_VERTEX_NUM];\n\nvoid MinSpanTreePrim(Graph g, VertexType u){\n    k = locate(g, u);\n    for(j=0;j<g.vexnum;j++){\n        if(j != k) closedge[j] = {u, g.arcs[k][j].adj};\n    }\n    closedge[k].lowcost = 0;\n    for(i=1;i<g.vexnum;i++){\n        k = minium(closedge);\n        closedge[k].lowcost = 0;\n        for(j=0;j<g.vexnum;j++){\n            if(g.arcs[k][j].adj < closedge[j].lowcost){\n                closedge[j] = {g.vexs[k], g.arcs[k][j].adj};\n            }\n        }\n    }\n}\n``"},{"type":"Header","depth":3,"children":[{"type":"Str","value":"关节点和重连通分量","loc":{"start":{"line":80,"column":4},"end":{"line":80,"column":13}},"range":[1674,1683],"raw":" 关节点和重连通分"}],"loc":{"start":{"line":80,"column":0},"end":{"line":80,"column":13}},"range":[1670,1683],"raw":"\n### 关节点和重连通分"},{"type":"Paragraph","children":[{"type":"Str","value":"如果删去顶点v和与顶点v相关联的各边后，将图分割为两个或多个连通分量，则称顶点v为改图的一个关节点(articulation point，也被称为割点)。","loc":{"start":{"line":82,"column":0},"end":{"line":82,"column":77}},"range":[1685,1762],"raw":"\n如果删去顶点v和与顶点v相关联的各边后，将图分割为两个或多个连通分量，则称顶点v为改图的一个关节点(articulation point，也被称为割点)"}],"loc":{"start":{"line":82,"column":0},"end":{"line":82,"column":77}},"range":[1685,1762],"raw":"\n如果删去顶点v和与顶点v相关联的各边后，将图分割为两个或多个连通分量，则称顶点v为改图的一个关节点(articulation point，也被称为割点)"},{"type":"Paragraph","children":[{"type":"Str","value":"没有关节点的连通图成为重连通图(bicconected graph)。在重连通图上，任意两个节点之间都至少有两条路径，删去某个顶点及依附于某个顶点的各边后，也不破坏图的连通性。","loc":{"start":{"line":84,"column":0},"end":{"line":84,"column":88}},"range":[1764,1852],"raw":"\n没有关节点的连通图成为重连通图(bicconected graph)。在重连通图上，任意两个节点之间都至少有两条路径，删去某个顶点及依附于某个顶点的各边后，也不破坏图的连通性"}],"loc":{"start":{"line":84,"column":0},"end":{"line":84,"column":88}},"range":[1764,1852],"raw":"\n没有关节点的连通图成为重连通图(bicconected graph)。在重连通图上，任意两个节点之间都至少有两条路径，删去某个顶点及依附于某个顶点的各边后，也不破坏图的连通性"},{"type":"Paragraph","children":[{"type":"Str","value":"连通度：若连通图至少需要删除k个顶点，才能破坏其连通性，则称该连通图的连通度为k。","loc":{"start":{"line":86,"column":0},"end":{"line":86,"column":41}},"range":[1854,1895],"raw":"\n连通度：若连通图至少需要删除k个顶点，才能破坏其连通性，则称该连通图的连通度为k"}],"loc":{"start":{"line":86,"column":0},"end":{"line":86,"column":41}},"range":[1854,1895],"raw":"\n连通度：若连通图至少需要删除k个顶点，才能破坏其连通性，则称该连通图的连通度为k"},{"type":"Paragraph","children":[{"type":"Str","value":"利用深度优先搜索可以求图的关节点：","loc":{"start":{"line":88,"column":0},"end":{"line":88,"column":17}},"range":[1897,1914],"raw":"\n利用深度优先搜索可以求图的关节点"}],"loc":{"start":{"line":88,"column":0},"end":{"line":88,"column":17}},"range":[1897,1914],"raw":"\n利用深度优先搜索可以求图的关节点"},{"type":"Paragraph","children":[{"type":"Image","title":null,"url":"https://i.loli.net/2020/08/02/oUwPD2EAG6JRyde.png","alt":"PNG??.png","loc":{"start":{"line":90,"column":0},"end":{"line":90,"column":63}},"range":[1916,1979],"raw":"\n![PNG??.png](https://i.loli.net/2020/08/02/oUwPD2EAG6JRyde.png"}],"loc":{"start":{"line":90,"column":0},"end":{"line":90,"column":63}},"range":[1916,1979],"raw":"\n![PNG??.png](https://i.loli.net/2020/08/02/oUwPD2EAG6JRyde.png"},{"type":"Paragraph","children":[{"type":"Str","value":"深度优先生成树中，实线表示树边，虚线表示回边（不再生成树上的边）。树中任意一个结点v的孩子结点为在它之后搜索的结点，双亲结点或者通过回边与之相连的祖先节点是在它之前搜索的结点。","loc":{"start":{"line":92,"column":0},"end":{"line":92,"column":88}},"range":[1981,2069],"raw":"\n深度优先生成树中，实线表示树边，虚线表示回边（不再生成树上的边）。树中任意一个结点v的孩子结点为在它之后搜索的结点，双亲结点或者通过回边与之相连的祖先节点是在它之前搜索的结点"}],"loc":{"start":{"line":92,"column":0},"end":{"line":92,"column":88}},"range":[1981,2069],"raw":"\n深度优先生成树中，实线表示树边，虚线表示回边（不再生成树上的边）。树中任意一个结点v的孩子结点为在它之后搜索的结点，双亲结点或者通过回边与之相连的祖先节点是在它之前搜索的结点"},{"type":"Paragraph","children":[{"type":"Str","value":"关节点有以下两种特性：","loc":{"start":{"line":94,"column":0},"end":{"line":94,"column":11}},"range":[2071,2082],"raw":"\n关节点有以下两种特性"}],"loc":{"start":{"line":94,"column":0},"end":{"line":94,"column":11}},"range":[2071,2082],"raw":"\n关节点有以下两种特性"},{"type":"List","ordered":false,"start":null,"spread":false,"children":[{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"若生成树的根由两棵或以上的子树，此根节点必为关节点","loc":{"start":{"line":96,"column":2},"end":{"line":96,"column":27}},"range":[2086,2111],"raw":" 若生成树的根由两棵或以上的子树，此根节点必为关节"}],"loc":{"start":{"line":96,"column":2},"end":{"line":96,"column":27}},"range":[2086,2111],"raw":" 若生成树的根由两棵或以上的子树，此根节点必为关节"}],"loc":{"start":{"line":96,"column":0},"end":{"line":96,"column":27}},"range":[2084,2111],"raw":"\n- 若生成树的根由两棵或以上的子树，此根节点必为关节"},{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"非叶子顶点v，某棵子树的根和子树的其他结点均没有指向v祖先的回边，那么此顶点v必为一个关节点","loc":{"start":{"line":97,"column":2},"end":{"line":97,"column":48}},"range":[2114,2160],"raw":" 非叶子顶点v，某棵子树的根和子树的其他结点均没有指向v祖先的回边，那么此顶点v必为一个关节"}],"loc":{"start":{"line":97,"column":2},"end":{"line":97,"column":48}},"range":[2114,2160],"raw":" 非叶子顶点v，某棵子树的根和子树的其他结点均没有指向v祖先的回边，那么此顶点v必为一个关节"}],"loc":{"start":{"line":97,"column":0},"end":{"line":97,"column":48}},"range":[2112,2160],"raw":"\n- 非叶子顶点v，某棵子树的根和子树的其他结点均没有指向v祖先的回边，那么此顶点v必为一个关节"}],"loc":{"start":{"line":96,"column":0},"end":{"line":97,"column":48}},"range":[2084,2160],"raw":"\n- 若生成树的根由两棵或以上的子树，此根节点必为关节点\n- 非叶子顶点v，某棵子树的根和子树的其他结点均没有指向v祖先的回边，那么此顶点v必为一个关节"},{"type":"Paragraph","children":[{"type":"Str","value":"对图 ","loc":{"start":{"line":99,"column":0},"end":{"line":99,"column":3}},"range":[2162,2165],"raw":"\n对图"},{"type":"InlineMath","value":"Graph=(V,\\{Edge\\})","data":{"hName":"span","hProperties":{"className":["math","math-inline"]},"hChildren":[{"type":"Str","value":"Graph=(V,\\{Edge\\})"}]},"loc":{"start":{"line":99,"column":3},"end":{"line":99,"column":23}},"range":[2165,2185],"raw":" $Graph=(V,\\{Edge\\})"},{"type":"Str","value":" ，重新定义访问时得visited，引入一个low函数：","loc":{"start":{"line":99,"column":23},"end":{"line":99,"column":51}},"range":[2185,2213],"raw":"$ ，重新定义访问时得visited，引入一个low函数"}],"loc":{"start":{"line":99,"column":0},"end":{"line":99,"column":51}},"range":[2162,2213],"raw":"\n对图 $Graph=(V,\\{Edge\\})$ ，重新定义访问时得visited，引入一个low函数"},{"type":"Paragraph","children":[{"type":"InlineMath","value":"low(v)=Min\\{visited[v],low[w],visited[k]\\}","data":{"hName":"span","hProperties":{"className":["math","math-inline"]},"hChildren":[{"type":"Str","value":"low(v)=Min\\{visited[v],low[w],visited[k]\\}"}]},"loc":{"start":{"line":101,"column":1},"end":{"line":101,"column":45}},"range":[2216,2260],"raw":" $low(v)=Min\\{visited[v],low[w],visited[k]\\}"}],"loc":{"start":{"line":101,"column":1},"end":{"line":101,"column":46}},"range":[2216,2261],"raw":" $low(v)=Min\\{visited[v],low[w],visited[k]\\}$"},{"type":"Paragraph","children":[{"type":"Str","value":"其中：","loc":{"start":{"line":103,"column":0},"end":{"line":103,"column":3}},"range":[2263,2266],"raw":"\n其中"}],"loc":{"start":{"line":103,"column":0},"end":{"line":103,"column":3}},"range":[2263,2266],"raw":"\n其中"},{"type":"List","ordered":false,"start":null,"spread":false,"children":[{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"w是顶点v在深度优先生成树上的孩子结点","loc":{"start":{"line":104,"column":2},"end":{"line":104,"column":21}},"range":[2269,2288],"raw":" w是顶点v在深度优先生成树上的孩子结"}],"loc":{"start":{"line":104,"column":2},"end":{"line":104,"column":21}},"range":[2269,2288],"raw":" w是顶点v在深度优先生成树上的孩子结"}],"loc":{"start":{"line":104,"column":0},"end":{"line":104,"column":21}},"range":[2267,2288],"raw":"\n- w是顶点v在深度优先生成树上的孩子结"},{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"k是顶点v在深度优先生成树上由回边连结的祖先节点","loc":{"start":{"line":105,"column":2},"end":{"line":105,"column":26}},"range":[2291,2315],"raw":" k是顶点v在深度优先生成树上由回边连结的祖先节"}],"loc":{"start":{"line":105,"column":2},"end":{"line":105,"column":26}},"range":[2291,2315],"raw":" k是顶点v在深度优先生成树上由回边连结的祖先节"}],"loc":{"start":{"line":105,"column":0},"end":{"line":105,"column":26}},"range":[2289,2315],"raw":"\n- k是顶点v在深度优先生成树上由回边连结的祖先节"},{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"InlineMath","value":"(v,w) \\in Edge","data":{"hName":"span","hProperties":{"className":["math","math-inline"]},"hChildren":[{"type":"Str","value":"(v,w) \\in Edge"}]},"loc":{"start":{"line":106,"column":3},"end":{"line":106,"column":19}},"range":[2319,2335],"raw":" $(v,w) \\in Edge"}],"loc":{"start":{"line":106,"column":3},"end":{"line":106,"column":20}},"range":[2319,2336],"raw":" $(v,w) \\in Edge$"}],"loc":{"start":{"line":106,"column":0},"end":{"line":106,"column":20}},"range":[2316,2336],"raw":"\n-  $(v,w) \\in Edge$"},{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"InlineMath","value":"(v,k) \\in Edge","data":{"hName":"span","hProperties":{"className":["math","math-inline"]},"hChildren":[{"type":"Str","value":"(v,k) \\in Edge"}]},"loc":{"start":{"line":107,"column":3},"end":{"line":107,"column":19}},"range":[2340,2356],"raw":" $(v,k) \\in Edge"}],"loc":{"start":{"line":107,"column":3},"end":{"line":107,"column":20}},"range":[2340,2357],"raw":" $(v,k) \\in Edge$"}],"loc":{"start":{"line":107,"column":0},"end":{"line":107,"column":20}},"range":[2337,2357],"raw":"\n-  $(v,k) \\in Edge$"}],"loc":{"start":{"line":104,"column":0},"end":{"line":107,"column":20}},"range":[2267,2357],"raw":"\n- w是顶点v在深度优先生成树上的孩子结点\n- k是顶点v在深度优先生成树上由回边连结的祖先节点\n-  $(v,w) \\in Edge$ \n-  $(v,k) \\in Edge$"}],"loc":{"start":{"line":1,"column":0},"end":{"line":108,"column":0}},"range":[0,2358],"raw":"﻿---\ntags: ['数据结构','图']\n---\n# 图的连通性问题\n\n## 无向图的连通分量和生成树\n\n- 对于连通图，从一个顶点出发，进行深度或者广度优先搜索，就可以访问到所有的顶点\n- 对于非连通图，需要从多个顶点出发进行搜索，每一次从一个新的起始点出发搜索到的各个顶点访问序列恰好为各个连通分量的顶点集。\n\n深度优先得到的生成树成为深度优先生成树，广度优先得到的生成树成为广度优先生成树。\n\n对于非连通图，每个联通分量中的顶点集和遍历所经过的边构成的生成树组成了非连通图的生成森林。\n\n## 有向图的强连通分量\n\n深度优先搜索是生成有向图的强连通分量的一种有效方式。\n\n以十字链表作为有向图的存储方式：\n\n- 从某个顶点出发沿着以该顶点为弧尾的弧，进行深度优先搜索遍历，按照其所有邻接点都完成的顺序将所有顶点排列起来。\n- 从最后完成搜索的节点出发，沿着以该结点为弧头的顶点进行深度优先搜索，如果此次遍历不能访问到所有的顶点，则从余下的顶点中最后完成搜索的顶点出发，继续进行深度优先搜索，以此类推，直至图中所有的顶点都被访问一次为止。\n\n## 最小生成树(MST)\n\n生成树：连通图包含全部顶点的一个极小连通子图。\n\n对于带权无向连通图，最小生成树是其所有生成树中所有边的权值最小的生成树。\n\n### 性质\n\n- 不一定唯一：只有当所有边的权值均不相同或者只有顶点数-1条边的时候，最小生成树一定唯一的，其他时候不一定唯一\n- 权重之和唯一：最小生成树的权值之和一定是唯一的\n- 最小生成树的边数等于顶点数-1\n\n## 最小生成树的生成算法\n\n贪心算法\n\n```c\nGENRIC_MST(G){\n    T = NULL;\n    while T 未生成一棵生成树{\n        do 找到一条最下的代价边(u, v)并且加入T后不会产生回路;\n        T = Tu(u, v);\n    }\n}\n```\n\n### Prim算法\n\n- 初始化：向空的结果树 $T=(V_{T}, E_{T})$ 中添加图 $G=(V,E)$ 中的任意顶点 $v_{0}$ ，使 $V_{T}=\\{u_{0}\\}$ ， $E_{T}$ 为空集；\n- 从G中选取符合  $\\{(u,v)\\lvert u \\in V_{T}, v \\in (V-V_{T})\\}$ （此条件避免了产生回路） 且具有最小权值的边  $(u, v)$  的顶点，然后令  $V_{T}=V_{T}\\cup\\{v\\}$ ， $E_{T}=E_{T}\\cup\\{(u,v)\\}$ ，重复这个步骤，直到 $V_{T}=V$ 。\n\n```c\n// 记录最小的边的辅助数组\nstruct {\n    VertexType adjvex;\n    VRType lowcost;\n} closedge[MAX_VERTEX_NUM];\n\nvoid MinSpanTreePrim(Graph g, VertexType u){\n    k = locate(g, u);\n    for(j=0;j<g.vexnum;j++){\n        if(j != k) closedge[j] = {u, g.arcs[k][j].adj};\n    }\n    closedge[k].lowcost = 0;\n    for(i=1;i<g.vexnum;i++){\n        k = minium(closedge);\n        closedge[k].lowcost = 0;\n        for(j=0;j<g.vexnum;j++){\n            if(g.arcs[k][j].adj < closedge[j].lowcost){\n                closedge[j] = {g.vexs[k], g.arcs[k][j].adj};\n            }\n        }\n    }\n}\n```\n\n### 关节点和重连通分量\n\n如果删去顶点v和与顶点v相关联的各边后，将图分割为两个或多个连通分量，则称顶点v为改图的一个关节点(articulation point，也被称为割点)。\n\n没有关节点的连通图成为重连通图(bicconected graph)。在重连通图上，任意两个节点之间都至少有两条路径，删去某个顶点及依附于某个顶点的各边后，也不破坏图的连通性。\n\n连通度：若连通图至少需要删除k个顶点，才能破坏其连通性，则称该连通图的连通度为k。\n\n利用深度优先搜索可以求图的关节点：\n\n![PNG??.png](https://i.loli.net/2020/08/02/oUwPD2EAG6JRyde.png)\n\n深度优先生成树中，实线表示树边，虚线表示回边（不再生成树上的边）。树中任意一个结点v的孩子结点为在它之后搜索的结点，双亲结点或者通过回边与之相连的祖先节点是在它之前搜索的结点。\n\n关节点有以下两种特性：\n\n- 若生成树的根由两棵或以上的子树，此根节点必为关节点\n- 非叶子顶点v，某棵子树的根和子树的其他结点均没有指向v祖先的回边，那么此顶点v必为一个关节点\n\n对图 $Graph=(V,\\{Edge\\})$ ，重新定义访问时得visited，引入一个low函数：\n\n $low(v)=Min\\{visited[v],low[w],visited[k]\\}$ \n\n其中：\n- w是顶点v在深度优先生成树上的孩子结点\n- k是顶点v在深度优先生成树上由回边连结的祖先节点\n-  $(v,w) \\in Edge$ \n-  $(v,k) \\in Edge$ "},"catalogue":{"title":"图的连通性问题","json-path":"数据结构/2020-08-01-图的连通性问题.json","mdate":"2020-08-01","cover":"https://i.328888.xyz/2023/01/01/tZQYp.jpeg","icon":"💊","visible":true,"tags":["数据结构","图"]}}