{"ast":{"type":"Document","children":[{"type":"Header","depth":1,"children":[{"type":"Str","value":"ESM(import/export)","loc":{"start":{"line":1,"column":2},"end":{"line":1,"column":20}},"range":[2,20],"raw":"ESM(import/export)"}],"loc":{"start":{"line":1,"column":0},"end":{"line":1,"column":20}},"range":[0,20],"raw":"# ESM(import/export)"},{"type":"Paragraph","children":[{"type":"Str","value":"Tags: exports, import","loc":{"start":{"line":3,"column":0},"end":{"line":3,"column":21}},"range":[22,43],"raw":"Tags: exports, import"}],"loc":{"start":{"line":3,"column":0},"end":{"line":3,"column":21}},"range":[22,43],"raw":"Tags: exports, import"},{"type":"Header","depth":2,"children":[{"type":"Str","value":"概述","loc":{"start":{"line":5,"column":3},"end":{"line":5,"column":5}},"range":[48,50],"raw":"概述"}],"loc":{"start":{"line":5,"column":0},"end":{"line":5,"column":5}},"range":[45,50],"raw":"## 概述"},{"type":"Paragraph","children":[{"type":"Str","value":"在 ES6 中，引入了一套新的模块化规范，从语言层面实现了模块功能，那就是 ESM。","loc":{"start":{"line":7,"column":0},"end":{"line":7,"column":42}},"range":[52,94],"raw":"在 ES6 中，引入了一套新的模块化规范，从语言层面实现了模块功能，那就是 ESM。"}],"loc":{"start":{"line":7,"column":0},"end":{"line":7,"column":42}},"range":[52,94],"raw":"在 ES6 中，引入了一套新的模块化规范，从语言层面实现了模块功能，那就是 ESM。"},{"type":"Paragraph","children":[{"type":"Str","value":"ESM 模块的 import 语句，","loc":{"start":{"line":9,"column":0},"end":{"line":9,"column":18}},"range":[96,114],"raw":"ESM 模块的 import 语句，"},{"type":"Strong","children":[{"type":"Str","value":"是静态解析的，在编译时，就会解析并加载对应的模块","loc":{"start":{"line":9,"column":20},"end":{"line":9,"column":44}},"range":[116,140],"raw":"是静态解析的，在编译时，就会解析并加载对应的模块"}],"loc":{"start":{"line":9,"column":18},"end":{"line":9,"column":46}},"range":[114,142],"raw":"**是静态解析的，在编译时，就会解析并加载对应的模块**"},{"type":"Str","value":"。所以使用 ESM 时，import 语句需要在文件的顶层。","loc":{"start":{"line":9,"column":46},"end":{"line":9,"column":76}},"range":[142,172],"raw":"。所以使用 ESM 时，import 语句需要在文件的顶层。"}],"loc":{"start":{"line":9,"column":0},"end":{"line":9,"column":76}},"range":[96,172],"raw":"ESM 模块的 import 语句，**是静态解析的，在编译时，就会解析并加载对应的模块**。所以使用 ESM 时，import 语句需要在文件的顶层。"},{"type":"Header","depth":2,"children":[{"type":"Str","value":"加载过程","loc":{"start":{"line":11,"column":3},"end":{"line":11,"column":7}},"range":[177,181],"raw":"加载过程"}],"loc":{"start":{"line":11,"column":0},"end":{"line":11,"column":7}},"range":[174,181],"raw":"## 加载过程"},{"type":"Paragraph","children":[{"type":"Str","value":"在 ESM 中，模块的加载是","loc":{"start":{"line":13,"column":0},"end":{"line":13,"column":14}},"range":[183,197],"raw":"在 ESM 中，模块的加载是"},{"type":"Strong","children":[{"type":"Str","value":"异步执行","loc":{"start":{"line":13,"column":16},"end":{"line":13,"column":20}},"range":[199,203],"raw":"异步执行"}],"loc":{"start":{"line":13,"column":14},"end":{"line":13,"column":22}},"range":[197,205],"raw":"**异步执行**"},{"type":"Str","value":"的。在第一阶段，所有使用到 import 和 export 关键字的语句都会被解析，用来构建","loc":{"start":{"line":13,"column":22},"end":{"line":13,"column":68}},"range":[205,251],"raw":"的。在第一阶段，所有使用到 import 和 export 关键字的语句都会被解析，用来构建"},{"type":"Strong","children":[{"type":"Str","value":"依赖关系图","loc":{"start":{"line":13,"column":70},"end":{"line":13,"column":75}},"range":[253,258],"raw":"依赖关系图"}],"loc":{"start":{"line":13,"column":68},"end":{"line":13,"column":77}},"range":[251,260],"raw":"**依赖关系图**"},{"type":"Str","value":"。在此过程中，被引入的脚本并不会立即执行。","loc":{"start":{"line":13,"column":77},"end":{"line":13,"column":98}},"range":[260,281],"raw":"。在此过程中，被引入的脚本并不会立即执行。"}],"loc":{"start":{"line":13,"column":0},"end":{"line":13,"column":98}},"range":[183,281],"raw":"在 ESM 中，模块的加载是**异步执行**的。在第一阶段，所有使用到 import 和 export 关键字的语句都会被解析，用来构建**依赖关系图**。在此过程中，被引入的脚本并不会立即执行。"},{"type":"Paragraph","children":[{"type":"Str","value":"ESM 模块在加载的过程中，不需要实际执行被引入的文件的代码，一些 named import 内的错误就可以被发现。","loc":{"start":{"line":15,"column":0},"end":{"line":15,"column":58}},"range":[283,341],"raw":"ESM 模块在加载的过程中，不需要实际执行被引入的文件的代码，一些 named import 内的错误就可以被发现。"}],"loc":{"start":{"line":15,"column":0},"end":{"line":15,"column":58}},"range":[283,341],"raw":"ESM 模块在加载的过程中，不需要实际执行被引入的文件的代码，一些 named import 内的错误就可以被发现。"},{"type":"Paragraph","children":[{"type":"Str","value":"ESM 模块在加载的过程中，会从入口文件开始，根据 import 关键字语句，由外到内构建模块之间的**依赖关系图，**直到没有任何其他依赖的模块。然后由内向外执行，一个模块依赖的其他模块都执行完成以后，这个模块才能得到执行。","loc":{"start":{"line":17,"column":0},"end":{"line":17,"column":113}},"range":[343,456],"raw":"ESM 模块在加载的过程中，会从入口文件开始，根据 import 关键字语句，由外到内构建模块之间的**依赖关系图，**直到没有任何其他依赖的模块。然后由内向外执行，一个模块依赖的其他模块都执行完成以后，这个模块才能得到执行。"}],"loc":{"start":{"line":17,"column":0},"end":{"line":17,"column":113}},"range":[343,456],"raw":"ESM 模块在加载的过程中，会从入口文件开始，根据 import 关键字语句，由外到内构建模块之间的**依赖关系图，**直到没有任何其他依赖的模块。然后由内向外执行，一个模块依赖的其他模块都执行完成以后，这个模块才能得到执行。"},{"type":"Header","depth":2,"children":[{"type":"Str","value":"特点","loc":{"start":{"line":19,"column":3},"end":{"line":19,"column":5}},"range":[461,463],"raw":"特点"}],"loc":{"start":{"line":19,"column":0},"end":{"line":19,"column":5}},"range":[458,463],"raw":"## 特点"},{"type":"Header","depth":3,"children":[{"type":"Str","value":"1. ESM 导入和导出是引用传递","loc":{"start":{"line":21,"column":4},"end":{"line":21,"column":21}},"range":[469,486],"raw":"1. ESM 导入和导出是引用传递"}],"loc":{"start":{"line":21,"column":0},"end":{"line":21,"column":21}},"range":[465,486],"raw":"### 1. ESM 导入和导出是引用传递"},{"type":"Paragraph","children":[{"type":"Str","value":"通过 export 导出值，通过 import 导入，**这两个是关键字，**且使用 export 导出的值是引用传递（两个标识符指向的是同一块内存）","loc":{"start":{"line":23,"column":0},"end":{"line":23,"column":75}},"range":[488,563],"raw":"通过 export 导出值，通过 import 导入，**这两个是关键字，**且使用 export 导出的值是引用传递（两个标识符指向的是同一块内存）"}],"loc":{"start":{"line":23,"column":0},"end":{"line":23,"column":75}},"range":[488,563],"raw":"通过 export 导出值，通过 import 导入，**这两个是关键字，**且使用 export 导出的值是引用传递（两个标识符指向的是同一块内存）"},{"type":"CodeBlock","lang":"jsx","meta":null,"value":"// a.js\nexport let a = 1;\nexport function changeA(v) {\n\ta = v;\n}\n\n// b.js\nimport { a, changeA } from 'a';\nconsole.log(a);\nchangeA(2);\nconsole.log(a);\n\n// 输出\n// 1\n// 2","loc":{"start":{"line":25,"column":0},"end":{"line":41,"column":3}},"range":[565,742],"raw":"```jsx\n// a.js\nexport let a = 1;\nexport function changeA(v) {\n\ta = v;\n}\n\n// b.js\nimport { a, changeA } from 'a';\nconsole.log(a);\nchangeA(2);\nconsole.log(a);\n\n// 输出\n// 1\n// 2\n```"},{"type":"Header","depth":3,"children":[{"type":"Str","value":"2. ESM 模块内支持 Top Level Await","loc":{"start":{"line":43,"column":4},"end":{"line":43,"column":32}},"range":[748,776],"raw":"2. ESM 模块内支持 Top Level Await"}],"loc":{"start":{"line":43,"column":0},"end":{"line":43,"column":32}},"range":[744,776],"raw":"### 2. ESM 模块内支持 Top Level Await"},{"type":"Paragraph","children":[{"type":"Str","value":"得益于 esm 模块的加载机制，模块的执行发生在依赖关系图构建完成以后，在 esm 模块内，可以在模块的顶层使用 await 关键字。","loc":{"start":{"line":45,"column":0},"end":{"line":45,"column":67}},"range":[778,845],"raw":"得益于 esm 模块的加载机制，模块的执行发生在依赖关系图构建完成以后，在 esm 模块内，可以在模块的顶层使用 await 关键字。"}],"loc":{"start":{"line":45,"column":0},"end":{"line":45,"column":67}},"range":[778,845],"raw":"得益于 esm 模块的加载机制，模块的执行发生在依赖关系图构建完成以后，在 esm 模块内，可以在模块的顶层使用 await 关键字。"},{"type":"Paragraph","children":[{"type":"Str","value":"下面是一段引用自 v8 博客(","loc":{"start":{"line":47,"column":0},"end":{"line":47,"column":15}},"range":[847,862],"raw":"下面是一段引用自 v8 博客("},{"type":"Link","title":null,"url":"https://v8.dev/features/top-level-await","children":[{"type":"Str","value":"Top-level await","loc":{"start":{"line":47,"column":16},"end":{"line":47,"column":31}},"range":[863,878],"raw":"Top-level await"}],"loc":{"start":{"line":47,"column":15},"end":{"line":47,"column":73}},"range":[862,920],"raw":"[Top-level await](https://v8.dev/features/top-level-await)"},{"type":"Str","value":")的一段：","loc":{"start":{"line":47,"column":73},"end":{"line":47,"column":78}},"range":[920,925],"raw":")的一段："}],"loc":{"start":{"line":47,"column":0},"end":{"line":47,"column":78}},"range":[847,925],"raw":"下面是一段引用自 v8 博客([Top-level await](https://v8.dev/features/top-level-await))的一段："},{"type":"BlockQuote","children":[{"type":"Paragraph","children":[{"type":"Str","value":"Perhaps you have seen the infamous gist by Rich Harris which initially outlined a number of concerns about top-level await and urged the JavaScript language not to implement the feature. Some specific concerns were:","loc":{"start":{"line":49,"column":2},"end":{"line":49,"column":217}},"range":[929,1144],"raw":"Perhaps you have seen the infamous gist by Rich Harris which initially outlined a number of concerns about top-level await and urged the JavaScript language not to implement the feature. Some specific concerns were:"}],"loc":{"start":{"line":49,"column":2},"end":{"line":49,"column":217}},"range":[929,1144],"raw":"Perhaps you have seen the infamous gist by Rich Harris which initially outlined a number of concerns about top-level await and urged the JavaScript language not to implement the feature. Some specific concerns were:"},{"type":"List","ordered":false,"start":null,"spread":false,"children":[{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"Top-level await could block execution.","loc":{"start":{"line":51,"column":4},"end":{"line":51,"column":42}},"range":[1152,1190],"raw":"Top-level await could block execution."}],"loc":{"start":{"line":51,"column":4},"end":{"line":51,"column":42}},"range":[1152,1190],"raw":"Top-level await could block execution."}],"loc":{"start":{"line":51,"column":2},"end":{"line":51,"column":42}},"range":[1150,1190],"raw":"- Top-level await could block execution."},{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"Top-level await could block fetching resources.","loc":{"start":{"line":52,"column":4},"end":{"line":52,"column":51}},"range":[1195,1242],"raw":"Top-level await could block fetching resources."}],"loc":{"start":{"line":52,"column":4},"end":{"line":52,"column":51}},"range":[1195,1242],"raw":"Top-level await could block fetching resources."}],"loc":{"start":{"line":52,"column":2},"end":{"line":52,"column":51}},"range":[1193,1242],"raw":"- Top-level await could block fetching resources."},{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"There would be no clear interop story for CommonJS modules.","loc":{"start":{"line":53,"column":4},"end":{"line":53,"column":63}},"range":[1247,1306],"raw":"There would be no clear interop story for CommonJS modules."}],"loc":{"start":{"line":53,"column":4},"end":{"line":53,"column":63}},"range":[1247,1306],"raw":"There would be no clear interop story for CommonJS modules."}],"loc":{"start":{"line":53,"column":2},"end":{"line":53,"column":63}},"range":[1245,1306],"raw":"- There would be no clear interop story for CommonJS modules."}],"loc":{"start":{"line":51,"column":2},"end":{"line":54,"column":2}},"range":[1150,1309],"raw":"- Top-level await could block execution.\n> - Top-level await could block fetching resources.\n> - There would be no clear interop story for CommonJS modules.\n> "},{"type":"Paragraph","children":[{"type":"Str","value":"The stage 3 version of the proposal directly addresses these issues:","loc":{"start":{"line":55,"column":2},"end":{"line":55,"column":70}},"range":[1312,1380],"raw":"The stage 3 version of the proposal directly addresses these issues:"}],"loc":{"start":{"line":55,"column":2},"end":{"line":55,"column":70}},"range":[1312,1380],"raw":"The stage 3 version of the proposal directly addresses these issues:"},{"type":"List","ordered":false,"start":null,"spread":false,"children":[{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Strong","children":[{"type":"Str","value":"As siblings are able to execute","loc":{"start":{"line":57,"column":6},"end":{"line":57,"column":37}},"range":[1390,1421],"raw":"As siblings are able to execute"}],"loc":{"start":{"line":57,"column":4},"end":{"line":57,"column":39}},"range":[1388,1423],"raw":"**As siblings are able to execute**"},{"type":"Str","value":", there is no definitive blocking.","loc":{"start":{"line":57,"column":39},"end":{"line":57,"column":73}},"range":[1423,1457],"raw":", there is no definitive blocking."}],"loc":{"start":{"line":57,"column":4},"end":{"line":57,"column":73}},"range":[1388,1457],"raw":"**As siblings are able to execute**, there is no definitive blocking."}],"loc":{"start":{"line":57,"column":2},"end":{"line":57,"column":73}},"range":[1386,1457],"raw":"- **As siblings are able to execute**, there is no definitive blocking."},{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Strong","children":[{"type":"Str","value":"Top-level await occurs during the execution phase of the module graph","loc":{"start":{"line":58,"column":6},"end":{"line":58,"column":75}},"range":[1464,1533],"raw":"Top-level await occurs during the execution phase of the module graph"}],"loc":{"start":{"line":58,"column":4},"end":{"line":58,"column":77}},"range":[1462,1535],"raw":"**Top-level await occurs during the execution phase of the module graph**"},{"type":"Str","value":". At this point all resources have already been fetched and linked. There is no risk of blocking fetching resources.","loc":{"start":{"line":58,"column":77},"end":{"line":58,"column":193}},"range":[1535,1651],"raw":". At this point all resources have already been fetched and linked. There is no risk of blocking fetching resources."}],"loc":{"start":{"line":58,"column":4},"end":{"line":58,"column":193}},"range":[1462,1651],"raw":"**Top-level await occurs during the execution phase of the module graph**. At this point all resources have already been fetched and linked. There is no risk of blocking fetching resources."}],"loc":{"start":{"line":58,"column":2},"end":{"line":58,"column":193}},"range":[1460,1651],"raw":"- **Top-level await occurs during the execution phase of the module graph**. At this point all resources have already been fetched and linked. There is no risk of blocking fetching resources."},{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Strong","children":[{"type":"Str","value":"Top-level await is limited to [ESM] modules","loc":{"start":{"line":59,"column":6},"end":{"line":59,"column":49}},"range":[1658,1701],"raw":"Top-level await is limited to [ESM] modules"}],"loc":{"start":{"line":59,"column":4},"end":{"line":59,"column":51}},"range":[1656,1703],"raw":"**Top-level await is limited to [ESM] modules**"},{"type":"Str","value":". There is explicitly no support for scripts or for CommonJS modules.","loc":{"start":{"line":59,"column":51},"end":{"line":59,"column":120}},"range":[1703,1772],"raw":". There is explicitly no support for scripts or for CommonJS modules."}],"loc":{"start":{"line":59,"column":4},"end":{"line":59,"column":120}},"range":[1656,1772],"raw":"**Top-level await is limited to [ESM] modules**. There is explicitly no support for scripts or for CommonJS modules."}],"loc":{"start":{"line":59,"column":2},"end":{"line":59,"column":120}},"range":[1654,1772],"raw":"- **Top-level await is limited to [ESM] modules**. There is explicitly no support for scripts or for CommonJS modules."}],"loc":{"start":{"line":57,"column":2},"end":{"line":59,"column":120}},"range":[1386,1772],"raw":"- **As siblings are able to execute**, there is no definitive blocking.\n> - **Top-level await occurs during the execution phase of the module graph**. At this point all resources have already been fetched and linked. There is no risk of blocking fetching resources.\n> - **Top-level await is limited to [ESM] modules**. There is explicitly no support for scripts or for CommonJS modules."}],"loc":{"start":{"line":49,"column":0},"end":{"line":59,"column":120}},"range":[927,1772],"raw":"> Perhaps you have seen the infamous gist by Rich Harris which initially outlined a number of concerns about top-level await and urged the JavaScript language not to implement the feature. Some specific concerns were:\n> \n> - Top-level await could block execution.\n> - Top-level await could block fetching resources.\n> - There would be no clear interop story for CommonJS modules.\n> \n> The stage 3 version of the proposal directly addresses these issues:\n> \n> - **As siblings are able to execute**, there is no definitive blocking.\n> - **Top-level await occurs during the execution phase of the module graph**. At this point all resources have already been fetched and linked. There is no risk of blocking fetching resources.\n> - **Top-level await is limited to [ESM] modules**. There is explicitly no support for scripts or for CommonJS modules."},{"type":"CodeBlock","lang":"jsx","meta":null,"value":"// CommonJS\nconst a = require('a.cjs');\nconst b = require('b.cjs');\n// ESM\nimport { a } from 'a.mjs';\nimport { b } from 'b.mjs';","loc":{"start":{"line":61,"column":0},"end":{"line":68,"column":3}},"range":[1774,1913],"raw":"```jsx\n// CommonJS\nconst a = require('a.cjs');\nconst b = require('b.cjs');\n// ESM\nimport { a } from 'a.mjs';\nimport { b } from 'b.mjs';\n```"},{"type":"Paragraph","children":[{"type":"Str","value":"由于 CommonJS 的 require 函数是同步执行的，所以如果 a.cjs 内有顶层的 await ，那么 require(’b.cjs’) 的语句就会被阻塞，并且 CommonJS 是在执行到 require 的时候才会加载并执行对应的模块，顶层 await 甚至会阻塞到 b.cjs 资源的加载。","loc":{"start":{"line":70,"column":0},"end":{"line":70,"column":154}},"range":[1915,2069],"raw":"由于 CommonJS 的 require 函数是同步执行的，所以如果 a.cjs 内有顶层的 await ，那么 require(’b.cjs’) 的语句就会被阻塞，并且 CommonJS 是在执行到 require 的时候才会加载并执行对应的模块，顶层 await 甚至会阻塞到 b.cjs 资源的加载。"}],"loc":{"start":{"line":70,"column":0},"end":{"line":70,"column":154}},"range":[1915,2069],"raw":"由于 CommonJS 的 require 函数是同步执行的，所以如果 a.cjs 内有顶层的 await ，那么 require(’b.cjs’) 的语句就会被阻塞，并且 CommonJS 是在执行到 require 的时候才会加载并执行对应的模块，顶层 await 甚至会阻塞到 b.cjs 资源的加载。"},{"type":"Paragraph","children":[{"type":"Str","value":"但是在 ESM 中就不会有这个问题，因为 import 的构建依赖关系图的过程是在编译时就会确定好了，此时不会执行模块的代码。各个模块也是在一个异步的函数内执行的，所以模块执行时也不会相互阻塞。","loc":{"start":{"line":72,"column":0},"end":{"line":72,"column":97}},"range":[2071,2168],"raw":"但是在 ESM 中就不会有这个问题，因为 import 的构建依赖关系图的过程是在编译时就会确定好了，此时不会执行模块的代码。各个模块也是在一个异步的函数内执行的，所以模块执行时也不会相互阻塞。"}],"loc":{"start":{"line":72,"column":0},"end":{"line":72,"column":97}},"range":[2071,2168],"raw":"但是在 ESM 中就不会有这个问题，因为 import 的构建依赖关系图的过程是在编译时就会确定好了，此时不会执行模块的代码。各个模块也是在一个异步的函数内执行的，所以模块执行时也不会相互阻塞。"}],"loc":{"start":{"line":1,"column":0},"end":{"line":72,"column":97}},"range":[0,2168],"raw":"# ESM(import/export)\n\nTags: exports, import\n\n## 概述\n\n在 ES6 中，引入了一套新的模块化规范，从语言层面实现了模块功能，那就是 ESM。\n\nESM 模块的 import 语句，**是静态解析的，在编译时，就会解析并加载对应的模块**。所以使用 ESM 时，import 语句需要在文件的顶层。\n\n## 加载过程\n\n在 ESM 中，模块的加载是**异步执行**的。在第一阶段，所有使用到 import 和 export 关键字的语句都会被解析，用来构建**依赖关系图**。在此过程中，被引入的脚本并不会立即执行。\n\nESM 模块在加载的过程中，不需要实际执行被引入的文件的代码，一些 named import 内的错误就可以被发现。\n\nESM 模块在加载的过程中，会从入口文件开始，根据 import 关键字语句，由外到内构建模块之间的**依赖关系图，**直到没有任何其他依赖的模块。然后由内向外执行，一个模块依赖的其他模块都执行完成以后，这个模块才能得到执行。\n\n## 特点\n\n### 1. ESM 导入和导出是引用传递\n\n通过 export 导出值，通过 import 导入，**这两个是关键字，**且使用 export 导出的值是引用传递（两个标识符指向的是同一块内存）\n\n```jsx\n// a.js\nexport let a = 1;\nexport function changeA(v) {\n\ta = v;\n}\n\n// b.js\nimport { a, changeA } from 'a';\nconsole.log(a);\nchangeA(2);\nconsole.log(a);\n\n// 输出\n// 1\n// 2\n```\n\n### 2. ESM 模块内支持 Top Level Await\n\n得益于 esm 模块的加载机制，模块的执行发生在依赖关系图构建完成以后，在 esm 模块内，可以在模块的顶层使用 await 关键字。\n\n下面是一段引用自 v8 博客([Top-level await](https://v8.dev/features/top-level-await))的一段：\n\n> Perhaps you have seen the infamous gist by Rich Harris which initially outlined a number of concerns about top-level await and urged the JavaScript language not to implement the feature. Some specific concerns were:\n> \n> - Top-level await could block execution.\n> - Top-level await could block fetching resources.\n> - There would be no clear interop story for CommonJS modules.\n> \n> The stage 3 version of the proposal directly addresses these issues:\n> \n> - **As siblings are able to execute**, there is no definitive blocking.\n> - **Top-level await occurs during the execution phase of the module graph**. At this point all resources have already been fetched and linked. There is no risk of blocking fetching resources.\n> - **Top-level await is limited to [ESM] modules**. There is explicitly no support for scripts or for CommonJS modules.\n\n```jsx\n// CommonJS\nconst a = require('a.cjs');\nconst b = require('b.cjs');\n// ESM\nimport { a } from 'a.mjs';\nimport { b } from 'b.mjs';\n```\n\n由于 CommonJS 的 require 函数是同步执行的，所以如果 a.cjs 内有顶层的 await ，那么 require(’b.cjs’) 的语句就会被阻塞，并且 CommonJS 是在执行到 require 的时候才会加载并执行对应的模块，顶层 await 甚至会阻塞到 b.cjs 资源的加载。\n\n但是在 ESM 中就不会有这个问题，因为 import 的构建依赖关系图的过程是在编译时就会确定好了，此时不会执行模块的代码。各个模块也是在一个异步的函数内执行的，所以模块执行时也不会相互阻塞。"},"catalogue":{"title":"ESM(import export)","json-path":"前端开发/前端工程化/JS模块化/模块化规范 819d6c57d4154f94bdf0781db857fdb7/模块化规范 0976128fbb0648a791aca022b8a2f01b/ESM(import export) 3804676a20cb4fbaad218fcce635ab01.json","cover":"https://i.328888.xyz/2023/01/01/tZTfx.jpeg","icon":"🐻","tags":["无标签"],"visible":false}}