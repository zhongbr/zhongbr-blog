{"ast":{"type":"Document","children":[{"type":"Header","depth":1,"children":[{"type":"Str","value":"CommonJS(exports/require)","loc":{"start":{"line":1,"column":2},"end":{"line":1,"column":27}},"range":[2,27],"raw":"CommonJS(exports/require)"}],"loc":{"start":{"line":1,"column":0},"end":{"line":1,"column":27}},"range":[0,27],"raw":"# CommonJS(exports/require)"},{"type":"Paragraph","children":[{"type":"Str","value":"Tags: exports, module.exports, require","loc":{"start":{"line":3,"column":0},"end":{"line":3,"column":38}},"range":[29,67],"raw":"Tags: exports, module.exports, require"}],"loc":{"start":{"line":3,"column":0},"end":{"line":3,"column":38}},"range":[29,67],"raw":"Tags: exports, module.exports, require"},{"type":"Header","depth":2,"children":[{"type":"Str","value":"概述","loc":{"start":{"line":5,"column":3},"end":{"line":5,"column":5}},"range":[72,74],"raw":"概述"}],"loc":{"start":{"line":5,"column":0},"end":{"line":5,"column":5}},"range":[69,74],"raw":"## 概述"},{"type":"Paragraph","children":[{"type":"Str","value":"CommonJS 是 Node 默认的模块化方案。","loc":{"start":{"line":7,"column":0},"end":{"line":7,"column":25}},"range":[76,101],"raw":"CommonJS 是 Node 默认的模块化方案。"}],"loc":{"start":{"line":7,"column":0},"end":{"line":7,"column":25}},"range":[76,101],"raw":"CommonJS 是 Node 默认的模块化方案。"},{"type":"Paragraph","children":[{"type":"Str","value":"require/exports 是由 JavaScript 社区开发者在 ECMAScript 制定模块化规则之前，自行拟定的规则，得到了广泛的承认和使用。","loc":{"start":{"line":9,"column":0},"end":{"line":9,"column":78}},"range":[103,181],"raw":"require/exports 是由 JavaScript 社区开发者在 ECMAScript 制定模块化规则之前，自行拟定的规则，得到了广泛的承认和使用。"}],"loc":{"start":{"line":9,"column":0},"end":{"line":9,"column":78}},"range":[103,181],"raw":"require/exports 是由 JavaScript 社区开发者在 ECMAScript 制定模块化规则之前，自行拟定的规则，得到了广泛的承认和使用。"},{"type":"Paragraph","children":[{"type":"Str","value":"CommonJS 就是其代表性的模块化规范，也是 NodeJS 使用的模块化方案，并且 NodeJS 已经有很多基于 CommonJS 的包。","loc":{"start":{"line":11,"column":0},"end":{"line":11,"column":71}},"range":[183,254],"raw":"CommonJS 就是其代表性的模块化规范，也是 NodeJS 使用的模块化方案，并且 NodeJS 已经有很多基于 CommonJS 的包。"}],"loc":{"start":{"line":11,"column":0},"end":{"line":11,"column":71}},"range":[183,254],"raw":"CommonJS 就是其代表性的模块化规范，也是 NodeJS 使用的模块化方案，并且 NodeJS 已经有很多基于 CommonJS 的包。"},{"type":"Header","depth":2,"children":[{"type":"Str","value":"加载过程","loc":{"start":{"line":13,"column":3},"end":{"line":13,"column":7}},"range":[259,263],"raw":"加载过程"}],"loc":{"start":{"line":13,"column":0},"end":{"line":13,"column":7}},"range":[256,263],"raw":"## 加载过程"},{"type":"Paragraph","children":[{"type":"Strong","children":[{"type":"Str","value":"CommonJS 模块是动态并且同步执行的","loc":{"start":{"line":15,"column":2},"end":{"line":15,"column":23}},"range":[267,288],"raw":"CommonJS 模块是动态并且同步执行的"}],"loc":{"start":{"line":15,"column":0},"end":{"line":15,"column":25}},"range":[265,290],"raw":"**CommonJS 模块是动态并且同步执行的**"},{"type":"Str","value":"，执行到 require 函数语句时，对应的文件才会被加载并执行，将左右 module.exports 上设置的内容返回，所以在使用 require 时，并不要求 require 的位置，该语句可以在任意位置执行。","loc":{"start":{"line":15,"column":25},"end":{"line":15,"column":132}},"range":[290,397],"raw":"，执行到 require 函数语句时，对应的文件才会被加载并执行，将左右 module.exports 上设置的内容返回，所以在使用 require 时，并不要求 require 的位置，该语句可以在任意位置执行。"}],"loc":{"start":{"line":15,"column":0},"end":{"line":15,"column":132}},"range":[265,397],"raw":"**CommonJS 模块是动态并且同步执行的**，执行到 require 函数语句时，对应的文件才会被加载并执行，将左右 module.exports 上设置的内容返回，所以在使用 require 时，并不要求 require 的位置，该语句可以在任意位置执行。"},{"type":"Header","depth":2,"children":[{"type":"Str","value":"特点","loc":{"start":{"line":17,"column":3},"end":{"line":17,"column":5}},"range":[402,404],"raw":"特点"}],"loc":{"start":{"line":17,"column":0},"end":{"line":17,"column":5}},"range":[399,404],"raw":"## 特点"},{"type":"Paragraph","children":[{"type":"Str","value":"导入包时使用的 ","loc":{"start":{"line":19,"column":0},"end":{"line":19,"column":8}},"range":[406,414],"raw":"导入包时使用的 "},{"type":"Strong","children":[{"type":"Str","value":"require 只是普通的函数，exports 也只是一个普通对象","loc":{"start":{"line":19,"column":10},"end":{"line":19,"column":43}},"range":[416,449],"raw":"require 只是普通的函数，exports 也只是一个普通对象"}],"loc":{"start":{"line":19,"column":8},"end":{"line":19,"column":45}},"range":[414,451],"raw":"**require 只是普通的函数，exports 也只是一个普通对象**"},{"type":"Str","value":"，所以：","loc":{"start":{"line":19,"column":45},"end":{"line":19,"column":49}},"range":[451,455],"raw":"，所以："}],"loc":{"start":{"line":19,"column":0},"end":{"line":19,"column":49}},"range":[406,455],"raw":"导入包时使用的 **require 只是普通的函数，exports 也只是一个普通对象**，所以："},{"type":"List","ordered":false,"start":null,"spread":false,"children":[{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"对于基础数据类型（例如 number、string 等），通过 exports 暴露后再从 require 引入是值传递，如果模块内的值在 exports 后发生变化，","loc":{"start":{"line":21,"column":2},"end":{"line":21,"column":86}},"range":[459,543],"raw":"对于基础数据类型（例如 number、string 等），通过 exports 暴露后再从 require 引入是值传递，如果模块内的值在 exports 后发生变化，"},{"type":"Strong","children":[{"type":"Str","value":"由 require 引入的该值并不会发生变化","loc":{"start":{"line":21,"column":88},"end":{"line":21,"column":110}},"range":[545,567],"raw":"由 require 引入的该值并不会发生变化"}],"loc":{"start":{"line":21,"column":86},"end":{"line":21,"column":112}},"range":[543,569],"raw":"**由 require 引入的该值并不会发生变化**"},{"type":"Str","value":"。","loc":{"start":{"line":21,"column":112},"end":{"line":21,"column":113}},"range":[569,570],"raw":"。"}],"loc":{"start":{"line":21,"column":2},"end":{"line":21,"column":113}},"range":[459,570],"raw":"对于基础数据类型（例如 number、string 等），通过 exports 暴露后再从 require 引入是值传递，如果模块内的值在 exports 后发生变化，**由 require 引入的该值并不会发生变化**。"}],"loc":{"start":{"line":21,"column":0},"end":{"line":21,"column":113}},"range":[457,570],"raw":"- 对于基础数据类型（例如 number、string 等），通过 exports 暴露后再从 require 引入是值传递，如果模块内的值在 exports 后发生变化，**由 require 引入的该值并不会发生变化**。"},{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"对于复杂数据类型（对象等），通过 exports 暴露后再通过 require 引入时，是浅拷贝。","loc":{"start":{"line":22,"column":2},"end":{"line":22,"column":51}},"range":[573,622],"raw":"对于复杂数据类型（对象等），通过 exports 暴露后再通过 require 引入时，是浅拷贝。"}],"loc":{"start":{"line":22,"column":2},"end":{"line":22,"column":51}},"range":[573,622],"raw":"对于复杂数据类型（对象等），通过 exports 暴露后再通过 require 引入时，是浅拷贝。"}],"loc":{"start":{"line":22,"column":0},"end":{"line":22,"column":51}},"range":[571,622],"raw":"- 对于复杂数据类型（对象等），通过 exports 暴露后再通过 require 引入时，是浅拷贝。"}],"loc":{"start":{"line":21,"column":0},"end":{"line":22,"column":51}},"range":[457,622],"raw":"- 对于基础数据类型（例如 number、string 等），通过 exports 暴露后再从 require 引入是值传递，如果模块内的值在 exports 后发生变化，**由 require 引入的该值并不会发生变化**。\n- 对于复杂数据类型（对象等），通过 exports 暴露后再通过 require 引入时，是浅拷贝。"}],"loc":{"start":{"line":1,"column":0},"end":{"line":22,"column":51}},"range":[0,622],"raw":"# CommonJS(exports/require)\n\nTags: exports, module.exports, require\n\n## 概述\n\nCommonJS 是 Node 默认的模块化方案。\n\nrequire/exports 是由 JavaScript 社区开发者在 ECMAScript 制定模块化规则之前，自行拟定的规则，得到了广泛的承认和使用。\n\nCommonJS 就是其代表性的模块化规范，也是 NodeJS 使用的模块化方案，并且 NodeJS 已经有很多基于 CommonJS 的包。\n\n## 加载过程\n\n**CommonJS 模块是动态并且同步执行的**，执行到 require 函数语句时，对应的文件才会被加载并执行，将左右 module.exports 上设置的内容返回，所以在使用 require 时，并不要求 require 的位置，该语句可以在任意位置执行。\n\n## 特点\n\n导入包时使用的 **require 只是普通的函数，exports 也只是一个普通对象**，所以：\n\n- 对于基础数据类型（例如 number、string 等），通过 exports 暴露后再从 require 引入是值传递，如果模块内的值在 exports 后发生变化，**由 require 引入的该值并不会发生变化**。\n- 对于复杂数据类型（对象等），通过 exports 暴露后再通过 require 引入时，是浅拷贝。"},"catalogue":{"title":"CommonJS(exports require)","json-path":"前端开发/前端工程化/JS模块化/模块化规范 819d6c57d4154f94bdf0781db857fdb7/模块化规范 0976128fbb0648a791aca022b8a2f01b/CommonJS(exports require) 587c60e0e3754d63a252e9326f5c3d1e.json","cover":"https://i.328888.xyz/2022/12/31/ndOVF.jpeg","icon":"🍀","tags":["无标签"],"visible":false}}