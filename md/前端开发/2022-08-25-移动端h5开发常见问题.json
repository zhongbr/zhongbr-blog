{"ast":{"type":"Document","children":[{"type":"Yaml","value":"title: 'React 移动端 H5 踩坑集锦'\ntags: ['前端', 'h5']","loc":{"start":{"line":1,"column":0},"end":{"line":4,"column":3}},"range":[0,53],"raw":"---\ntitle: 'React 移动端 H5 踩坑集锦'\ntags: ['前端', 'h5']\n---","visible":false},{"type":"Header","depth":1,"children":[{"type":"Str","value":"React 移动端 H5 踩坑集锦","loc":{"start":{"line":5,"column":2},"end":{"line":5,"column":19}},"range":[56,73],"raw":"React 移动端 H5 踩坑集锦"}],"loc":{"start":{"line":5,"column":0},"end":{"line":5,"column":19}},"range":[54,73],"raw":"# React 移动端 H5 踩坑集锦"},{"type":"Header","depth":2,"children":[{"type":"Str","value":"浏览器状态缓存","loc":{"start":{"line":7,"column":3},"end":{"line":7,"column":10}},"range":[78,85],"raw":"浏览器状态缓存"}],"loc":{"start":{"line":7,"column":0},"end":{"line":7,"column":10}},"range":[75,85],"raw":"## 浏览器状态缓存"},{"type":"Paragraph","children":[{"type":"Str","value":"在 h5 应用中，从一个页面跳转到另一个页面，是一个非常常见的交互：比如逛某宝首页时，下拉翻了很多页之后，相中了一个商品，点开查看商品的详情页面。","loc":{"start":{"line":9,"column":0},"end":{"line":9,"column":73}},"range":[87,160],"raw":"在 h5 应用中，从一个页面跳转到另一个页面，是一个非常常见的交互：比如逛某宝首页时，下拉翻了很多页之后，相中了一个商品，点开查看商品的详情页面。"}],"loc":{"start":{"line":9,"column":0},"end":{"line":9,"column":73}},"range":[87,160],"raw":"在 h5 应用中，从一个页面跳转到另一个页面，是一个非常常见的交互：比如逛某宝首页时，下拉翻了很多页之后，相中了一个商品，点开查看商品的详情页面。"},{"type":"Paragraph","children":[{"type":"Str","value":"问题来了：","loc":{"start":{"line":11,"column":0},"end":{"line":11,"column":5}},"range":[162,167],"raw":"问题来了："},{"type":"Strong","children":[{"type":"Str","value":"如果此时直接按下返回键，返回到首页，是会回到之前的滚动位置，还是会回到首页的最顶部呢？","loc":{"start":{"line":11,"column":7},"end":{"line":11,"column":50}},"range":[169,212],"raw":"如果此时直接按下返回键，返回到首页，是会回到之前的滚动位置，还是会回到首页的最顶部呢？"}],"loc":{"start":{"line":11,"column":5},"end":{"line":11,"column":52}},"range":[167,214],"raw":"**如果此时直接按下返回键，返回到首页，是会回到之前的滚动位置，还是会回到首页的最顶部呢？**"}],"loc":{"start":{"line":11,"column":0},"end":{"line":11,"column":52}},"range":[162,214],"raw":"问题来了：**如果此时直接按下返回键，返回到首页，是会回到之前的滚动位置，还是会回到首页的最顶部呢？**"},{"type":"Paragraph","children":[{"type":"Str","value":"按照通常理解：不做任何处理的情况下，在 h5 内通过 window.location 等方式在同一个标签页下直接打开一个新的页面之后，老的页面的就会被浏览器销毁，\n按下返回时原本的页面就会刷新，此时页面应该会回到最开始的状态，也就是回到首页的最顶部。","loc":{"start":{"line":13,"column":0},"end":{"line":14,"column":43}},"range":[216,341],"raw":"按照通常理解：不做任何处理的情况下，在 h5 内通过 window.location 等方式在同一个标签页下直接打开一个新的页面之后，老的页面的就会被浏览器销毁，\n按下返回时原本的页面就会刷新，此时页面应该会回到最开始的状态，也就是回到首页的最顶部。"}],"loc":{"start":{"line":13,"column":0},"end":{"line":14,"column":43}},"range":[216,341],"raw":"按照通常理解：不做任何处理的情况下，在 h5 内通过 window.location 等方式在同一个标签页下直接打开一个新的页面之后，老的页面的就会被浏览器销毁，\n按下返回时原本的页面就会刷新，此时页面应该会回到最开始的状态，也就是回到首页的最顶部。"},{"type":"Header","depth":3,"children":[{"type":"Str","value":"验证","loc":{"start":{"line":16,"column":4},"end":{"line":16,"column":6}},"range":[347,349],"raw":"验证"}],"loc":{"start":{"line":16,"column":0},"end":{"line":16,"column":6}},"range":[343,349],"raw":"### 验证"},{"type":"Paragraph","children":[{"type":"Str","value":"但是事实真的是如此吗？写一个小小的 demo 来验证一下便知：","loc":{"start":{"line":18,"column":0},"end":{"line":18,"column":31}},"range":[351,382],"raw":"但是事实真的是如此吗？写一个小小的 demo 来验证一下便知："}],"loc":{"start":{"line":18,"column":0},"end":{"line":18,"column":31}},"range":[351,382],"raw":"但是事实真的是如此吗？写一个小小的 demo 来验证一下便知："},{"type":"CodeBlock","lang":"html","meta":null,"value":"<!-- 这是首页: index.html -->\n<html lang=\"en\">\n    <head>\n        <meta charset=\"utf-8\"/>\n        <title>首页</title>\n        <style>\n            .good-item {\n                height: 100px;\n                width: calc(100vw - 40px);\n                margin: 20px;\n                background-color: #f3f3f3;\n            }\n        </style>\n    </head>\n    <body>\n        <script lang=\"javascript\">\n            function onClickItem() {\n                window.location.href = '/good-detail.html'\n            }\n        </script>\n        <div class=\"good-item\" onclick=\"onClickItem()\">商品1</div>\n        <div class=\"good-item\" onclick=\"onClickItem()\">商品2</div>\n        <div class=\"good-item\" onclick=\"onClickItem()\">商品3</div>\n        <div class=\"good-item\" onclick=\"onClickItem()\">商品4</div>\n        <div class=\"good-item\" onclick=\"onClickItem()\">商品5</div>\n        <div class=\"good-item\" onclick=\"onClickItem()\">商品6</div>\n        <div class=\"good-item\" onclick=\"onClickItem()\">商品7</div>\n        <div class=\"good-item\" onclick=\"onClickItem()\">商品8</div>\n        <div class=\"good-item\" onclick=\"onClickItem()\">商品9</div>\n        <div class=\"good-item\" onclick=\"onClickItem()\">商品10</div>\n        <div class=\"good-item\" onclick=\"onClickItem()\">商品11</div>\n        <div class=\"good-item\" onclick=\"onClickItem()\">商品12</div>\n        <div class=\"good-item\" onclick=\"onClickItem()\">商品13</div>\n        <div class=\"good-item\" onclick=\"onClickItem()\">商品14</div>\n        <div class=\"good-item\" onclick=\"onClickItem()\">商品15</div>\n    </body>\n</html>\n\n<!--这是商品详情页：good-detail.html -->\n<html lang=\"en\">\n    <head>\n        <meta charset=\"utf-8\"/>\n        <title>商品详情</title>\n    </head>\n    <body>\n        <h1>商品详情</h1>\n    </body>\n</html>","loc":{"start":{"line":20,"column":0},"end":{"line":69,"column":3}},"range":[384,2100],"raw":"```html\n<!-- 这是首页: index.html -->\n<html lang=\"en\">\n    <head>\n        <meta charset=\"utf-8\"/>\n        <title>首页</title>\n        <style>\n            .good-item {\n                height: 100px;\n                width: calc(100vw - 40px);\n                margin: 20px;\n                background-color: #f3f3f3;\n            }\n        </style>\n    </head>\n    <body>\n        <script lang=\"javascript\">\n            function onClickItem() {\n                window.location.href = '/good-detail.html'\n            }\n        </script>\n        <div class=\"good-item\" onclick=\"onClickItem()\">商品1</div>\n        <div class=\"good-item\" onclick=\"onClickItem()\">商品2</div>\n        <div class=\"good-item\" onclick=\"onClickItem()\">商品3</div>\n        <div class=\"good-item\" onclick=\"onClickItem()\">商品4</div>\n        <div class=\"good-item\" onclick=\"onClickItem()\">商品5</div>\n        <div class=\"good-item\" onclick=\"onClickItem()\">商品6</div>\n        <div class=\"good-item\" onclick=\"onClickItem()\">商品7</div>\n        <div class=\"good-item\" onclick=\"onClickItem()\">商品8</div>\n        <div class=\"good-item\" onclick=\"onClickItem()\">商品9</div>\n        <div class=\"good-item\" onclick=\"onClickItem()\">商品10</div>\n        <div class=\"good-item\" onclick=\"onClickItem()\">商品11</div>\n        <div class=\"good-item\" onclick=\"onClickItem()\">商品12</div>\n        <div class=\"good-item\" onclick=\"onClickItem()\">商品13</div>\n        <div class=\"good-item\" onclick=\"onClickItem()\">商品14</div>\n        <div class=\"good-item\" onclick=\"onClickItem()\">商品15</div>\n    </body>\n</html>\n\n<!--这是商品详情页：good-detail.html -->\n<html lang=\"en\">\n    <head>\n        <meta charset=\"utf-8\"/>\n        <title>商品详情</title>\n    </head>\n    <body>\n        <h1>商品详情</h1>\n    </body>\n</html>\n```"},{"type":"Paragraph","children":[{"type":"Str","value":"使用 iOS 上的 Safari 打开页面，滚动到某个位置点开跳转到详情页，然后返回","loc":{"start":{"line":71,"column":0},"end":{"line":71,"column":42}},"range":[2102,2144],"raw":"使用 iOS 上的 Safari 打开页面，滚动到某个位置点开跳转到详情页，然后返回"}],"loc":{"start":{"line":71,"column":0},"end":{"line":71,"column":42}},"range":[2102,2144],"raw":"使用 iOS 上的 Safari 打开页面，滚动到某个位置点开跳转到详情页，然后返回"},{"type":"Paragraph","children":[{"type":"Image","title":null,"url":"https://img.hicdn.cn/fed/files/20220907/67eb007618a7b55ea3198f3ab0ecd160_RPReplay_Final1662564659.GIF","alt":"动态图","loc":{"start":{"line":73,"column":0},"end":{"line":73,"column":109}},"range":[2146,2255],"raw":"![动态图](https://img.hicdn.cn/fed/files/20220907/67eb007618a7b55ea3198f3ab0ecd160_RPReplay_Final1662564659.GIF)"}],"loc":{"start":{"line":73,"column":0},"end":{"line":73,"column":109}},"range":[2146,2255],"raw":"![动态图](https://img.hicdn.cn/fed/files/20220907/67eb007618a7b55ea3198f3ab0ecd160_RPReplay_Final1662564659.GIF)"},{"type":"Paragraph","children":[{"type":"Str","value":"你会发现，即使我们在页面的代码中并未做任何的特殊处理，在浏览器中返回上一页的时候，页面并没有回到初始的状态，而是缓存了页面的状态。","loc":{"start":{"line":75,"column":0},"end":{"line":75,"column":65}},"range":[2257,2322],"raw":"你会发现，即使我们在页面的代码中并未做任何的特殊处理，在浏览器中返回上一页的时候，页面并没有回到初始的状态，而是缓存了页面的状态。"}],"loc":{"start":{"line":75,"column":0},"end":{"line":75,"column":65}},"range":[2257,2322],"raw":"你会发现，即使我们在页面的代码中并未做任何的特殊处理，在浏览器中返回上一页的时候，页面并没有回到初始的状态，而是缓存了页面的状态。"},{"type":"Header","depth":3,"children":[{"type":"Str","value":"原因","loc":{"start":{"line":77,"column":4},"end":{"line":77,"column":6}},"range":[2328,2330],"raw":"原因"}],"loc":{"start":{"line":77,"column":0},"end":{"line":77,"column":6}},"range":[2324,2330],"raw":"### 原因"},{"type":"Paragraph","children":[{"type":"Link","title":null,"url":"https://web.dev/bfcache/","children":[{"type":"Str","value":"前进/后退缓存(Backward/Forward Cache, BF Cache)","loc":{"start":{"line":79,"column":1},"end":{"line":79,"column":42}},"range":[2333,2374],"raw":"前进/后退缓存(Backward/Forward Cache, BF Cache)"}],"loc":{"start":{"line":79,"column":0},"end":{"line":79,"column":69}},"range":[2332,2401],"raw":"[前进/后退缓存(Backward/Forward Cache, BF Cache)](https://web.dev/bfcache/)"},{"type":"Str","value":"：\n浏览器为了提高用户体验，会在浏览器页面前进和后退时，对页面的 window、dom、js对象以及渲染结果等其中的部分内容进行缓存。","loc":{"start":{"line":79,"column":69},"end":{"line":80,"column":65}},"range":[2401,2468],"raw":"：\n浏览器为了提高用户体验，会在浏览器页面前进和后退时，对页面的 window、dom、js对象以及渲染结果等其中的部分内容进行缓存。"}],"loc":{"start":{"line":79,"column":0},"end":{"line":80,"column":65}},"range":[2332,2468],"raw":"[前进/后退缓存(Backward/Forward Cache, BF Cache)](https://web.dev/bfcache/)：\n浏览器为了提高用户体验，会在浏览器页面前进和后退时，对页面的 window、dom、js对象以及渲染结果等其中的部分内容进行缓存。"},{"type":"Paragraph","children":[{"type":"Str","value":"这种缓存更像是浏览器保存在内存里的页面快照，在用户导航离开页面时将页面保存在内存中，\n返回时直接将内存中的页面解冻，这样做不仅可以使用户返回时加载更加快速，并且可以节约资源，不论是 xhr 请求还是原本的静态资源，都不需要再重新发起一次了。","loc":{"start":{"line":82,"column":0},"end":{"line":83,"column":77}},"range":[2470,2590],"raw":"这种缓存更像是浏览器保存在内存里的页面快照，在用户导航离开页面时将页面保存在内存中，\n返回时直接将内存中的页面解冻，这样做不仅可以使用户返回时加载更加快速，并且可以节约资源，不论是 xhr 请求还是原本的静态资源，都不需要再重新发起一次了。"}],"loc":{"start":{"line":82,"column":0},"end":{"line":83,"column":77}},"range":[2470,2590],"raw":"这种缓存更像是浏览器保存在内存里的页面快照，在用户导航离开页面时将页面保存在内存中，\n返回时直接将内存中的页面解冻，这样做不仅可以使用户返回时加载更加快速，并且可以节约资源，不论是 xhr 请求还是原本的静态资源，都不需要再重新发起一次了。"},{"type":"Paragraph","children":[{"type":"Str","value":"不同的浏览器对 BF Cache 的支持情况也不一样：","loc":{"start":{"line":85,"column":0},"end":{"line":85,"column":27}},"range":[2592,2619],"raw":"不同的浏览器对 BF Cache 的支持情况也不一样："}],"loc":{"start":{"line":85,"column":0},"end":{"line":85,"column":27}},"range":[2592,2619],"raw":"不同的浏览器对 BF Cache 的支持情况也不一样："},{"type":"List","ordered":false,"start":null,"spread":false,"children":[{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"Chrome Desktop：对于阻塞的资源和 XHR 请求，会进行缓存，但是不会缓存渲染结果","loc":{"start":{"line":87,"column":2},"end":{"line":87,"column":49}},"range":[2623,2670],"raw":"Chrome Desktop：对于阻塞的资源和 XHR 请求，会进行缓存，但是不会缓存渲染结果"}],"loc":{"start":{"line":87,"column":2},"end":{"line":87,"column":49}},"range":[2623,2670],"raw":"Chrome Desktop：对于阻塞的资源和 XHR 请求，会进行缓存，但是不会缓存渲染结果"}],"loc":{"start":{"line":87,"column":0},"end":{"line":87,"column":49}},"range":[2621,2670],"raw":"- Chrome Desktop：对于阻塞的资源和 XHR 请求，会进行缓存，但是不会缓存渲染结果"},{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"Chrome Android：有些情况不会缓存，缓存时与 Chrome Desktop 一致","loc":{"start":{"line":88,"column":2},"end":{"line":88,"column":48}},"range":[2673,2719],"raw":"Chrome Android：有些情况不会缓存，缓存时与 Chrome Desktop 一致"}],"loc":{"start":{"line":88,"column":2},"end":{"line":88,"column":48}},"range":[2673,2719],"raw":"Chrome Android：有些情况不会缓存，缓存时与 Chrome Desktop 一致"}],"loc":{"start":{"line":88,"column":0},"end":{"line":88,"column":48}},"range":[2671,2719],"raw":"- Chrome Android：有些情况不会缓存，缓存时与 Chrome Desktop 一致"},{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"Firefox：页面的 window、dom、javascript 对象等都会被缓存，页面会被 frozen，脚本暂停执行，包括定时器也会暂停，直到用户返回后，脚本才会继续执行","loc":{"start":{"line":89,"column":2},"end":{"line":89,"column":90}},"range":[2722,2810],"raw":"Firefox：页面的 window、dom、javascript 对象等都会被缓存，页面会被 frozen，脚本暂停执行，包括定时器也会暂停，直到用户返回后，脚本才会继续执行"}],"loc":{"start":{"line":89,"column":2},"end":{"line":89,"column":90}},"range":[2722,2810],"raw":"Firefox：页面的 window、dom、javascript 对象等都会被缓存，页面会被 frozen，脚本暂停执行，包括定时器也会暂停，直到用户返回后，脚本才会继续执行"}],"loc":{"start":{"line":89,"column":0},"end":{"line":89,"column":90}},"range":[2720,2810],"raw":"- Firefox：页面的 window、dom、javascript 对象等都会被缓存，页面会被 frozen，脚本暂停执行，包括定时器也会暂停，直到用户返回后，脚本才会继续执行"},{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"Safari：渲染结果也会被缓存住，在滑动手势返回上一页的过程中可以看出此前的渲染结果其实一直都在","loc":{"start":{"line":90,"column":2},"end":{"line":90,"column":51}},"range":[2813,2862],"raw":"Safari：渲染结果也会被缓存住，在滑动手势返回上一页的过程中可以看出此前的渲染结果其实一直都在"}],"loc":{"start":{"line":90,"column":2},"end":{"line":90,"column":51}},"range":[2813,2862],"raw":"Safari：渲染结果也会被缓存住，在滑动手势返回上一页的过程中可以看出此前的渲染结果其实一直都在"}],"loc":{"start":{"line":90,"column":0},"end":{"line":90,"column":51}},"range":[2811,2862],"raw":"- Safari：渲染结果也会被缓存住，在滑动手势返回上一页的过程中可以看出此前的渲染结果其实一直都在"}],"loc":{"start":{"line":87,"column":0},"end":{"line":90,"column":51}},"range":[2621,2862],"raw":"- Chrome Desktop：对于阻塞的资源和 XHR 请求，会进行缓存，但是不会缓存渲染结果\n- Chrome Android：有些情况不会缓存，缓存时与 Chrome Desktop 一致\n- Firefox：页面的 window、dom、javascript 对象等都会被缓存，页面会被 frozen，脚本暂停执行，包括定时器也会暂停，直到用户返回后，脚本才会继续执行\n- Safari：渲染结果也会被缓存住，在滑动手势返回上一页的过程中可以看出此前的渲染结果其实一直都在"},{"type":"Paragraph","children":[{"type":"Str","value":"由于 Firefox 缓存页面后，定时器也会停止执行，所以在 Firefox 中使用 setInterval 来计时会非常的不可靠。","loc":{"start":{"line":92,"column":0},"end":{"line":92,"column":66}},"range":[2864,2930],"raw":"由于 Firefox 缓存页面后，定时器也会停止执行，所以在 Firefox 中使用 setInterval 来计时会非常的不可靠。"}],"loc":{"start":{"line":92,"column":0},"end":{"line":92,"column":66}},"range":[2864,2930],"raw":"由于 Firefox 缓存页面后，定时器也会停止执行，所以在 Firefox 中使用 setInterval 来计时会非常的不可靠。"},{"type":"CodeBlock","lang":"html","meta":null,"value":"<span id=\"count\"></span>\n<script>\n    let count = new Date().getSeconds();\n    setInterval(() => {\n        count++;\n        document.getElementById('count').innerText = new Date(count * 1000).toLocaleDateString()\n    }, 1000)\n</script>","loc":{"start":{"line":94,"column":0},"end":{"line":103,"column":3}},"range":[2932,3179],"raw":"```html\n<span id=\"count\"></span>\n<script>\n    let count = new Date().getSeconds();\n    setInterval(() => {\n        count++;\n        document.getElementById('count').innerText = new Date(count * 1000).toLocaleDateString()\n    }, 1000)\n</script>\n```"},{"type":"Header","depth":2,"children":[{"type":"Str","value":"移动端虚拟键盘对 h5 渲染的影响","loc":{"start":{"line":105,"column":3},"end":{"line":105,"column":20}},"range":[3184,3201],"raw":"移动端虚拟键盘对 h5 渲染的影响"}],"loc":{"start":{"line":105,"column":0},"end":{"line":105,"column":20}},"range":[3181,3201],"raw":"## 移动端虚拟键盘对 h5 渲染的影响"},{"type":"Paragraph","children":[{"type":"Str","value":"针对下面这段代码，设置一个距离页面顶部固定高度（以便模拟出输入框被操作系统的输入法遮挡的情况）的输入框，在进行输入的时候，移动端浏览器\n是如何处理输入框被虚拟键盘遮挡住的问题的呢？","loc":{"start":{"line":107,"column":0},"end":{"line":108,"column":22}},"range":[3203,3293],"raw":"针对下面这段代码，设置一个距离页面顶部固定高度（以便模拟出输入框被操作系统的输入法遮挡的情况）的输入框，在进行输入的时候，移动端浏览器\n是如何处理输入框被虚拟键盘遮挡住的问题的呢？"}],"loc":{"start":{"line":107,"column":0},"end":{"line":108,"column":22}},"range":[3203,3293],"raw":"针对下面这段代码，设置一个距离页面顶部固定高度（以便模拟出输入框被操作系统的输入法遮挡的情况）的输入框，在进行输入的时候，移动端浏览器\n是如何处理输入框被虚拟键盘遮挡住的问题的呢？"},{"type":"CodeBlock","lang":"html","meta":null,"value":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\" />\n    <title>Static Template</title>\n</head>\n<body style=\"overflow: hidden;\">\n<div style=\"margin-top: 600px;\">请输入：<input /></div>\n</body>\n</html>","loc":{"start":{"line":110,"column":0},"end":{"line":123,"column":3}},"range":[3295,3656],"raw":"```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\" />\n    <title>Static Template</title>\n</head>\n<body style=\"overflow: hidden;\">\n<div style=\"margin-top: 600px;\">请输入：<input /></div>\n</body>\n</html>\n```"},{"type":"Paragraph","children":[{"type":"Str","value":"为了能保证用户聚焦的输入框在可见的范围内，系统会在虚拟键盘弹出时，会有一些特殊的处理，这种处理在安卓和 iOS 上是不一样的：","loc":{"start":{"line":125,"column":0},"end":{"line":125,"column":63}},"range":[3658,3721],"raw":"为了能保证用户聚焦的输入框在可见的范围内，系统会在虚拟键盘弹出时，会有一些特殊的处理，这种处理在安卓和 iOS 上是不一样的："}],"loc":{"start":{"line":125,"column":0},"end":{"line":125,"column":63}},"range":[3658,3721],"raw":"为了能保证用户聚焦的输入框在可见的范围内，系统会在虚拟键盘弹出时，会有一些特殊的处理，这种处理在安卓和 iOS 上是不一样的："},{"type":"Header","depth":3,"children":[{"type":"Str","value":"iOS","loc":{"start":{"line":127,"column":4},"end":{"line":127,"column":7}},"range":[3727,3730],"raw":"iOS"}],"loc":{"start":{"line":127,"column":0},"end":{"line":127,"column":7}},"range":[3723,3730],"raw":"### iOS"},{"type":"Paragraph","children":[{"type":"Str","value":"在 iOS 上，虚拟键盘弹出时是浮在浏览器 viewport 上的，虚拟键盘的弹出和隐藏不会导致 viewport 尺寸发生变化从而导致浏览器页面的重绘。\n而是由 iOS 滚动整个 viewport 来保证用户聚焦的输入框始终在可见的范围内。","loc":{"start":{"line":129,"column":0},"end":{"line":130,"column":43}},"range":[3732,3853],"raw":"在 iOS 上，虚拟键盘弹出时是浮在浏览器 viewport 上的，虚拟键盘的弹出和隐藏不会导致 viewport 尺寸发生变化从而导致浏览器页面的重绘。\n而是由 iOS 滚动整个 viewport 来保证用户聚焦的输入框始终在可见的范围内。"}],"loc":{"start":{"line":129,"column":0},"end":{"line":130,"column":43}},"range":[3732,3853],"raw":"在 iOS 上，虚拟键盘弹出时是浮在浏览器 viewport 上的，虚拟键盘的弹出和隐藏不会导致 viewport 尺寸发生变化从而导致浏览器页面的重绘。\n而是由 iOS 滚动整个 viewport 来保证用户聚焦的输入框始终在可见的范围内。"},{"type":"Paragraph","children":[{"type":"Image","title":null,"url":"https://img.hicdn.cn/fed/files/20220915/4b87aa8488932aa607d81d50d578d395_RPReplay_Final1663221322.gif","alt":"iOS输入框","loc":{"start":{"line":132,"column":0},"end":{"line":132,"column":112}},"range":[3855,3967],"raw":"![iOS输入框](https://img.hicdn.cn/fed/files/20220915/4b87aa8488932aa607d81d50d578d395_RPReplay_Final1663221322.gif)"}],"loc":{"start":{"line":132,"column":0},"end":{"line":132,"column":112}},"range":[3855,3967],"raw":"![iOS输入框](https://img.hicdn.cn/fed/files/20220915/4b87aa8488932aa607d81d50d578d395_RPReplay_Final1663221322.gif)"},{"type":"Header","depth":3,"children":[{"type":"Str","value":"Android","loc":{"start":{"line":134,"column":4},"end":{"line":134,"column":11}},"range":[3973,3980],"raw":"Android"}],"loc":{"start":{"line":134,"column":0},"end":{"line":134,"column":11}},"range":[3969,3980],"raw":"### Android"},{"type":"Paragraph","children":[{"type":"Str","value":"Android 会在用户聚焦到输入框上时，虚拟键盘与 h5 的 viewport 是共享手机屏幕高度的，也就是","loc":{"start":{"line":136,"column":0},"end":{"line":136,"column":55}},"range":[3982,4037],"raw":"Android 会在用户聚焦到输入框上时，虚拟键盘与 h5 的 viewport 是共享手机屏幕高度的，也就是"},{"type":"Strong","children":[{"type":"Str","value":"虚拟键盘的出现会使得浏览器的 viewport 高度发生变化","loc":{"start":{"line":136,"column":57},"end":{"line":136,"column":87}},"range":[4039,4069],"raw":"虚拟键盘的出现会使得浏览器的 viewport 高度发生变化"}],"loc":{"start":{"line":136,"column":55},"end":{"line":136,"column":89}},"range":[4037,4071],"raw":"**虚拟键盘的出现会使得浏览器的 viewport 高度发生变化**"},{"type":"Str","value":"。","loc":{"start":{"line":136,"column":89},"end":{"line":136,"column":90}},"range":[4071,4072],"raw":"。"}],"loc":{"start":{"line":136,"column":0},"end":{"line":136,"column":90}},"range":[3982,4072],"raw":"Android 会在用户聚焦到输入框上时，虚拟键盘与 h5 的 viewport 是共享手机屏幕高度的，也就是**虚拟键盘的出现会使得浏览器的 viewport 高度发生变化**。"},{"type":"Paragraph","children":[{"type":"Str","value":"值得注意的是：浏览器视口变小之后，Android 并不会确保用户聚焦的输入框在可见的范围内，所以需要确保 viewport 变小之后，聚焦的输入框仍在可见范围内，或者","loc":{"start":{"line":138,"column":0},"end":{"line":138,"column":83}},"range":[4074,4157],"raw":"值得注意的是：浏览器视口变小之后，Android 并不会确保用户聚焦的输入框在可见的范围内，所以需要确保 viewport 变小之后，聚焦的输入框仍在可见范围内，或者"},{"type":"Strong","children":[{"type":"Str","value":"可以滚动","loc":{"start":{"line":138,"column":85},"end":{"line":138,"column":89}},"range":[4159,4163],"raw":"可以滚动"}],"loc":{"start":{"line":138,"column":83},"end":{"line":138,"column":91}},"range":[4157,4165],"raw":"**可以滚动**"},{"type":"Str","value":"，\n否则用户就只能盲打了！","loc":{"start":{"line":138,"column":91},"end":{"line":139,"column":11}},"range":[4165,4178],"raw":"，\n否则用户就只能盲打了！"}],"loc":{"start":{"line":138,"column":0},"end":{"line":139,"column":11}},"range":[4074,4178],"raw":"值得注意的是：浏览器视口变小之后，Android 并不会确保用户聚焦的输入框在可见的范围内，所以需要确保 viewport 变小之后，聚焦的输入框仍在可见范围内，或者**可以滚动**，\n否则用户就只能盲打了！"},{"type":"Paragraph","children":[{"type":"Image","title":null,"url":"https://img.hicdn.cn/fed/files/20220915/3031974d7f371a86b2aeea9fb873d10d_%E5%B1%8F%E5%B9%95%E5%BD%95%E5%88%B62022-09-15%2014.05.42.gif","alt":"安卓演示","loc":{"start":{"line":141,"column":0},"end":{"line":141,"column":143}},"range":[4180,4323],"raw":"![安卓演示](https://img.hicdn.cn/fed/files/20220915/3031974d7f371a86b2aeea9fb873d10d_%E5%B1%8F%E5%B9%95%E5%BD%95%E5%88%B62022-09-15%2014.05.42.gif)"}],"loc":{"start":{"line":141,"column":0},"end":{"line":141,"column":143}},"range":[4180,4323],"raw":"![安卓演示](https://img.hicdn.cn/fed/files/20220915/3031974d7f371a86b2aeea9fb873d10d_%E5%B1%8F%E5%B9%95%E5%BD%95%E5%88%B62022-09-15%2014.05.42.gif)"},{"type":"Header","depth":3,"children":[{"type":"Str","value":"如何监听虚拟键盘的出现和消失","loc":{"start":{"line":143,"column":4},"end":{"line":143,"column":18}},"range":[4329,4343],"raw":"如何监听虚拟键盘的出现和消失"}],"loc":{"start":{"line":143,"column":0},"end":{"line":143,"column":18}},"range":[4325,4343],"raw":"### 如何监听虚拟键盘的出现和消失"},{"type":"Paragraph","children":[{"type":"Str","value":"虚拟键盘的出现和收起，浏览器并未提供直接的事件用来监听，但是可以根据 Android 和 iOS 的行为，来间接实现监听键盘的显示和消失。","loc":{"start":{"line":145,"column":0},"end":{"line":145,"column":69}},"range":[4345,4414],"raw":"虚拟键盘的出现和收起，浏览器并未提供直接的事件用来监听，但是可以根据 Android 和 iOS 的行为，来间接实现监听键盘的显示和消失。"}],"loc":{"start":{"line":145,"column":0},"end":{"line":145,"column":69}},"range":[4345,4414],"raw":"虚拟键盘的出现和收起，浏览器并未提供直接的事件用来监听，但是可以根据 Android 和 iOS 的行为，来间接实现监听键盘的显示和消失。"},{"type":"Header","depth":4,"children":[{"type":"Str","value":"监听视口尺寸变化（仅限 Android）","loc":{"start":{"line":147,"column":5},"end":{"line":147,"column":25}},"range":[4421,4441],"raw":"监听视口尺寸变化（仅限 Android）"}],"loc":{"start":{"line":147,"column":0},"end":{"line":147,"column":25}},"range":[4416,4441],"raw":"#### 监听视口尺寸变化（仅限 Android）"},{"type":"Paragraph","children":[{"type":"Str","value":"在 Android 上，聚焦到输入框时，确实会触发虚拟键盘显示，但是收起虚拟键盘时，输入框并不会失焦，所以不能根据输入框的聚焦和失焦来监听虚拟键盘的出现和隐藏。","loc":{"start":{"line":149,"column":0},"end":{"line":149,"column":80}},"range":[4443,4523],"raw":"在 Android 上，聚焦到输入框时，确实会触发虚拟键盘显示，但是收起虚拟键盘时，输入框并不会失焦，所以不能根据输入框的聚焦和失焦来监听虚拟键盘的出现和隐藏。"}],"loc":{"start":{"line":149,"column":0},"end":{"line":149,"column":80}},"range":[4443,4523],"raw":"在 Android 上，聚焦到输入框时，确实会触发虚拟键盘显示，但是收起虚拟键盘时，输入框并不会失焦，所以不能根据输入框的聚焦和失焦来监听虚拟键盘的出现和隐藏。"},{"type":"Paragraph","children":[{"type":"Str","value":"但是在 Android 上，虚拟键盘的输入和消失会改变 h5 viewport 的尺寸，所以可以在页面初始化时，将 h5 的初始化 viewport 高度保存起来，然后监听 window\n的 resize 事件，比较 viewport 高度的变化：","loc":{"start":{"line":151,"column":0},"end":{"line":152,"column":30}},"range":[4525,4649],"raw":"但是在 Android 上，虚拟键盘的输入和消失会改变 h5 viewport 的尺寸，所以可以在页面初始化时，将 h5 的初始化 viewport 高度保存起来，然后监听 window\n的 resize 事件，比较 viewport 高度的变化："}],"loc":{"start":{"line":151,"column":0},"end":{"line":152,"column":30}},"range":[4525,4649],"raw":"但是在 Android 上，虚拟键盘的输入和消失会改变 h5 viewport 的尺寸，所以可以在页面初始化时，将 h5 的初始化 viewport 高度保存起来，然后监听 window\n的 resize 事件，比较 viewport 高度的变化："},{"type":"List","ordered":false,"start":null,"spread":false,"children":[{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"如果 viewport 高度变大，则是虚拟键盘收起了","loc":{"start":{"line":153,"column":2},"end":{"line":153,"column":28}},"range":[4652,4678],"raw":"如果 viewport 高度变大，则是虚拟键盘收起了"}],"loc":{"start":{"line":153,"column":2},"end":{"line":153,"column":28}},"range":[4652,4678],"raw":"如果 viewport 高度变大，则是虚拟键盘收起了"}],"loc":{"start":{"line":153,"column":0},"end":{"line":153,"column":28}},"range":[4650,4678],"raw":"- 如果 viewport 高度变大，则是虚拟键盘收起了"},{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"如果 viewport 高度变小，则是虚拟键盘弹出了","loc":{"start":{"line":154,"column":2},"end":{"line":154,"column":28}},"range":[4681,4707],"raw":"如果 viewport 高度变小，则是虚拟键盘弹出了"}],"loc":{"start":{"line":154,"column":2},"end":{"line":154,"column":28}},"range":[4681,4707],"raw":"如果 viewport 高度变小，则是虚拟键盘弹出了"}],"loc":{"start":{"line":154,"column":0},"end":{"line":154,"column":28}},"range":[4679,4707],"raw":"- 如果 viewport 高度变小，则是虚拟键盘弹出了"}],"loc":{"start":{"line":153,"column":0},"end":{"line":154,"column":28}},"range":[4650,4707],"raw":"- 如果 viewport 高度变大，则是虚拟键盘收起了\n- 如果 viewport 高度变小，则是虚拟键盘弹出了"},{"type":"Paragraph","children":[{"type":"Str","value":"并且可以通过高度变化的数值，来计算出虚拟键盘占用的高度。","loc":{"start":{"line":156,"column":0},"end":{"line":156,"column":28}},"range":[4709,4737],"raw":"并且可以通过高度变化的数值，来计算出虚拟键盘占用的高度。"}],"loc":{"start":{"line":156,"column":0},"end":{"line":156,"column":28}},"range":[4709,4737],"raw":"并且可以通过高度变化的数值，来计算出虚拟键盘占用的高度。"},{"type":"Header","depth":4,"children":[{"type":"Str","value":"输入框的聚焦和失焦（仅限 iOS）","loc":{"start":{"line":158,"column":5},"end":{"line":158,"column":22}},"range":[4744,4761],"raw":"输入框的聚焦和失焦（仅限 iOS）"}],"loc":{"start":{"line":158,"column":0},"end":{"line":158,"column":22}},"range":[4739,4761],"raw":"#### 输入框的聚焦和失焦（仅限 iOS）"},{"type":"Paragraph","children":[{"type":"Str","value":"通常情况下，在 iOS 上，虚拟键盘的出现和消失，与输入框的聚焦和失焦是等效的。并且输入框的聚焦和失焦事件是冒泡的，所以直接在 window 上监听 focusin 和 focusout 事件\n就可以间接监听到虚拟键盘的显示和消失。","loc":{"start":{"line":160,"column":0},"end":{"line":161,"column":19}},"range":[4763,4879],"raw":"通常情况下，在 iOS 上，虚拟键盘的出现和消失，与输入框的聚焦和失焦是等效的。并且输入框的聚焦和失焦事件是冒泡的，所以直接在 window 上监听 focusin 和 focusout 事件\n就可以间接监听到虚拟键盘的显示和消失。"}],"loc":{"start":{"line":160,"column":0},"end":{"line":161,"column":19}},"range":[4763,4879],"raw":"通常情况下，在 iOS 上，虚拟键盘的出现和消失，与输入框的聚焦和失焦是等效的。并且输入框的聚焦和失焦事件是冒泡的，所以直接在 window 上监听 focusin 和 focusout 事件\n就可以间接监听到虚拟键盘的显示和消失。"},{"type":"Paragraph","children":[{"type":"Str","value":"iOS 的虚拟键盘出现的时候，浏览器的 viewport 尺寸并不会发生变化，所以 resize 事件不会触发，也就无法通过 viewport 高度的变化来计算虚拟键盘的高度。","loc":{"start":{"line":163,"column":0},"end":{"line":163,"column":88}},"range":[4881,4969],"raw":"iOS 的虚拟键盘出现的时候，浏览器的 viewport 尺寸并不会发生变化，所以 resize 事件不会触发，也就无法通过 viewport 高度的变化来计算虚拟键盘的高度。"}],"loc":{"start":{"line":163,"column":0},"end":{"line":163,"column":88}},"range":[4881,4969],"raw":"iOS 的虚拟键盘出现的时候，浏览器的 viewport 尺寸并不会发生变化，所以 resize 事件不会触发，也就无法通过 viewport 高度的变化来计算虚拟键盘的高度。"},{"type":"Header","depth":2,"children":[{"type":"Str","value":"浏览器缩放设置影响页面渲染","loc":{"start":{"line":165,"column":3},"end":{"line":165,"column":16}},"range":[4974,4987],"raw":"浏览器缩放设置影响页面渲染"}],"loc":{"start":{"line":165,"column":0},"end":{"line":165,"column":16}},"range":[4971,4987],"raw":"## 浏览器缩放设置影响页面渲染"},{"type":"Paragraph","children":[{"type":"Str","value":"无论是移动端浏览器还是PC端浏览器，很多都有缩放的功能，并且对于特定网站的缩放设置浏览器还可能会进行缓存。\n用户某次无意间对网站设置的缩放比例被浏览器缓存以后，下次访问网站时仍然会对页面进行缩放，此时用户可能是不知情的。","loc":{"start":{"line":167,"column":0},"end":{"line":168,"column":56}},"range":[4989,5099],"raw":"无论是移动端浏览器还是PC端浏览器，很多都有缩放的功能，并且对于特定网站的缩放设置浏览器还可能会进行缓存。\n用户某次无意间对网站设置的缩放比例被浏览器缓存以后，下次访问网站时仍然会对页面进行缩放，此时用户可能是不知情的。"}],"loc":{"start":{"line":167,"column":0},"end":{"line":168,"column":56}},"range":[4989,5099],"raw":"无论是移动端浏览器还是PC端浏览器，很多都有缩放的功能，并且对于特定网站的缩放设置浏览器还可能会进行缓存。\n用户某次无意间对网站设置的缩放比例被浏览器缓存以后，下次访问网站时仍然会对页面进行缩放，此时用户可能是不知情的。"},{"type":"Paragraph","children":[{"type":"Str","value":"在 iOS Safari 上，如果用户对网站开启缩放，对网站造成的影响需要分为两种情况来看：","loc":{"start":{"line":170,"column":0},"end":{"line":170,"column":46}},"range":[5101,5147],"raw":"在 iOS Safari 上，如果用户对网站开启缩放，对网站造成的影响需要分为两种情况来看："}],"loc":{"start":{"line":170,"column":0},"end":{"line":170,"column":46}},"range":[5101,5147],"raw":"在 iOS Safari 上，如果用户对网站开启缩放，对网站造成的影响需要分为两种情况来看："},{"type":"List","ordered":false,"start":null,"spread":false,"children":[{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"在浏览器内直接访问网站时：Safari 会在保持页面的 viewport 尺寸不变的情况下，缩放网站的内容，此时网站的内容看起来比未设置缩放的情况下更大或者更小；","loc":{"start":{"line":171,"column":2},"end":{"line":171,"column":83}},"range":[5150,5231],"raw":"在浏览器内直接访问网站时：Safari 会在保持页面的 viewport 尺寸不变的情况下，缩放网站的内容，此时网站的内容看起来比未设置缩放的情况下更大或者更小；"}],"loc":{"start":{"line":171,"column":2},"end":{"line":171,"column":83}},"range":[5150,5231],"raw":"在浏览器内直接访问网站时：Safari 会在保持页面的 viewport 尺寸不变的情况下，缩放网站的内容，此时网站的内容看起来比未设置缩放的情况下更大或者更小；"}],"loc":{"start":{"line":171,"column":0},"end":{"line":171,"column":83}},"range":[5148,5231],"raw":"- 在浏览器内直接访问网站时：Safari 会在保持页面的 viewport 尺寸不变的情况下，缩放网站的内容，此时网站的内容看起来比未设置缩放的情况下更大或者更小；"},{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"用户将网站添加到桌面以后访问时：Safari 会直接缩放 viewport，如果用户将缩放比例调整到小于 100 % 时，viewport 的尺寸会超出屏幕，导致产生不必要的滚动。","loc":{"start":{"line":172,"column":2},"end":{"line":172,"column":92}},"range":[5234,5324],"raw":"用户将网站添加到桌面以后访问时：Safari 会直接缩放 viewport，如果用户将缩放比例调整到小于 100 % 时，viewport 的尺寸会超出屏幕，导致产生不必要的滚动。"}],"loc":{"start":{"line":172,"column":2},"end":{"line":172,"column":92}},"range":[5234,5324],"raw":"用户将网站添加到桌面以后访问时：Safari 会直接缩放 viewport，如果用户将缩放比例调整到小于 100 % 时，viewport 的尺寸会超出屏幕，导致产生不必要的滚动。"}],"loc":{"start":{"line":172,"column":0},"end":{"line":172,"column":92}},"range":[5232,5324],"raw":"- 用户将网站添加到桌面以后访问时：Safari 会直接缩放 viewport，如果用户将缩放比例调整到小于 100 % 时，viewport 的尺寸会超出屏幕，导致产生不必要的滚动。"}],"loc":{"start":{"line":171,"column":0},"end":{"line":172,"column":92}},"range":[5148,5324],"raw":"- 在浏览器内直接访问网站时：Safari 会在保持页面的 viewport 尺寸不变的情况下，缩放网站的内容，此时网站的内容看起来比未设置缩放的情况下更大或者更小；\n- 用户将网站添加到桌面以后访问时：Safari 会直接缩放 viewport，如果用户将缩放比例调整到小于 100 % 时，viewport 的尺寸会超出屏幕，导致产生不必要的滚动。"}],"loc":{"start":{"line":1,"column":0},"end":{"line":173,"column":0}},"range":[0,5325],"raw":"---\ntitle: 'React 移动端 H5 踩坑集锦'\ntags: ['前端', 'h5']\n---\n# React 移动端 H5 踩坑集锦\n\n## 浏览器状态缓存\n\n在 h5 应用中，从一个页面跳转到另一个页面，是一个非常常见的交互：比如逛某宝首页时，下拉翻了很多页之后，相中了一个商品，点开查看商品的详情页面。\n\n问题来了：**如果此时直接按下返回键，返回到首页，是会回到之前的滚动位置，还是会回到首页的最顶部呢？**\n\n按照通常理解：不做任何处理的情况下，在 h5 内通过 window.location 等方式在同一个标签页下直接打开一个新的页面之后，老的页面的就会被浏览器销毁，\n按下返回时原本的页面就会刷新，此时页面应该会回到最开始的状态，也就是回到首页的最顶部。\n\n### 验证\n\n但是事实真的是如此吗？写一个小小的 demo 来验证一下便知：\n\n```html\n<!-- 这是首页: index.html -->\n<html lang=\"en\">\n    <head>\n        <meta charset=\"utf-8\"/>\n        <title>首页</title>\n        <style>\n            .good-item {\n                height: 100px;\n                width: calc(100vw - 40px);\n                margin: 20px;\n                background-color: #f3f3f3;\n            }\n        </style>\n    </head>\n    <body>\n        <script lang=\"javascript\">\n            function onClickItem() {\n                window.location.href = '/good-detail.html'\n            }\n        </script>\n        <div class=\"good-item\" onclick=\"onClickItem()\">商品1</div>\n        <div class=\"good-item\" onclick=\"onClickItem()\">商品2</div>\n        <div class=\"good-item\" onclick=\"onClickItem()\">商品3</div>\n        <div class=\"good-item\" onclick=\"onClickItem()\">商品4</div>\n        <div class=\"good-item\" onclick=\"onClickItem()\">商品5</div>\n        <div class=\"good-item\" onclick=\"onClickItem()\">商品6</div>\n        <div class=\"good-item\" onclick=\"onClickItem()\">商品7</div>\n        <div class=\"good-item\" onclick=\"onClickItem()\">商品8</div>\n        <div class=\"good-item\" onclick=\"onClickItem()\">商品9</div>\n        <div class=\"good-item\" onclick=\"onClickItem()\">商品10</div>\n        <div class=\"good-item\" onclick=\"onClickItem()\">商品11</div>\n        <div class=\"good-item\" onclick=\"onClickItem()\">商品12</div>\n        <div class=\"good-item\" onclick=\"onClickItem()\">商品13</div>\n        <div class=\"good-item\" onclick=\"onClickItem()\">商品14</div>\n        <div class=\"good-item\" onclick=\"onClickItem()\">商品15</div>\n    </body>\n</html>\n\n<!--这是商品详情页：good-detail.html -->\n<html lang=\"en\">\n    <head>\n        <meta charset=\"utf-8\"/>\n        <title>商品详情</title>\n    </head>\n    <body>\n        <h1>商品详情</h1>\n    </body>\n</html>\n```\n\n使用 iOS 上的 Safari 打开页面，滚动到某个位置点开跳转到详情页，然后返回\n\n![动态图](https://img.hicdn.cn/fed/files/20220907/67eb007618a7b55ea3198f3ab0ecd160_RPReplay_Final1662564659.GIF)\n\n你会发现，即使我们在页面的代码中并未做任何的特殊处理，在浏览器中返回上一页的时候，页面并没有回到初始的状态，而是缓存了页面的状态。\n\n### 原因\n\n[前进/后退缓存(Backward/Forward Cache, BF Cache)](https://web.dev/bfcache/)：\n浏览器为了提高用户体验，会在浏览器页面前进和后退时，对页面的 window、dom、js对象以及渲染结果等其中的部分内容进行缓存。\n\n这种缓存更像是浏览器保存在内存里的页面快照，在用户导航离开页面时将页面保存在内存中，\n返回时直接将内存中的页面解冻，这样做不仅可以使用户返回时加载更加快速，并且可以节约资源，不论是 xhr 请求还是原本的静态资源，都不需要再重新发起一次了。\n\n不同的浏览器对 BF Cache 的支持情况也不一样：\n\n- Chrome Desktop：对于阻塞的资源和 XHR 请求，会进行缓存，但是不会缓存渲染结果\n- Chrome Android：有些情况不会缓存，缓存时与 Chrome Desktop 一致\n- Firefox：页面的 window、dom、javascript 对象等都会被缓存，页面会被 frozen，脚本暂停执行，包括定时器也会暂停，直到用户返回后，脚本才会继续执行\n- Safari：渲染结果也会被缓存住，在滑动手势返回上一页的过程中可以看出此前的渲染结果其实一直都在\n\n由于 Firefox 缓存页面后，定时器也会停止执行，所以在 Firefox 中使用 setInterval 来计时会非常的不可靠。\n\n```html\n<span id=\"count\"></span>\n<script>\n    let count = new Date().getSeconds();\n    setInterval(() => {\n        count++;\n        document.getElementById('count').innerText = new Date(count * 1000).toLocaleDateString()\n    }, 1000)\n</script>\n```\n\n## 移动端虚拟键盘对 h5 渲染的影响\n\n针对下面这段代码，设置一个距离页面顶部固定高度（以便模拟出输入框被操作系统的输入法遮挡的情况）的输入框，在进行输入的时候，移动端浏览器\n是如何处理输入框被虚拟键盘遮挡住的问题的呢？\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\" />\n    <title>Static Template</title>\n</head>\n<body style=\"overflow: hidden;\">\n<div style=\"margin-top: 600px;\">请输入：<input /></div>\n</body>\n</html>\n```\n\n为了能保证用户聚焦的输入框在可见的范围内，系统会在虚拟键盘弹出时，会有一些特殊的处理，这种处理在安卓和 iOS 上是不一样的：\n\n### iOS\n\n在 iOS 上，虚拟键盘弹出时是浮在浏览器 viewport 上的，虚拟键盘的弹出和隐藏不会导致 viewport 尺寸发生变化从而导致浏览器页面的重绘。\n而是由 iOS 滚动整个 viewport 来保证用户聚焦的输入框始终在可见的范围内。\n\n![iOS输入框](https://img.hicdn.cn/fed/files/20220915/4b87aa8488932aa607d81d50d578d395_RPReplay_Final1663221322.gif)\n\n### Android\n\nAndroid 会在用户聚焦到输入框上时，虚拟键盘与 h5 的 viewport 是共享手机屏幕高度的，也就是**虚拟键盘的出现会使得浏览器的 viewport 高度发生变化**。\n\n值得注意的是：浏览器视口变小之后，Android 并不会确保用户聚焦的输入框在可见的范围内，所以需要确保 viewport 变小之后，聚焦的输入框仍在可见范围内，或者**可以滚动**，\n否则用户就只能盲打了！\n\n![安卓演示](https://img.hicdn.cn/fed/files/20220915/3031974d7f371a86b2aeea9fb873d10d_%E5%B1%8F%E5%B9%95%E5%BD%95%E5%88%B62022-09-15%2014.05.42.gif)\n\n### 如何监听虚拟键盘的出现和消失\n\n虚拟键盘的出现和收起，浏览器并未提供直接的事件用来监听，但是可以根据 Android 和 iOS 的行为，来间接实现监听键盘的显示和消失。\n\n#### 监听视口尺寸变化（仅限 Android）\n\n在 Android 上，聚焦到输入框时，确实会触发虚拟键盘显示，但是收起虚拟键盘时，输入框并不会失焦，所以不能根据输入框的聚焦和失焦来监听虚拟键盘的出现和隐藏。\n\n但是在 Android 上，虚拟键盘的输入和消失会改变 h5 viewport 的尺寸，所以可以在页面初始化时，将 h5 的初始化 viewport 高度保存起来，然后监听 window\n的 resize 事件，比较 viewport 高度的变化：\n- 如果 viewport 高度变大，则是虚拟键盘收起了\n- 如果 viewport 高度变小，则是虚拟键盘弹出了\n\n并且可以通过高度变化的数值，来计算出虚拟键盘占用的高度。\n\n#### 输入框的聚焦和失焦（仅限 iOS）\n\n通常情况下，在 iOS 上，虚拟键盘的出现和消失，与输入框的聚焦和失焦是等效的。并且输入框的聚焦和失焦事件是冒泡的，所以直接在 window 上监听 focusin 和 focusout 事件\n就可以间接监听到虚拟键盘的显示和消失。\n\niOS 的虚拟键盘出现的时候，浏览器的 viewport 尺寸并不会发生变化，所以 resize 事件不会触发，也就无法通过 viewport 高度的变化来计算虚拟键盘的高度。\n\n## 浏览器缩放设置影响页面渲染\n\n无论是移动端浏览器还是PC端浏览器，很多都有缩放的功能，并且对于特定网站的缩放设置浏览器还可能会进行缓存。\n用户某次无意间对网站设置的缩放比例被浏览器缓存以后，下次访问网站时仍然会对页面进行缩放，此时用户可能是不知情的。\n\n在 iOS Safari 上，如果用户对网站开启缩放，对网站造成的影响需要分为两种情况来看：\n- 在浏览器内直接访问网站时：Safari 会在保持页面的 viewport 尺寸不变的情况下，缩放网站的内容，此时网站的内容看起来比未设置缩放的情况下更大或者更小；\n- 用户将网站添加到桌面以后访问时：Safari 会直接缩放 viewport，如果用户将缩放比例调整到小于 100 % 时，viewport 的尺寸会超出屏幕，导致产生不必要的滚动。\n"},"catalogue":{"title":"React 移动端 H5 踩坑集锦","json-path":"前端开发/2022-08-25-移动端h5开发常见问题.json","mdate":"2022-08-25","cover":"https://i.328888.xyz/2022/12/31/ndOVF.jpeg","icon":"🌧","visible":true,"tags":["前端","h5"]}}