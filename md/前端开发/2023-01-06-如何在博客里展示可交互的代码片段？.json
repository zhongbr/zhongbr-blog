{"ast":{"type":"Document","children":[{"type":"Yaml","value":"title: '如何在博客上展示可交互的代码片段?'\ntags: ['前端', 'React', 'babel']","loc":{"start":{"line":1,"column":0},"end":{"line":4,"column":3}},"range":[0,65],"raw":"---\ntitle: '如何在博客上展示可交互的代码片段?'\ntags: ['前端', 'React', 'babel']\n---","visible":false},{"type":"Header","depth":1,"children":[{"type":"Str","value":"如何在博客上展示可交互的代码片段?","loc":{"start":{"line":6,"column":2},"end":{"line":6,"column":19}},"range":[69,86],"raw":"如何在博客上展示可交互的代码片段?"}],"loc":{"start":{"line":6,"column":0},"end":{"line":6,"column":19}},"range":[67,86],"raw":"# 如何在博客上展示可交互的代码片段?"},{"type":"Paragraph","children":[{"type":"Str","value":"我们在日常编写博客的时候，经常会书写一些 Jsx 的 DEMO 代码，其他人在浏览我们的博客文章的时候就可以参考一下这些 DEMO 代码。\n","loc":{"start":{"line":8,"column":0},"end":{"line":9,"column":0}},"range":[88,158],"raw":"我们在日常编写博客的时候，经常会书写一些 Jsx 的 DEMO 代码，其他人在浏览我们的博客文章的时候就可以参考一下这些 DEMO 代码。\n"},{"type":"Emphasis","children":[{"type":"Str","value":"有没有一种方法，可以在其他人浏览我们的博客文章的时候，直接把 JSX 编写的代码片段，给渲染成真实的 dom 节点","loc":{"start":{"line":9,"column":1},"end":{"line":9,"column":58}},"range":[159,216],"raw":"有没有一种方法，可以在其他人浏览我们的博客文章的时候，直接把 JSX 编写的代码片段，给渲染成真实的 dom 节点"}],"loc":{"start":{"line":9,"column":0},"end":{"line":9,"column":59}},"range":[158,217],"raw":"*有没有一种方法，可以在其他人浏览我们的博客文章的时候，直接把 JSX 编写的代码片段，给渲染成真实的 dom 节点*"},{"type":"Str","value":"，不仅在博客内可以用到，在编写组件文档的时候就会非常有用。","loc":{"start":{"line":9,"column":59},"end":{"line":9,"column":88}},"range":[217,246],"raw":"，不仅在博客内可以用到，在编写组件文档的时候就会非常有用。"}],"loc":{"start":{"line":8,"column":0},"end":{"line":9,"column":88}},"range":[88,246],"raw":"我们在日常编写博客的时候，经常会书写一些 Jsx 的 DEMO 代码，其他人在浏览我们的博客文章的时候就可以参考一下这些 DEMO 代码。\n*有没有一种方法，可以在其他人浏览我们的博客文章的时候，直接把 JSX 编写的代码片段，给渲染成真实的 dom 节点*，不仅在博客内可以用到，在编写组件文档的时候就会非常有用。"},{"type":"Paragraph","children":[{"type":"Str","value":"就像下面这段 DEMO 代码一样，你不妨点击一下 \"预览\" 按钮，就可以直接看到这段代码渲染成真实的 dom 之后的样子，甚至还可以进行交互。","loc":{"start":{"line":11,"column":0},"end":{"line":11,"column":71}},"range":[248,319],"raw":"就像下面这段 DEMO 代码一样，你不妨点击一下 \"预览\" 按钮，就可以直接看到这段代码渲染成真实的 dom 之后的样子，甚至还可以进行交互。"}],"loc":{"start":{"line":11,"column":0},"end":{"line":11,"column":71}},"range":[248,319],"raw":"就像下面这段 DEMO 代码一样，你不妨点击一下 \"预览\" 按钮，就可以直接看到这段代码渲染成真实的 dom 之后的样子，甚至还可以进行交互。"},{"type":"CodeBlock","lang":"tsx","meta":null,"value":"// <live-demo>\nimport React, { useState } from 'react';\n// 可以直接从 unpkg.com 自动导入满足 umd / amd 规范的依赖\nimport { Button, Modal } from 'antd';\n\nconst CompTest: React.FC<{}> = props => {\n    const [show, setShow] = useState(false);\n    \n    return (\n        <>\n            <Modal\n                open={show}\n                title=\"这是一个 ant-design 的弹窗\"\n                onCancel={() => setShow(false)}\n                onOk={() => setShow(false)}\n            >\n                <span>这是弹窗的内容 🚀</span>\n            </Modal>\n            <Button type=\"primary\" onClick={() => setShow(true)}>点击Antd按钮</Button>\n        </>\n    )\n}\n\nexport default CompTest;","loc":{"start":{"line":13,"column":0},"end":{"line":38,"column":3}},"range":[321,971],"raw":"```tsx\n// <live-demo>\nimport React, { useState } from 'react';\n// 可以直接从 unpkg.com 自动导入满足 umd / amd 规范的依赖\nimport { Button, Modal } from 'antd';\n\nconst CompTest: React.FC<{}> = props => {\n    const [show, setShow] = useState(false);\n    \n    return (\n        <>\n            <Modal\n                open={show}\n                title=\"这是一个 ant-design 的弹窗\"\n                onCancel={() => setShow(false)}\n                onOk={() => setShow(false)}\n            >\n                <span>这是弹窗的内容 🚀</span>\n            </Modal>\n            <Button type=\"primary\" onClick={() => setShow(true)}>点击Antd按钮</Button>\n        </>\n    )\n}\n\nexport default CompTest;\n```"},{"type":"BlockQuote","children":[{"type":"Paragraph","children":[{"type":"Str","value":"这个能力，已经封装为 npm 包，提供了 React组件以及 Webcomponent 组件，可以在各种框架的项目中使用。","loc":{"start":{"line":40,"column":2},"end":{"line":40,"column":63}},"range":[975,1036],"raw":"这个能力，已经封装为 npm 包，提供了 React组件以及 Webcomponent 组件，可以在各种框架的项目中使用。"}],"loc":{"start":{"line":40,"column":2},"end":{"line":40,"column":63}},"range":[975,1036],"raw":"这个能力，已经封装为 npm 包，提供了 React组件以及 Webcomponent 组件，可以在各种框架的项目中使用。"},{"type":"CodeBlock","lang":"shell","meta":null,"value":"npm install @zhongbr/code-sandbox","loc":{"start":{"line":41,"column":2},"end":{"line":43,"column":5}},"range":[1039,1089],"raw":"```shell\n> npm install @zhongbr/code-sandbox\n> ```"}],"loc":{"start":{"line":40,"column":0},"end":{"line":43,"column":5}},"range":[973,1089],"raw":"> 这个能力，已经封装为 npm 包，提供了 React组件以及 Webcomponent 组件，可以在各种框架的项目中使用。\n> ```shell\n> npm install @zhongbr/code-sandbox\n> ```"},{"type":"Header","depth":2,"children":[{"type":"Str","value":"实现思路","loc":{"start":{"line":45,"column":3},"end":{"line":45,"column":7}},"range":[1094,1098],"raw":"实现思路"}],"loc":{"start":{"line":45,"column":0},"end":{"line":45,"column":7}},"range":[1091,1098],"raw":"## 实现思路"},{"type":"Paragraph","children":[{"type":"Str","value":"要想在博客网页内展示代码片段，需要考虑解决的问题：","loc":{"start":{"line":47,"column":0},"end":{"line":47,"column":25}},"range":[1100,1125],"raw":"要想在博客网页内展示代码片段，需要考虑解决的问题："}],"loc":{"start":{"line":47,"column":0},"end":{"line":47,"column":25}},"range":[1100,1125],"raw":"要想在博客网页内展示代码片段，需要考虑解决的问题："},{"type":"List","ordered":false,"start":null,"spread":false,"children":[{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"如果是 React、Vue 等代码的片段，如何让浏览器识别 JSX ?","loc":{"start":{"line":48,"column":2},"end":{"line":48,"column":37}},"range":[1128,1163],"raw":"如果是 React、Vue 等代码的片段，如何让浏览器识别 JSX ?"}],"loc":{"start":{"line":48,"column":2},"end":{"line":48,"column":37}},"range":[1128,1163],"raw":"如果是 React、Vue 等代码的片段，如何让浏览器识别 JSX ?"}],"loc":{"start":{"line":48,"column":0},"end":{"line":48,"column":37}},"range":[1126,1163],"raw":"- 如果是 React、Vue 等代码的片段，如何让浏览器识别 JSX ?"},{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"对于代码片段内使用到的第三方依赖，要如何获取？","loc":{"start":{"line":49,"column":2},"end":{"line":49,"column":25}},"range":[1166,1189],"raw":"对于代码片段内使用到的第三方依赖，要如何获取？"}],"loc":{"start":{"line":49,"column":2},"end":{"line":49,"column":25}},"range":[1166,1189],"raw":"对于代码片段内使用到的第三方依赖，要如何获取？"}],"loc":{"start":{"line":49,"column":0},"end":{"line":49,"column":25}},"range":[1164,1189],"raw":"- 对于代码片段内使用到的第三方依赖，要如何获取？"},{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"如何让代码片段和博客网页的环境隔离？","loc":{"start":{"line":50,"column":2},"end":{"line":50,"column":20}},"range":[1192,1210],"raw":"如何让代码片段和博客网页的环境隔离？"}],"loc":{"start":{"line":50,"column":2},"end":{"line":50,"column":20}},"range":[1192,1210],"raw":"如何让代码片段和博客网页的环境隔离？"}],"loc":{"start":{"line":50,"column":0},"end":{"line":50,"column":20}},"range":[1190,1210],"raw":"- 如何让代码片段和博客网页的环境隔离？"}],"loc":{"start":{"line":48,"column":0},"end":{"line":50,"column":20}},"range":[1126,1210],"raw":"- 如果是 React、Vue 等代码的片段，如何让浏览器识别 JSX ?\n- 对于代码片段内使用到的第三方依赖，要如何获取？\n- 如何让代码片段和博客网页的环境隔离？"},{"type":"Header","depth":2,"children":[{"type":"Str","value":"如何让浏览器识别 JSX 或者 Vue 模板？","loc":{"start":{"line":52,"column":3},"end":{"line":52,"column":26}},"range":[1215,1238],"raw":"如何让浏览器识别 JSX 或者 Vue 模板？"}],"loc":{"start":{"line":52,"column":0},"end":{"line":52,"column":26}},"range":[1212,1238],"raw":"## 如何让浏览器识别 JSX 或者 Vue 模板？"},{"type":"Paragraph","children":[{"type":"Str","value":"对于 Vue 的模板，比较好解决，Vue 框架本身就支持渐进式引入，直接在已有的 html 页面上运行。","loc":{"start":{"line":54,"column":0},"end":{"line":54,"column":52}},"range":[1240,1292],"raw":"对于 Vue 的模板，比较好解决，Vue 框架本身就支持渐进式引入，直接在已有的 html 页面上运行。"}],"loc":{"start":{"line":54,"column":0},"end":{"line":54,"column":52}},"range":[1240,1292],"raw":"对于 Vue 的模板，比较好解决，Vue 框架本身就支持渐进式引入，直接在已有的 html 页面上运行。"},{"type":"Paragraph","children":[{"type":"Str","value":"但是 React 没有渐进式引入的方式，对于 JSX 的处理是在构建阶段","loc":{"start":{"line":56,"column":0},"end":{"line":56,"column":36}},"range":[1294,1330],"raw":"但是 React 没有渐进式引入的方式，对于 JSX 的处理是在构建阶段"}],"loc":{"start":{"line":56,"column":0},"end":{"line":56,"column":36}},"range":[1294,1330],"raw":"但是 React 没有渐进式引入的方式，对于 JSX 的处理是在构建阶段"},{"type":"Paragraph","children":[{"type":"Str","value":"JSX 是一种 JavaScript 扩展语法，用于在 JavaScript 中描述 UI，拥有 JavaScript 的所有特性，相对于其他的模板，具有非常高的灵活性。\n但是 JSX 是不可以直接被浏览器识别的，需要经过构建工具构建之后，转换成可以普通的 JavaScript 代码之后，才可以在浏览器中运行。","loc":{"start":{"line":58,"column":0},"end":{"line":59,"column":70}},"range":[1332,1488],"raw":"JSX 是一种 JavaScript 扩展语法，用于在 JavaScript 中描述 UI，拥有 JavaScript 的所有特性，相对于其他的模板，具有非常高的灵活性。\n但是 JSX 是不可以直接被浏览器识别的，需要经过构建工具构建之后，转换成可以普通的 JavaScript 代码之后，才可以在浏览器中运行。"}],"loc":{"start":{"line":58,"column":0},"end":{"line":59,"column":70}},"range":[1332,1488],"raw":"JSX 是一种 JavaScript 扩展语法，用于在 JavaScript 中描述 UI，拥有 JavaScript 的所有特性，相对于其他的模板，具有非常高的灵活性。\n但是 JSX 是不可以直接被浏览器识别的，需要经过构建工具构建之后，转换成可以普通的 JavaScript 代码之后，才可以在浏览器中运行。"},{"type":"Paragraph","children":[{"type":"Str","value":"想让浏览器可以执行 JSX 代码有两种思路：","loc":{"start":{"line":62,"column":0},"end":{"line":62,"column":22}},"range":[1491,1513],"raw":"想让浏览器可以执行 JSX 代码有两种思路："}],"loc":{"start":{"line":62,"column":0},"end":{"line":62,"column":22}},"range":[1491,1513],"raw":"想让浏览器可以执行 JSX 代码有两种思路："},{"type":"List","ordered":false,"start":null,"spread":false,"children":[{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"构建阶段转换，直接将 demo 中的 JSX 代码也一起转换成 JavaScript","loc":{"start":{"line":63,"column":2},"end":{"line":63,"column":44}},"range":[1516,1558],"raw":"构建阶段转换，直接将 demo 中的 JSX 代码也一起转换成 JavaScript"}],"loc":{"start":{"line":63,"column":2},"end":{"line":63,"column":44}},"range":[1516,1558],"raw":"构建阶段转换，直接将 demo 中的 JSX 代码也一起转换成 JavaScript"}],"loc":{"start":{"line":63,"column":0},"end":{"line":63,"column":44}},"range":[1514,1558],"raw":"- 构建阶段转换，直接将 demo 中的 JSX 代码也一起转换成 JavaScript"},{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"运行时转换，在浏览器中加入一个转换的逻辑，将 JSX 代码转换成 JavaScript，然后通过 Function 、 eval 等方式进行执行。","loc":{"start":{"line":64,"column":2},"end":{"line":64,"column":75}},"range":[1561,1634],"raw":"运行时转换，在浏览器中加入一个转换的逻辑，将 JSX 代码转换成 JavaScript，然后通过 Function 、 eval 等方式进行执行。"}],"loc":{"start":{"line":64,"column":2},"end":{"line":64,"column":75}},"range":[1561,1634],"raw":"运行时转换，在浏览器中加入一个转换的逻辑，将 JSX 代码转换成 JavaScript，然后通过 Function 、 eval 等方式进行执行。"}],"loc":{"start":{"line":64,"column":0},"end":{"line":64,"column":75}},"range":[1559,1634],"raw":"- 运行时转换，在浏览器中加入一个转换的逻辑，将 JSX 代码转换成 JavaScript，然后通过 Function 、 eval 等方式进行执行。"}],"loc":{"start":{"line":63,"column":0},"end":{"line":64,"column":75}},"range":[1514,1634],"raw":"- 构建阶段转换，直接将 demo 中的 JSX 代码也一起转换成 JavaScript\n- 运行时转换，在浏览器中加入一个转换的逻辑，将 JSX 代码转换成 JavaScript，然后通过 Function 、 eval 等方式进行执行。"},{"type":"Paragraph","children":[{"type":"Str","value":"在构建阶段进行转换，实现成本较低，并且执行时的","loc":{"start":{"line":66,"column":0},"end":{"line":66,"column":23}},"range":[1636,1659],"raw":"在构建阶段进行转换，实现成本较低，并且执行时的"},{"type":"Strong","children":[{"type":"Str","value":"性能也更高","loc":{"start":{"line":66,"column":25},"end":{"line":66,"column":30}},"range":[1661,1666],"raw":"性能也更高"}],"loc":{"start":{"line":66,"column":23},"end":{"line":66,"column":32}},"range":[1659,1668],"raw":"**性能也更高**"},{"type":"Str","value":"，但是这样做会缺乏灵活性，构建完成后无法动态地修改 JSX 的代码，比较适用于只做展示的场景，如果是组件文档需要实时编辑的话，就无法通过这种方式来实现了。","loc":{"start":{"line":66,"column":32},"end":{"line":66,"column":109}},"range":[1668,1745],"raw":"，但是这样做会缺乏灵活性，构建完成后无法动态地修改 JSX 的代码，比较适用于只做展示的场景，如果是组件文档需要实时编辑的话，就无法通过这种方式来实现了。"}],"loc":{"start":{"line":66,"column":0},"end":{"line":66,"column":109}},"range":[1636,1745],"raw":"在构建阶段进行转换，实现成本较低，并且执行时的**性能也更高**，但是这样做会缺乏灵活性，构建完成后无法动态地修改 JSX 的代码，比较适用于只做展示的场景，如果是组件文档需要实时编辑的话，就无法通过这种方式来实现了。"},{"type":"Paragraph","children":[{"type":"Str","value":"市面上还有一些产品，比如 ","loc":{"start":{"line":68,"column":0},"end":{"line":68,"column":13}},"range":[1747,1760],"raw":"市面上还有一些产品，比如 "},{"type":"Link","title":null,"url":"https://codesandbox.io","children":[{"type":"Str","value":"CodeSandbox","loc":{"start":{"line":68,"column":14},"end":{"line":68,"column":25}},"range":[1761,1772],"raw":"CodeSandbox"}],"loc":{"start":{"line":68,"column":13},"end":{"line":68,"column":50}},"range":[1760,1797],"raw":"[CodeSandbox](https://codesandbox.io)"},{"type":"Str","value":" ，是通过将代码在服务端构建，然后直接将 html 通过 url 的方式提供给浏览器展示的方式实现，这种方式兼顾了性能和灵活性，\n但是需要提供一个后端服务，成本是非常高的，土豪可以试试用这种方式。","loc":{"start":{"line":68,"column":50},"end":{"line":69,"column":33}},"range":[1797,1895],"raw":" ，是通过将代码在服务端构建，然后直接将 html 通过 url 的方式提供给浏览器展示的方式实现，这种方式兼顾了性能和灵活性，\n但是需要提供一个后端服务，成本是非常高的，土豪可以试试用这种方式。"}],"loc":{"start":{"line":68,"column":0},"end":{"line":69,"column":33}},"range":[1747,1895],"raw":"市面上还有一些产品，比如 [CodeSandbox](https://codesandbox.io) ，是通过将代码在服务端构建，然后直接将 html 通过 url 的方式提供给浏览器展示的方式实现，这种方式兼顾了性能和灵活性，\n但是需要提供一个后端服务，成本是非常高的，土豪可以试试用这种方式。"},{"type":"Paragraph","children":[{"type":"Str","value":"对于一个个人博客或者说一个开源组件的文档来说，成本最低的方式当然是能够在一个静态的页面中进行，而不需要依赖任何后端服务，这样仅需一个 Github Pages 就可以了。","loc":{"start":{"line":71,"column":0},"end":{"line":71,"column":85}},"range":[1897,1982],"raw":"对于一个个人博客或者说一个开源组件的文档来说，成本最低的方式当然是能够在一个静态的页面中进行，而不需要依赖任何后端服务，这样仅需一个 Github Pages 就可以了。"}],"loc":{"start":{"line":71,"column":0},"end":{"line":71,"column":85}},"range":[1897,1982],"raw":"对于一个个人博客或者说一个开源组件的文档来说，成本最低的方式当然是能够在一个静态的页面中进行，而不需要依赖任何后端服务，这样仅需一个 Github Pages 就可以了。"},{"type":"Header","depth":3,"children":[{"type":"Str","value":"Babel Standalone","loc":{"start":{"line":73,"column":4},"end":{"line":73,"column":20}},"range":[1988,2004],"raw":"Babel Standalone"}],"loc":{"start":{"line":73,"column":0},"end":{"line":73,"column":20}},"range":[1984,2004],"raw":"### Babel Standalone"},{"type":"Paragraph","children":[{"type":"Str","value":"Babel 是前端工程化里使用最广泛的 JS 预处理器，让我们可以在编写代码时使用一些最新的或者浏览器还不支持的特性，转换成浏览器可以识别的代码。\nBabel 除了可以用在 NodeJS 构建编译阶段以外，还提供了 @babel/standalone 包，可以直接在浏览器内运行。","loc":{"start":{"line":75,"column":0},"end":{"line":76,"column":66}},"range":[2006,2146],"raw":"Babel 是前端工程化里使用最广泛的 JS 预处理器，让我们可以在编写代码时使用一些最新的或者浏览器还不支持的特性，转换成浏览器可以识别的代码。\nBabel 除了可以用在 NodeJS 构建编译阶段以外，还提供了 @babel/standalone 包，可以直接在浏览器内运行。"}],"loc":{"start":{"line":75,"column":0},"end":{"line":76,"column":66}},"range":[2006,2146],"raw":"Babel 是前端工程化里使用最广泛的 JS 预处理器，让我们可以在编写代码时使用一些最新的或者浏览器还不支持的特性，转换成浏览器可以识别的代码。\nBabel 除了可以用在 NodeJS 构建编译阶段以外，还提供了 @babel/standalone 包，可以直接在浏览器内运行。"},{"type":"Paragraph","children":[{"type":"Str","value":"基于 Babel standalone ，我们就可以实现在浏览器内将 JSX 代码转换成 JS，然后进行执行。","loc":{"start":{"line":78,"column":0},"end":{"line":78,"column":55}},"range":[2148,2203],"raw":"基于 Babel standalone ，我们就可以实现在浏览器内将 JSX 代码转换成 JS，然后进行执行。"}],"loc":{"start":{"line":78,"column":0},"end":{"line":78,"column":55}},"range":[2148,2203],"raw":"基于 Babel standalone ，我们就可以实现在浏览器内将 JSX 代码转换成 JS，然后进行执行。"},{"type":"Paragraph","children":[{"type":"Link","title":null,"url":"https://babeljs.io/docs/en/babel-standalone","children":[{"type":"Str","value":"@babel/standalone 文档","loc":{"start":{"line":80,"column":1},"end":{"line":80,"column":21}},"range":[2206,2226],"raw":"@babel/standalone 文档"}],"loc":{"start":{"line":80,"column":0},"end":{"line":80,"column":67}},"range":[2205,2272],"raw":"[@babel/standalone 文档](https://babeljs.io/docs/en/babel-standalone)"}],"loc":{"start":{"line":80,"column":0},"end":{"line":80,"column":67}},"range":[2205,2272],"raw":"[@babel/standalone 文档](https://babeljs.io/docs/en/babel-standalone)"},{"type":"Paragraph","children":[{"type":"Str","value":"@babel/standalone 内置了 ","loc":{"start":{"line":82,"column":0},"end":{"line":82,"column":22}},"range":[2274,2296],"raw":"@babel/standalone 内置了 "},{"type":"Code","value":"react","loc":{"start":{"line":82,"column":22},"end":{"line":82,"column":29}},"range":[2296,2303],"raw":"`react`"},{"type":"Str","value":" 的 preset，只需要在 transform 传入 preset: ['react'] 就可以实现将 JSX 转换成 js 的能力了。","loc":{"start":{"line":82,"column":29},"end":{"line":82,"column":98}},"range":[2303,2372],"raw":" 的 preset，只需要在 transform 传入 preset: ['react'] 就可以实现将 JSX 转换成 js 的能力了。"}],"loc":{"start":{"line":82,"column":0},"end":{"line":82,"column":98}},"range":[2274,2372],"raw":"@babel/standalone 内置了 `react` 的 preset，只需要在 transform 传入 preset: ['react'] 就可以实现将 JSX 转换成 js 的能力了。"},{"type":"Paragraph","children":[{"type":"Str","value":"搭配 ","loc":{"start":{"line":84,"column":0},"end":{"line":84,"column":3}},"range":[2374,2377],"raw":"搭配 "},{"type":"Code","value":"registerPlugin","loc":{"start":{"line":84,"column":3},"end":{"line":84,"column":19}},"range":[2377,2393],"raw":"`registerPlugin`"},{"type":"Str","value":" 接口，实现一个 babel 插件，来对 AST 进行操作。","loc":{"start":{"line":84,"column":19},"end":{"line":84,"column":49}},"range":[2393,2423],"raw":" 接口，实现一个 babel 插件，来对 AST 进行操作。"}],"loc":{"start":{"line":84,"column":0},"end":{"line":84,"column":49}},"range":[2374,2423],"raw":"搭配 `registerPlugin` 接口，实现一个 babel 插件，来对 AST 进行操作。"},{"type":"Header","depth":2,"children":[{"type":"Str","value":"对于代码片段内使用的第三方依赖要如何获取？","loc":{"start":{"line":86,"column":3},"end":{"line":86,"column":24}},"range":[2428,2449],"raw":"对于代码片段内使用的第三方依赖要如何获取？"}],"loc":{"start":{"line":86,"column":0},"end":{"line":86,"column":24}},"range":[2425,2449],"raw":"## 对于代码片段内使用的第三方依赖要如何获取？"},{"type":"Paragraph","children":[{"type":"Str","value":"jsdelivr 和 unpkg 等开源 CDN 上收录了 npm 和 github 上的资源，并且可以通过拼接 url 的方式，直接获取到。","loc":{"start":{"line":88,"column":0},"end":{"line":88,"column":71}},"range":[2451,2522],"raw":"jsdelivr 和 unpkg 等开源 CDN 上收录了 npm 和 github 上的资源，并且可以通过拼接 url 的方式，直接获取到。"}],"loc":{"start":{"line":88,"column":0},"end":{"line":88,"column":71}},"range":[2451,2522],"raw":"jsdelivr 和 unpkg 等开源 CDN 上收录了 npm 和 github 上的资源，并且可以通过拼接 url 的方式，直接获取到。"},{"type":"Paragraph","children":[{"type":"Str","value":"找到获取依赖脚本的渠道，那么要解决第三方依赖的问题，就需要把这些脚本组织到一起，本质上就是要实现模块管理的机制，目前整个前端生态来看，各种新的旧的、官方和社区维护的模块机制都有，cjs、umd、amd、es module 等等。\n就算是在 NodeJS 里，也没有一个统一的引入方式来引入各种规范的依赖。","loc":{"start":{"line":90,"column":0},"end":{"line":91,"column":37}},"range":[2524,2676],"raw":"找到获取依赖脚本的渠道，那么要解决第三方依赖的问题，就需要把这些脚本组织到一起，本质上就是要实现模块管理的机制，目前整个前端生态来看，各种新的旧的、官方和社区维护的模块机制都有，cjs、umd、amd、es module 等等。\n就算是在 NodeJS 里，也没有一个统一的引入方式来引入各种规范的依赖。"}],"loc":{"start":{"line":90,"column":0},"end":{"line":91,"column":37}},"range":[2524,2676],"raw":"找到获取依赖脚本的渠道，那么要解决第三方依赖的问题，就需要把这些脚本组织到一起，本质上就是要实现模块管理的机制，目前整个前端生态来看，各种新的旧的、官方和社区维护的模块机制都有，cjs、umd、amd、es module 等等。\n就算是在 NodeJS 里，也没有一个统一的引入方式来引入各种规范的依赖。"},{"type":"Header","depth":3,"children":[{"type":"Str","value":"CommonJS 模块","loc":{"start":{"line":93,"column":4},"end":{"line":93,"column":15}},"range":[2682,2693],"raw":"CommonJS 模块"}],"loc":{"start":{"line":93,"column":0},"end":{"line":93,"column":15}},"range":[2678,2693],"raw":"### CommonJS 模块"},{"type":"Paragraph","children":[{"type":"Str","value":"CommonJS 模块是 NodeJS 默认的模块化规范，使用内置的 ","loc":{"start":{"line":95,"column":0},"end":{"line":95,"column":35}},"range":[2695,2730],"raw":"CommonJS 模块是 NodeJS 默认的模块化规范，使用内置的 "},{"type":"Code","value":"require","loc":{"start":{"line":95,"column":35},"end":{"line":95,"column":44}},"range":[2730,2739],"raw":"`require`"},{"type":"Str","value":" 函数导入模块，使用 ","loc":{"start":{"line":95,"column":44},"end":{"line":95,"column":55}},"range":[2739,2750],"raw":" 函数导入模块，使用 "},{"type":"Code","value":"exports/module.exports","loc":{"start":{"line":95,"column":55},"end":{"line":95,"column":79}},"range":[2750,2774],"raw":"`exports/module.exports`"},{"type":"Str","value":" 导出模块， ","loc":{"start":{"line":95,"column":79},"end":{"line":95,"column":86}},"range":[2774,2781],"raw":" 导出模块， "},{"type":"Strong","children":[{"type":"Code","value":"require","loc":{"start":{"line":95,"column":88},"end":{"line":95,"column":97}},"range":[2783,2792],"raw":"`require`"},{"type":"Str","value":"函数是同步的","loc":{"start":{"line":95,"column":97},"end":{"line":95,"column":103}},"range":[2792,2798],"raw":"函数是同步的"}],"loc":{"start":{"line":95,"column":86},"end":{"line":95,"column":105}},"range":[2781,2800],"raw":"**`require`函数是同步的**"},{"type":"Str","value":"，\n如果只是组织本地的模块（AMD就支持，没有必要），其实是可以在浏览器实现的，但是如果需要加载网络资源，同步的 ","loc":{"start":{"line":95,"column":105},"end":{"line":96,"column":55}},"range":[2800,2857],"raw":"，\n如果只是组织本地的模块（AMD就支持，没有必要），其实是可以在浏览器实现的，但是如果需要加载网络资源，同步的 "},{"type":"Code","value":"require","loc":{"start":{"line":96,"column":55},"end":{"line":96,"column":64}},"range":[2857,2866],"raw":"`require`"},{"type":"Str","value":" 就不太行了，整个页面都会阻塞。","loc":{"start":{"line":96,"column":64},"end":{"line":96,"column":80}},"range":[2866,2882],"raw":" 就不太行了，整个页面都会阻塞。"}],"loc":{"start":{"line":95,"column":0},"end":{"line":96,"column":80}},"range":[2695,2882],"raw":"CommonJS 模块是 NodeJS 默认的模块化规范，使用内置的 `require` 函数导入模块，使用 `exports/module.exports` 导出模块， **`require`函数是同步的**，\n如果只是组织本地的模块（AMD就支持，没有必要），其实是可以在浏览器实现的，但是如果需要加载网络资源，同步的 `require` 就不太行了，整个页面都会阻塞。"},{"type":"Header","depth":3,"children":[{"type":"Str","value":"ESM 模块","loc":{"start":{"line":98,"column":4},"end":{"line":98,"column":10}},"range":[2888,2894],"raw":"ESM 模块"}],"loc":{"start":{"line":98,"column":0},"end":{"line":98,"column":10}},"range":[2884,2894],"raw":"### ESM 模块"},{"type":"Paragraph","children":[{"type":"Image","title":null,"url":"../imgs/img.png","alt":"img.png","loc":{"start":{"line":100,"column":0},"end":{"line":100,"column":27}},"range":[2896,2923],"raw":"![img.png](../imgs/img.png)"},{"type":"Str","value":"\n现在绝大部分的浏览器都原生支持 ESM 模块化，如果只用到 ES Module 的模块，借助标准的 ","loc":{"start":{"line":100,"column":27},"end":{"line":101,"column":50}},"range":[2923,2974],"raw":"\n现在绝大部分的浏览器都原生支持 ESM 模块化，如果只用到 ES Module 的模块，借助标准的 "},{"type":"Code","value":"<script type=\"module\"></script>","loc":{"start":{"line":101,"column":50},"end":{"line":101,"column":83}},"range":[2974,3007],"raw":"`<script type=\"module\"></script>`"},{"type":"Str","value":"就可以实现，并且浏览器内置的 es module 可以直接 import 网络资源。","loc":{"start":{"line":101,"column":83},"end":{"line":101,"column":125}},"range":[3007,3049],"raw":"就可以实现，并且浏览器内置的 es module 可以直接 import 网络资源。"}],"loc":{"start":{"line":100,"column":0},"end":{"line":101,"column":125}},"range":[2896,3049],"raw":"![img.png](../imgs/img.png)\n现在绝大部分的浏览器都原生支持 ESM 模块化，如果只用到 ES Module 的模块，借助标准的 `<script type=\"module\"></script>`就可以实现，并且浏览器内置的 es module 可以直接 import 网络资源。"},{"type":"Header","depth":3,"children":[{"type":"Str","value":"umd、amd 模块","loc":{"start":{"line":103,"column":4},"end":{"line":103,"column":14}},"range":[3055,3065],"raw":"umd、amd 模块"}],"loc":{"start":{"line":103,"column":0},"end":{"line":103,"column":14}},"range":[3051,3065],"raw":"### umd、amd 模块"},{"type":"Paragraph","children":[{"type":"Link","title":null,"url":"https://github.com/umdjs/umd","children":[{"type":"Str","value":"umd(Universal Module Definition)","loc":{"start":{"line":105,"column":1},"end":{"line":105,"column":33}},"range":[3068,3100],"raw":"umd(Universal Module Definition)"}],"loc":{"start":{"line":105,"column":0},"end":{"line":105,"column":64}},"range":[3067,3131],"raw":"[umd(Universal Module Definition)](https://github.com/umdjs/umd)"},{"type":"Str","value":" 模块是可以通过 cjs、amd 或者浏览器全局变量等多种方式来组织的，那么我们只需要在 sandbox 里实现 amd 规范，就可以支持 umd 格式的包了。","loc":{"start":{"line":105,"column":64},"end":{"line":105,"column":144}},"range":[3131,3211],"raw":" 模块是可以通过 cjs、amd 或者浏览器全局变量等多种方式来组织的，那么我们只需要在 sandbox 里实现 amd 规范，就可以支持 umd 格式的包了。"}],"loc":{"start":{"line":105,"column":0},"end":{"line":105,"column":144}},"range":[3067,3211],"raw":"[umd(Universal Module Definition)](https://github.com/umdjs/umd) 模块是可以通过 cjs、amd 或者浏览器全局变量等多种方式来组织的，那么我们只需要在 sandbox 里实现 amd 规范，就可以支持 umd 格式的包了。"},{"type":"Paragraph","children":[{"type":"Str","value":"如果只是需要一个纯粹的 AMD 实现，那么直接用","loc":{"start":{"line":107,"column":0},"end":{"line":107,"column":24}},"range":[3213,3237],"raw":"如果只是需要一个纯粹的 AMD 实现，那么直接用"},{"type":"Link","title":null,"url":"https://github.com/amdjs/amdjs-api","children":[{"type":"Str","value":"amdjs","loc":{"start":{"line":107,"column":25},"end":{"line":107,"column":30}},"range":[3238,3243],"raw":"amdjs"}],"loc":{"start":{"line":107,"column":24},"end":{"line":107,"column":67}},"range":[3237,3280],"raw":"[amdjs](https://github.com/amdjs/amdjs-api)"},{"type":"Str","value":"即可，但是我想将 AMD 和 unpkg、jsdelivr 等 cdn 结合到一起，require 本地不存在的依赖时，自动从 cdn 上下载。","loc":{"start":{"line":107,"column":67},"end":{"line":107,"column":139}},"range":[3280,3352],"raw":"即可，但是我想将 AMD 和 unpkg、jsdelivr 等 cdn 结合到一起，require 本地不存在的依赖时，自动从 cdn 上下载。"}],"loc":{"start":{"line":107,"column":0},"end":{"line":107,"column":139}},"range":[3213,3352],"raw":"如果只是需要一个纯粹的 AMD 实现，那么直接用[amdjs](https://github.com/amdjs/amdjs-api)即可，但是我想将 AMD 和 unpkg、jsdelivr 等 cdn 结合到一起，require 本地不存在的依赖时，自动从 cdn 上下载。"},{"type":"Paragraph","children":[{"type":"Str","value":"自己实现一个 amd 模块，也就是 ","loc":{"start":{"line":109,"column":0},"end":{"line":109,"column":18}},"range":[3354,3372],"raw":"自己实现一个 amd 模块，也就是 "},{"type":"Link","title":null,"url":"https://github.com/zhongbr/zhongbr-blog/tree/main/packages/code-sandbox/src/core/amd","children":[{"type":"Str","value":"@zhongbr/code-sandbox/es/core/amd","loc":{"start":{"line":109,"column":19},"end":{"line":109,"column":52}},"range":[3373,3406],"raw":"@zhongbr/code-sandbox/es/core/amd"}],"loc":{"start":{"line":109,"column":18},"end":{"line":109,"column":139}},"range":[3372,3493],"raw":"[@zhongbr/code-sandbox/es/core/amd](https://github.com/zhongbr/zhongbr-blog/tree/main/packages/code-sandbox/src/core/amd)"},{"type":"Str","value":"，实现一个插件机制，向插件暴露一些钩子，\n插件通过监听钩子的方式，修改 amd 的导入过程。","loc":{"start":{"line":109,"column":139},"end":{"line":110,"column":25}},"range":[3493,3539],"raw":"，实现一个插件机制，向插件暴露一些钩子，\n插件通过监听钩子的方式，修改 amd 的导入过程。"}],"loc":{"start":{"line":109,"column":0},"end":{"line":110,"column":25}},"range":[3354,3539],"raw":"自己实现一个 amd 模块，也就是 [@zhongbr/code-sandbox/es/core/amd](https://github.com/zhongbr/zhongbr-blog/tree/main/packages/code-sandbox/src/core/amd)，实现一个插件机制，向插件暴露一些钩子，\n插件通过监听钩子的方式，修改 amd 的导入过程。"},{"type":"Header","depth":2,"children":[{"type":"Str","value":"如何让代码片段和博客网页的环境隔离？","loc":{"start":{"line":112,"column":3},"end":{"line":112,"column":21}},"range":[3544,3562],"raw":"如何让代码片段和博客网页的环境隔离？"}],"loc":{"start":{"line":112,"column":0},"end":{"line":112,"column":21}},"range":[3541,3562],"raw":"## 如何让代码片段和博客网页的环境隔离？"},{"type":"Paragraph","children":[{"type":"Str","value":"代码片段里的代码，安全和稳定性难以得到保证，如果直接在页面里面运行，轻则污染页面全局环境，重则可能由于代码片段报错导致整个页面都白屏不能交互。\n所以需要将代码片段的代码与页面代码隔离开，可以将代码片段放到一个 ","loc":{"start":{"line":114,"column":0},"end":{"line":115,"column":33}},"range":[3564,3669],"raw":"代码片段里的代码，安全和稳定性难以得到保证，如果直接在页面里面运行，轻则污染页面全局环境，重则可能由于代码片段报错导致整个页面都白屏不能交互。\n所以需要将代码片段的代码与页面代码隔离开，可以将代码片段放到一个 "},{"type":"Code","value":"iframe","loc":{"start":{"line":115,"column":33},"end":{"line":115,"column":41}},"range":[3669,3677],"raw":"`iframe`"},{"type":"Str","value":" 里来运行。","loc":{"start":{"line":115,"column":41},"end":{"line":115,"column":47}},"range":[3677,3683],"raw":" 里来运行。"}],"loc":{"start":{"line":114,"column":0},"end":{"line":115,"column":47}},"range":[3564,3683],"raw":"代码片段里的代码，安全和稳定性难以得到保证，如果直接在页面里面运行，轻则污染页面全局环境，重则可能由于代码片段报错导致整个页面都白屏不能交互。\n所以需要将代码片段的代码与页面代码隔离开，可以将代码片段放到一个 `iframe` 里来运行。"},{"type":"Paragraph","children":[{"type":"Str","value":"如果直接在 ","loc":{"start":{"line":117,"column":0},"end":{"line":117,"column":6}},"range":[3685,3691],"raw":"如果直接在 "},{"type":"Code","value":"iframe","loc":{"start":{"line":117,"column":6},"end":{"line":117,"column":14}},"range":[3691,3699],"raw":"`iframe`"},{"type":"Str","value":" 里通过 ","loc":{"start":{"line":117,"column":14},"end":{"line":117,"column":19}},"range":[3699,3704],"raw":" 里通过 "},{"type":"Code","value":"src","loc":{"start":{"line":117,"column":19},"end":{"line":117,"column":24}},"range":[3704,3709],"raw":"`src`"},{"type":"Str","value":" 嵌入页面，需要知道要嵌入页面的地址，如果要封装成组件，这个是很难做到的，除非在使用组件的时候当做参数传入。","loc":{"start":{"line":117,"column":24},"end":{"line":117,"column":78}},"range":[3709,3763],"raw":" 嵌入页面，需要知道要嵌入页面的地址，如果要封装成组件，这个是很难做到的，除非在使用组件的时候当做参数传入。"}],"loc":{"start":{"line":117,"column":0},"end":{"line":117,"column":78}},"range":[3685,3763],"raw":"如果直接在 `iframe` 里通过 `src` 嵌入页面，需要知道要嵌入页面的地址，如果要封装成组件，这个是很难做到的，除非在使用组件的时候当做参数传入。"},{"type":"CodeBlock","lang":"html","meta":null,"value":"<iframe src=\"/xxx\"></iframe>","loc":{"start":{"line":118,"column":0},"end":{"line":120,"column":3}},"range":[3764,3804],"raw":"```html\n<iframe src=\"/xxx\"></iframe>\n```"},{"type":"Paragraph","children":[{"type":"Code","value":"iframe","loc":{"start":{"line":122,"column":0},"end":{"line":122,"column":8}},"range":[3806,3814],"raw":"`iframe`"},{"type":"Str","value":" 标签是有一个 ","loc":{"start":{"line":122,"column":8},"end":{"line":122,"column":16}},"range":[3814,3822],"raw":" 标签是有一个 "},{"type":"Code","value":"srcdoc","loc":{"start":{"line":122,"column":16},"end":{"line":122,"column":24}},"range":[3822,3830],"raw":"`srcdoc`"},{"type":"Str","value":" 属性的，使用这个属性可以直接传入一段 html，这样就不需要提前知道嵌入页面的地址。","loc":{"start":{"line":122,"column":24},"end":{"line":122,"column":67}},"range":[3830,3873],"raw":" 属性的，使用这个属性可以直接传入一段 html，这样就不需要提前知道嵌入页面的地址。"}],"loc":{"start":{"line":122,"column":0},"end":{"line":122,"column":67}},"range":[3806,3873],"raw":"`iframe` 标签是有一个 `srcdoc` 属性的，使用这个属性可以直接传入一段 html，这样就不需要提前知道嵌入页面的地址。"},{"type":"Header","depth":2,"children":[{"type":"Str","value":"其他优化","loc":{"start":{"line":124,"column":3},"end":{"line":124,"column":7}},"range":[3878,3882],"raw":"其他优化"}],"loc":{"start":{"line":124,"column":0},"end":{"line":124,"column":7}},"range":[3875,3882],"raw":"## 其他优化"},{"type":"Paragraph","children":[{"type":"Str","value":"整个 Sandbox 里，需要使用到 @babel/standalone , 这个包是非常大的，而且执行起来也比较耗时，所以可以考虑将 babel 提出来放到一个单独的 WebWorker 里，避免 worker 加载或者执行时阻塞页面。","loc":{"start":{"line":126,"column":0},"end":{"line":126,"column":119}},"range":[3884,4003],"raw":"整个 Sandbox 里，需要使用到 @babel/standalone , 这个包是非常大的，而且执行起来也比较耗时，所以可以考虑将 babel 提出来放到一个单独的 WebWorker 里，避免 worker 加载或者执行时阻塞页面。"}],"loc":{"start":{"line":126,"column":0},"end":{"line":126,"column":119}},"range":[3884,4003],"raw":"整个 Sandbox 里，需要使用到 @babel/standalone , 这个包是非常大的，而且执行起来也比较耗时，所以可以考虑将 babel 提出来放到一个单独的 WebWorker 里，避免 worker 加载或者执行时阻塞页面。"},{"type":"Paragraph","children":[{"type":"Str","value":"页面和 Worker 或者 Frame 通信，都是使用 ","loc":{"start":{"line":128,"column":0},"end":{"line":128,"column":28}},"range":[4005,4033],"raw":"页面和 Worker 或者 Frame 通信，都是使用 "},{"type":"Code","value":"postMessage","loc":{"start":{"line":128,"column":28},"end":{"line":128,"column":41}},"range":[4033,4046],"raw":"`postMessage`"},{"type":"Str","value":" 的方式来进行的，","loc":{"start":{"line":128,"column":41},"end":{"line":128,"column":50}},"range":[4046,4055],"raw":" 的方式来进行的，"},{"type":"Code","value":"postMessage","loc":{"start":{"line":128,"column":50},"end":{"line":128,"column":63}},"range":[4055,4068],"raw":"`postMessage`"},{"type":"Str","value":" 使用结构化克隆的方式将消息序列化之后传递到目标进程，使用 ","loc":{"start":{"line":128,"column":63},"end":{"line":128,"column":93}},"range":[4068,4098],"raw":" 使用结构化克隆的方式将消息序列化之后传递到目标进程，使用 "},{"type":"Code","value":"postMessage","loc":{"start":{"line":128,"column":93},"end":{"line":128,"column":106}},"range":[4098,4111],"raw":"`postMessage`"},{"type":"Str","value":" 发送消息，是不受到同源策略限制的，\n所以我们可以给运行代码片段的 iframe 开启 sandbox ，只 ","loc":{"start":{"line":128,"column":106},"end":{"line":129,"column":36}},"range":[4111,4166],"raw":" 发送消息，是不受到同源策略限制的，\n所以我们可以给运行代码片段的 iframe 开启 sandbox ，只 "},{"type":"Code","value":"allow-script","loc":{"start":{"line":129,"column":36},"end":{"line":129,"column":50}},"range":[4166,4180],"raw":"`allow-script`"},{"type":"Str","value":"，不开放其他的权限，和页面之间使用 ","loc":{"start":{"line":129,"column":50},"end":{"line":129,"column":68}},"range":[4180,4198],"raw":"，不开放其他的权限，和页面之间使用 "},{"type":"Code","value":"postMessage","loc":{"start":{"line":129,"column":68},"end":{"line":129,"column":81}},"range":[4198,4211],"raw":"`postMessage`"},{"type":"Str","value":" 来进行通信，这样就可以避免代码片段访问页面内的资源。","loc":{"start":{"line":129,"column":81},"end":{"line":129,"column":108}},"range":[4211,4238],"raw":" 来进行通信，这样就可以避免代码片段访问页面内的资源。"}],"loc":{"start":{"line":128,"column":0},"end":{"line":129,"column":108}},"range":[4005,4238],"raw":"页面和 Worker 或者 Frame 通信，都是使用 `postMessage` 的方式来进行的，`postMessage` 使用结构化克隆的方式将消息序列化之后传递到目标进程，使用 `postMessage` 发送消息，是不受到同源策略限制的，\n所以我们可以给运行代码片段的 iframe 开启 sandbox ，只 `allow-script`，不开放其他的权限，和页面之间使用 `postMessage` 来进行通信，这样就可以避免代码片段访问页面内的资源。"},{"type":"Paragraph","children":[{"type":"Str","value":"由于 iframe 是使用 ","loc":{"start":{"line":131,"column":0},"end":{"line":131,"column":14}},"range":[4240,4254],"raw":"由于 iframe 是使用 "},{"type":"Code","value":"srcdoc","loc":{"start":{"line":131,"column":14},"end":{"line":131,"column":22}},"range":[4254,4262],"raw":"`srcdoc`"},{"type":"Str","value":" 创建的，如果开启 sandbox 但是没有 ","loc":{"start":{"line":131,"column":22},"end":{"line":131,"column":45}},"range":[4262,4285],"raw":" 创建的，如果开启 sandbox 但是没有 "},{"type":"Code","value":"allow-same-origin","loc":{"start":{"line":131,"column":45},"end":{"line":131,"column":64}},"range":[4285,4304],"raw":"`allow-same-origin`"},{"type":"Str","value":"，那 iframe 的 origin 就是 null，直接 ","loc":{"start":{"line":131,"column":64},"end":{"line":131,"column":94}},"range":[4304,4334],"raw":"，那 iframe 的 origin 就是 null，直接 "},{"type":"Code","value":"postMessage","loc":{"start":{"line":131,"column":94},"end":{"line":131,"column":107}},"range":[4334,4347],"raw":"`postMessage`"},{"type":"Str","value":" 是会报错的：","loc":{"start":{"line":131,"column":107},"end":{"line":131,"column":114}},"range":[4347,4354],"raw":" 是会报错的："}],"loc":{"start":{"line":131,"column":0},"end":{"line":131,"column":114}},"range":[4240,4354],"raw":"由于 iframe 是使用 `srcdoc` 创建的，如果开启 sandbox 但是没有 `allow-same-origin`，那 iframe 的 origin 就是 null，直接 `postMessage` 是会报错的："},{"type":"CodeBlock","lang":"text","meta":null,"value":"Failed to execute 'postMessage' on 'DOMWindow': The target origin provided ('null') does not match the recipient window's origin","loc":{"start":{"line":133,"column":0},"end":{"line":135,"column":3}},"range":[4356,4496],"raw":"```text\nFailed to execute 'postMessage' on 'DOMWindow': The target origin provided ('null') does not match the recipient window's origin\n```"},{"type":"Paragraph","children":[{"type":"Str","value":"这个时候需要给 ","loc":{"start":{"line":137,"column":0},"end":{"line":137,"column":8}},"range":[4498,4506],"raw":"这个时候需要给 "},{"type":"Code","value":"postMessage","loc":{"start":{"line":137,"column":8},"end":{"line":137,"column":21}},"range":[4506,4519],"raw":"`postMessage`"},{"type":"Str","value":" 设置一个 ","loc":{"start":{"line":137,"column":21},"end":{"line":137,"column":27}},"range":[4519,4525],"raw":" 设置一个 "},{"type":"Code","value":"targetOrigin: '*''","loc":{"start":{"line":137,"column":27},"end":{"line":137,"column":47}},"range":[4525,4545],"raw":"`targetOrigin: '*''`"},{"type":"Str","value":" 来解决上面的报错。","loc":{"start":{"line":137,"column":47},"end":{"line":137,"column":57}},"range":[4545,4555],"raw":" 来解决上面的报错。"}],"loc":{"start":{"line":137,"column":0},"end":{"line":137,"column":57}},"range":[4498,4555],"raw":"这个时候需要给 `postMessage` 设置一个 `targetOrigin: '*''` 来解决上面的报错。"},{"type":"CodeBlock","lang":"javascript","meta":null,"value":"iframe.contentWindow.postMessage({}, {\n    targetOrigin: '*'\n});","loc":{"start":{"line":139,"column":0},"end":{"line":143,"column":3}},"range":[4557,4639],"raw":"```javascript\niframe.contentWindow.postMessage({}, {\n    targetOrigin: '*'\n});\n```"}],"loc":{"start":{"line":1,"column":0},"end":{"line":144,"column":0}},"range":[0,4640],"raw":"---\ntitle: '如何在博客上展示可交互的代码片段?'\ntags: ['前端', 'React', 'babel']\n---\n\n# 如何在博客上展示可交互的代码片段?\n\n我们在日常编写博客的时候，经常会书写一些 Jsx 的 DEMO 代码，其他人在浏览我们的博客文章的时候就可以参考一下这些 DEMO 代码。\n*有没有一种方法，可以在其他人浏览我们的博客文章的时候，直接把 JSX 编写的代码片段，给渲染成真实的 dom 节点*，不仅在博客内可以用到，在编写组件文档的时候就会非常有用。\n\n就像下面这段 DEMO 代码一样，你不妨点击一下 \"预览\" 按钮，就可以直接看到这段代码渲染成真实的 dom 之后的样子，甚至还可以进行交互。\n\n```tsx\n// <live-demo>\nimport React, { useState } from 'react';\n// 可以直接从 unpkg.com 自动导入满足 umd / amd 规范的依赖\nimport { Button, Modal } from 'antd';\n\nconst CompTest: React.FC<{}> = props => {\n    const [show, setShow] = useState(false);\n    \n    return (\n        <>\n            <Modal\n                open={show}\n                title=\"这是一个 ant-design 的弹窗\"\n                onCancel={() => setShow(false)}\n                onOk={() => setShow(false)}\n            >\n                <span>这是弹窗的内容 🚀</span>\n            </Modal>\n            <Button type=\"primary\" onClick={() => setShow(true)}>点击Antd按钮</Button>\n        </>\n    )\n}\n\nexport default CompTest;\n```\n\n> 这个能力，已经封装为 npm 包，提供了 React组件以及 Webcomponent 组件，可以在各种框架的项目中使用。\n> ```shell\n> npm install @zhongbr/code-sandbox\n> ```\n\n## 实现思路\n\n要想在博客网页内展示代码片段，需要考虑解决的问题：\n- 如果是 React、Vue 等代码的片段，如何让浏览器识别 JSX ?\n- 对于代码片段内使用到的第三方依赖，要如何获取？\n- 如何让代码片段和博客网页的环境隔离？\n\n## 如何让浏览器识别 JSX 或者 Vue 模板？\n\n对于 Vue 的模板，比较好解决，Vue 框架本身就支持渐进式引入，直接在已有的 html 页面上运行。\n\n但是 React 没有渐进式引入的方式，对于 JSX 的处理是在构建阶段\n\nJSX 是一种 JavaScript 扩展语法，用于在 JavaScript 中描述 UI，拥有 JavaScript 的所有特性，相对于其他的模板，具有非常高的灵活性。\n但是 JSX 是不可以直接被浏览器识别的，需要经过构建工具构建之后，转换成可以普通的 JavaScript 代码之后，才可以在浏览器中运行。\n\n\n想让浏览器可以执行 JSX 代码有两种思路：\n- 构建阶段转换，直接将 demo 中的 JSX 代码也一起转换成 JavaScript\n- 运行时转换，在浏览器中加入一个转换的逻辑，将 JSX 代码转换成 JavaScript，然后通过 Function 、 eval 等方式进行执行。\n\n在构建阶段进行转换，实现成本较低，并且执行时的**性能也更高**，但是这样做会缺乏灵活性，构建完成后无法动态地修改 JSX 的代码，比较适用于只做展示的场景，如果是组件文档需要实时编辑的话，就无法通过这种方式来实现了。\n\n市面上还有一些产品，比如 [CodeSandbox](https://codesandbox.io) ，是通过将代码在服务端构建，然后直接将 html 通过 url 的方式提供给浏览器展示的方式实现，这种方式兼顾了性能和灵活性，\n但是需要提供一个后端服务，成本是非常高的，土豪可以试试用这种方式。\n\n对于一个个人博客或者说一个开源组件的文档来说，成本最低的方式当然是能够在一个静态的页面中进行，而不需要依赖任何后端服务，这样仅需一个 Github Pages 就可以了。\n\n### Babel Standalone\n\nBabel 是前端工程化里使用最广泛的 JS 预处理器，让我们可以在编写代码时使用一些最新的或者浏览器还不支持的特性，转换成浏览器可以识别的代码。\nBabel 除了可以用在 NodeJS 构建编译阶段以外，还提供了 @babel/standalone 包，可以直接在浏览器内运行。\n\n基于 Babel standalone ，我们就可以实现在浏览器内将 JSX 代码转换成 JS，然后进行执行。\n\n[@babel/standalone 文档](https://babeljs.io/docs/en/babel-standalone)\n\n@babel/standalone 内置了 `react` 的 preset，只需要在 transform 传入 preset: ['react'] 就可以实现将 JSX 转换成 js 的能力了。\n\n搭配 `registerPlugin` 接口，实现一个 babel 插件，来对 AST 进行操作。\n\n## 对于代码片段内使用的第三方依赖要如何获取？\n\njsdelivr 和 unpkg 等开源 CDN 上收录了 npm 和 github 上的资源，并且可以通过拼接 url 的方式，直接获取到。\n\n找到获取依赖脚本的渠道，那么要解决第三方依赖的问题，就需要把这些脚本组织到一起，本质上就是要实现模块管理的机制，目前整个前端生态来看，各种新的旧的、官方和社区维护的模块机制都有，cjs、umd、amd、es module 等等。\n就算是在 NodeJS 里，也没有一个统一的引入方式来引入各种规范的依赖。\n\n### CommonJS 模块\n\nCommonJS 模块是 NodeJS 默认的模块化规范，使用内置的 `require` 函数导入模块，使用 `exports/module.exports` 导出模块， **`require`函数是同步的**，\n如果只是组织本地的模块（AMD就支持，没有必要），其实是可以在浏览器实现的，但是如果需要加载网络资源，同步的 `require` 就不太行了，整个页面都会阻塞。\n\n### ESM 模块\n\n![img.png](../imgs/img.png)\n现在绝大部分的浏览器都原生支持 ESM 模块化，如果只用到 ES Module 的模块，借助标准的 `<script type=\"module\"></script>`就可以实现，并且浏览器内置的 es module 可以直接 import 网络资源。\n\n### umd、amd 模块\n\n[umd(Universal Module Definition)](https://github.com/umdjs/umd) 模块是可以通过 cjs、amd 或者浏览器全局变量等多种方式来组织的，那么我们只需要在 sandbox 里实现 amd 规范，就可以支持 umd 格式的包了。\n\n如果只是需要一个纯粹的 AMD 实现，那么直接用[amdjs](https://github.com/amdjs/amdjs-api)即可，但是我想将 AMD 和 unpkg、jsdelivr 等 cdn 结合到一起，require 本地不存在的依赖时，自动从 cdn 上下载。\n\n自己实现一个 amd 模块，也就是 [@zhongbr/code-sandbox/es/core/amd](https://github.com/zhongbr/zhongbr-blog/tree/main/packages/code-sandbox/src/core/amd)，实现一个插件机制，向插件暴露一些钩子，\n插件通过监听钩子的方式，修改 amd 的导入过程。\n\n## 如何让代码片段和博客网页的环境隔离？\n\n代码片段里的代码，安全和稳定性难以得到保证，如果直接在页面里面运行，轻则污染页面全局环境，重则可能由于代码片段报错导致整个页面都白屏不能交互。\n所以需要将代码片段的代码与页面代码隔离开，可以将代码片段放到一个 `iframe` 里来运行。\n\n如果直接在 `iframe` 里通过 `src` 嵌入页面，需要知道要嵌入页面的地址，如果要封装成组件，这个是很难做到的，除非在使用组件的时候当做参数传入。\n```html\n<iframe src=\"/xxx\"></iframe>\n```\n\n`iframe` 标签是有一个 `srcdoc` 属性的，使用这个属性可以直接传入一段 html，这样就不需要提前知道嵌入页面的地址。\n\n## 其他优化\n\n整个 Sandbox 里，需要使用到 @babel/standalone , 这个包是非常大的，而且执行起来也比较耗时，所以可以考虑将 babel 提出来放到一个单独的 WebWorker 里，避免 worker 加载或者执行时阻塞页面。\n\n页面和 Worker 或者 Frame 通信，都是使用 `postMessage` 的方式来进行的，`postMessage` 使用结构化克隆的方式将消息序列化之后传递到目标进程，使用 `postMessage` 发送消息，是不受到同源策略限制的，\n所以我们可以给运行代码片段的 iframe 开启 sandbox ，只 `allow-script`，不开放其他的权限，和页面之间使用 `postMessage` 来进行通信，这样就可以避免代码片段访问页面内的资源。\n\n由于 iframe 是使用 `srcdoc` 创建的，如果开启 sandbox 但是没有 `allow-same-origin`，那 iframe 的 origin 就是 null，直接 `postMessage` 是会报错的：\n\n```text\nFailed to execute 'postMessage' on 'DOMWindow': The target origin provided ('null') does not match the recipient window's origin\n```\n\n这个时候需要给 `postMessage` 设置一个 `targetOrigin: '*''` 来解决上面的报错。\n\n```javascript\niframe.contentWindow.postMessage({}, {\n    targetOrigin: '*'\n});\n```\n"},"catalogue":{"title":"如何在博客上展示可交互的代码片段?","json-path":"前端开发/2023-01-06-如何在博客里展示可交互的代码片段？.json","mdate":"2023-01-06","cover":"https://i.328888.xyz/2022/12/31/nd3LX.jpeg","icon":"🐮","visible":true,"tags":["前端","React","babel"]}}