{"ast":{"type":"Document","children":[{"type":"Yaml","value":"title: '进程同步和进程互斥'\ntags: ['操作系统','进程']","loc":{"start":{"line":1,"column":0},"end":{"line":4,"column":3}},"range":[0,46],"raw":"---\ntitle: '进程同步和进程互斥'\ntags: ['操作系统','进程']\n---"},{"type":"Header","depth":1,"children":[{"type":"Str","value":"进程同步和进程互斥","loc":{"start":{"line":5,"column":2},"end":{"line":5,"column":11}},"range":[49,58],"raw":"进程同步和进程互斥"}],"loc":{"start":{"line":5,"column":0},"end":{"line":5,"column":11}},"range":[47,58],"raw":"# 进程同步和进程互斥"},{"type":"Header","depth":2,"children":[{"type":"Str","value":"进程同步","loc":{"start":{"line":7,"column":3},"end":{"line":7,"column":7}},"range":[63,67],"raw":"进程同步"}],"loc":{"start":{"line":7,"column":0},"end":{"line":7,"column":7}},"range":[60,67],"raw":"## 进程同步"},{"type":"Paragraph","children":[{"type":"Str","value":"进程具有异步性的特征。各个并发的进程以各自独立、不可预知的速度向前推进。","loc":{"start":{"line":9,"column":0},"end":{"line":9,"column":36}},"range":[69,105],"raw":"进程具有异步性的特征。各个并发的进程以各自独立、不可预知的速度向前推进。"}],"loc":{"start":{"line":9,"column":0},"end":{"line":9,"column":36}},"range":[69,105],"raw":"进程具有异步性的特征。各个并发的进程以各自独立、不可预知的速度向前推进。"},{"type":"Paragraph","children":[{"type":"Str","value":"同步亦称直接制约关系，指为完成某种任务而建立的两个多个进程，这些进程因为需要在某些位置上协调它们的工作次序而产生的制约关系。","loc":{"start":{"line":11,"column":0},"end":{"line":11,"column":62}},"range":[107,169],"raw":"同步亦称直接制约关系，指为完成某种任务而建立的两个多个进程，这些进程因为需要在某些位置上协调它们的工作次序而产生的制约关系。"}],"loc":{"start":{"line":11,"column":0},"end":{"line":11,"column":62}},"range":[107,169],"raw":"同步亦称直接制约关系，指为完成某种任务而建立的两个多个进程，这些进程因为需要在某些位置上协调它们的工作次序而产生的制约关系。"},{"type":"HorizontalRule","loc":{"start":{"line":13,"column":0},"end":{"line":13,"column":5}},"range":[171,176],"raw":"*****"},{"type":"Header","depth":2,"children":[{"type":"Str","value":"进程互斥","loc":{"start":{"line":15,"column":3},"end":{"line":15,"column":7}},"range":[181,185],"raw":"进程互斥"}],"loc":{"start":{"line":15,"column":0},"end":{"line":15,"column":7}},"range":[178,185],"raw":"## 进程互斥"},{"type":"Paragraph","children":[{"type":"Str","value":"进程“并发”需要“共享”的支持。各个并发执行的进程不可避免地需要共享一些系统资源（比如内存、打印机、摄像头类地i/o设备）。","loc":{"start":{"line":17,"column":0},"end":{"line":17,"column":62}},"range":[187,249],"raw":"进程“并发”需要“共享”的支持。各个并发执行的进程不可避免地需要共享一些系统资源（比如内存、打印机、摄像头类地i/o设备）。"}],"loc":{"start":{"line":17,"column":0},"end":{"line":17,"column":62}},"range":[187,249],"raw":"进程“并发”需要“共享”的支持。各个并发执行的进程不可避免地需要共享一些系统资源（比如内存、打印机、摄像头类地i/o设备）。"},{"type":"Paragraph","children":[{"type":"Str","value":"临界资源：在系统中的某些资源可以提供给多个进程使用，但一个时间段内只允许一个进程访问该资源，这些资源被称为临界资源。","loc":{"start":{"line":19,"column":0},"end":{"line":19,"column":58}},"range":[251,309],"raw":"临界资源：在系统中的某些资源可以提供给多个进程使用，但一个时间段内只允许一个进程访问该资源，这些资源被称为临界资源。"}],"loc":{"start":{"line":19,"column":0},"end":{"line":19,"column":58}},"range":[251,309],"raw":"临界资源：在系统中的某些资源可以提供给多个进程使用，但一个时间段内只允许一个进程访问该资源，这些资源被称为临界资源。"},{"type":"Header","depth":3,"children":[{"type":"Str","value":"对临界资源的互斥访问，在逻辑上可以分为四个部分","loc":{"start":{"line":21,"column":4},"end":{"line":21,"column":27}},"range":[315,338],"raw":"对临界资源的互斥访问，在逻辑上可以分为四个部分"}],"loc":{"start":{"line":21,"column":0},"end":{"line":21,"column":27}},"range":[311,338],"raw":"### 对临界资源的互斥访问，在逻辑上可以分为四个部分"},{"type":"List","ordered":true,"start":1,"spread":false,"children":[{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"进入区：检查是否可以进入临界区。如果可以进入，应设置正在访问临界资源的标志（上锁），阻止其他的进程进入该临界区；如果有其他进程正在使用临界区，则需要等待该进程退出临界区之后才能进入临界区（忙则等待）；操作系统需要保证请求访问临界区的进程可以在","loc":{"start":{"line":23,"column":3},"end":{"line":23,"column":124}},"range":[343,464],"raw":"进入区：检查是否可以进入临界区。如果可以进入，应设置正在访问临界资源的标志（上锁），阻止其他的进程进入该临界区；如果有其他进程正在使用临界区，则需要等待该进程退出临界区之后才能进入临界区（忙则等待）；操作系统需要保证请求访问临界区的进程可以在"},{"type":"Strong","children":[{"type":"Str","value":"等待有限时间内进入临界区","loc":{"start":{"line":23,"column":126},"end":{"line":23,"column":138}},"range":[466,478],"raw":"等待有限时间内进入临界区"}],"loc":{"start":{"line":23,"column":124},"end":{"line":23,"column":140}},"range":[464,480],"raw":"**等待有限时间内进入临界区**"},{"type":"Str","value":"（优先等待）；进程在不能进入临界区的时候，应该立即释放处理机，防止进程忙等待（让权等待）。","loc":{"start":{"line":23,"column":140},"end":{"line":23,"column":185}},"range":[480,525],"raw":"（优先等待）；进程在不能进入临界区的时候，应该立即释放处理机，防止进程忙等待（让权等待）。"}],"loc":{"start":{"line":23,"column":3},"end":{"line":23,"column":185}},"range":[343,525],"raw":"进入区：检查是否可以进入临界区。如果可以进入，应设置正在访问临界资源的标志（上锁），阻止其他的进程进入该临界区；如果有其他进程正在使用临界区，则需要等待该进程退出临界区之后才能进入临界区（忙则等待）；操作系统需要保证请求访问临界区的进程可以在**等待有限时间内进入临界区**（优先等待）；进程在不能进入临界区的时候，应该立即释放处理机，防止进程忙等待（让权等待）。"}],"loc":{"start":{"line":23,"column":0},"end":{"line":23,"column":185}},"range":[340,525],"raw":"1. 进入区：检查是否可以进入临界区。如果可以进入，应设置正在访问临界资源的标志（上锁），阻止其他的进程进入该临界区；如果有其他进程正在使用临界区，则需要等待该进程退出临界区之后才能进入临界区（忙则等待）；操作系统需要保证请求访问临界区的进程可以在**等待有限时间内进入临界区**（优先等待）；进程在不能进入临界区的时候，应该立即释放处理机，防止进程忙等待（让权等待）。"},{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"临界区（临界段）：访问临界资源的代码","loc":{"start":{"line":24,"column":3},"end":{"line":24,"column":21}},"range":[529,547],"raw":"临界区（临界段）：访问临界资源的代码"}],"loc":{"start":{"line":24,"column":3},"end":{"line":24,"column":21}},"range":[529,547],"raw":"临界区（临界段）：访问临界资源的代码"}],"loc":{"start":{"line":24,"column":0},"end":{"line":24,"column":21}},"range":[526,547],"raw":"2. 临界区（临界段）：访问临界资源的代码"},{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"退出区：负责解除正在访问临界资源的标志（解锁）","loc":{"start":{"line":25,"column":3},"end":{"line":25,"column":26}},"range":[551,574],"raw":"退出区：负责解除正在访问临界资源的标志（解锁）"}],"loc":{"start":{"line":25,"column":3},"end":{"line":25,"column":26}},"range":[551,574],"raw":"退出区：负责解除正在访问临界资源的标志（解锁）"}],"loc":{"start":{"line":25,"column":0},"end":{"line":25,"column":26}},"range":[548,574],"raw":"3. 退出区：负责解除正在访问临界资源的标志（解锁）"},{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"剩余区：其他处理","loc":{"start":{"line":26,"column":3},"end":{"line":26,"column":11}},"range":[578,586],"raw":"剩余区：其他处理"}],"loc":{"start":{"line":26,"column":3},"end":{"line":26,"column":11}},"range":[578,586],"raw":"剩余区：其他处理"}],"loc":{"start":{"line":26,"column":0},"end":{"line":26,"column":11}},"range":[575,586],"raw":"4. 剩余区：其他处理"}],"loc":{"start":{"line":23,"column":0},"end":{"line":26,"column":11}},"range":[340,586],"raw":"1. 进入区：检查是否可以进入临界区。如果可以进入，应设置正在访问临界资源的标志（上锁），阻止其他的进程进入该临界区；如果有其他进程正在使用临界区，则需要等待该进程退出临界区之后才能进入临界区（忙则等待）；操作系统需要保证请求访问临界区的进程可以在**等待有限时间内进入临界区**（优先等待）；进程在不能进入临界区的时候，应该立即释放处理机，防止进程忙等待（让权等待）。\n2. 临界区（临界段）：访问临界资源的代码\n3. 退出区：负责解除正在访问临界资源的标志（解锁）\n4. 剩余区：其他处理"},{"type":"Header","depth":3,"children":[{"type":"Str","value":"进程互斥的软件实现方法","loc":{"start":{"line":28,"column":4},"end":{"line":28,"column":15}},"range":[592,603],"raw":"进程互斥的软件实现方法"}],"loc":{"start":{"line":28,"column":0},"end":{"line":28,"column":15}},"range":[588,603],"raw":"### 进程互斥的软件实现方法"},{"type":"Header","depth":4,"children":[{"type":"Str","value":"单标志法","loc":{"start":{"line":30,"column":5},"end":{"line":30,"column":9}},"range":[610,614],"raw":"单标志法"}],"loc":{"start":{"line":30,"column":0},"end":{"line":30,"column":9}},"range":[605,614],"raw":"#### 单标志法"},{"type":"Paragraph","children":[{"type":"Str","value":"算法思想：两个进程在访问完临界区之后，把临界区的访问权限转交给另一个进程。每个进程进入临界区的权限只能由另一个进程赋予。","loc":{"start":{"line":32,"column":0},"end":{"line":32,"column":60}},"range":[616,676],"raw":"算法思想：两个进程在访问完临界区之后，把临界区的访问权限转交给另一个进程。每个进程进入临界区的权限只能由另一个进程赋予。"}],"loc":{"start":{"line":32,"column":0},"end":{"line":32,"column":60}},"range":[616,676],"raw":"算法思想：两个进程在访问完临界区之后，把临界区的访问权限转交给另一个进程。每个进程进入临界区的权限只能由另一个进程赋予。"},{"type":"CodeBlock","lang":"c","meta":null,"value":"int turn = 0;\nwhile(turn != Process);\n// 访问临界区的代码\nturn = AnotherProcess; // 将临界区的访问权限交给另一个进程\n// 其他的处理的代码","loc":{"start":{"line":34,"column":0},"end":{"line":40,"column":3}},"range":[678,791],"raw":"```c\nint turn = 0;\nwhile(turn != Process);\n// 访问临界区的代码\nturn = AnotherProcess; // 将临界区的访问权限交给另一个进程\n// 其他的处理的代码\n```"},{"type":"Paragraph","children":[{"type":"Str","value":"缺点：turn表示当前可以进入临界区的进程号，而且只有当前的进程访问了临界区之后，才会修改turn的值。也就述说对于临界区的访问一定是轮流的。如果当前允许访问的进程是P0，但是P0一直不访问临界区，那么虽然此时临界区是空闲的，P1也不能访问。","loc":{"start":{"line":42,"column":0},"end":{"line":42,"column":121}},"range":[793,914],"raw":"缺点：turn表示当前可以进入临界区的进程号，而且只有当前的进程访问了临界区之后，才会修改turn的值。也就述说对于临界区的访问一定是轮流的。如果当前允许访问的进程是P0，但是P0一直不访问临界区，那么虽然此时临界区是空闲的，P1也不能访问。"}],"loc":{"start":{"line":42,"column":0},"end":{"line":42,"column":121}},"range":[793,914],"raw":"缺点：turn表示当前可以进入临界区的进程号，而且只有当前的进程访问了临界区之后，才会修改turn的值。也就述说对于临界区的访问一定是轮流的。如果当前允许访问的进程是P0，但是P0一直不访问临界区，那么虽然此时临界区是空闲的，P1也不能访问。"},{"type":"Header","depth":4,"children":[{"type":"Str","value":"双标志法","loc":{"start":{"line":44,"column":5},"end":{"line":44,"column":9}},"range":[921,925],"raw":"双标志法"}],"loc":{"start":{"line":44,"column":0},"end":{"line":44,"column":9}},"range":[916,925],"raw":"#### 双标志法"},{"type":"Paragraph","children":[{"type":"Str","value":"算法思想：设置一个布尔型数组flag[]，数组中各个元素用来标记各个进程的意愿。每个进程在进入临界区之前，把自身对应的标志位flag[i]置为true，然后开始访问临界区。","loc":{"start":{"line":46,"column":0},"end":{"line":46,"column":86}},"range":[927,1013],"raw":"算法思想：设置一个布尔型数组flag[]，数组中各个元素用来标记各个进程的意愿。每个进程在进入临界区之前，把自身对应的标志位flag[i]置为true，然后开始访问临界区。"}],"loc":{"start":{"line":46,"column":0},"end":{"line":46,"column":86}},"range":[927,1013],"raw":"算法思想：设置一个布尔型数组flag[]，数组中各个元素用来标记各个进程的意愿。每个进程在进入临界区之前，把自身对应的标志位flag[i]置为true，然后开始访问临界区。"},{"type":"CodeBlock","lang":"c","meta":null,"value":"int flags[2];\nflag[0] = false;\nflag[1] = false;\n// P0进程:\nwhile(flag[1]);\n// 如果这里放生了进程的切换，可能导致多个进程同时访问临界区\nflag[0] = true;\n// 访问临界区的代码\nflag[0] = false;\n// 其他处理的代码","loc":{"start":{"line":48,"column":0},"end":{"line":59,"column":3}},"range":[1015,1184],"raw":"```c\nint flags[2];\nflag[0] = false;\nflag[1] = false;\n// P0进程:\nwhile(flag[1]);\n// 如果这里放生了进程的切换，可能导致多个进程同时访问临界区\nflag[0] = true;\n// 访问临界区的代码\nflag[0] = false;\n// 其他处理的代码\n```"},{"type":"Paragraph","children":[{"type":"Str","value":"缺点：由于进程之间的执行存在异步性，可能导致多个进程都会跳过等待的while循环，同时访问临界区。违背了临界区的“","loc":{"start":{"line":61,"column":0},"end":{"line":61,"column":57}},"range":[1186,1243],"raw":"缺点：由于进程之间的执行存在异步性，可能导致多个进程都会跳过等待的while循环，同时访问临界区。违背了临界区的“"},{"type":"Strong","children":[{"type":"Str","value":"忙则等待","loc":{"start":{"line":61,"column":59},"end":{"line":61,"column":63}},"range":[1245,1249],"raw":"忙则等待"}],"loc":{"start":{"line":61,"column":57},"end":{"line":61,"column":65}},"range":[1243,1251],"raw":"**忙则等待**"},{"type":"Str","value":"”原则。","loc":{"start":{"line":61,"column":65},"end":{"line":61,"column":69}},"range":[1251,1255],"raw":"”原则。"}],"loc":{"start":{"line":61,"column":0},"end":{"line":61,"column":69}},"range":[1186,1255],"raw":"缺点：由于进程之间的执行存在异步性，可能导致多个进程都会跳过等待的while循环，同时访问临界区。违背了临界区的“**忙则等待**”原则。"},{"type":"Header","depth":4,"children":[{"type":"Str","value":"双标志后检查","loc":{"start":{"line":63,"column":5},"end":{"line":63,"column":11}},"range":[1262,1268],"raw":"双标志后检查"}],"loc":{"start":{"line":63,"column":0},"end":{"line":63,"column":11}},"range":[1257,1268],"raw":"#### 双标志后检查"},{"type":"Paragraph","children":[{"type":"Str","value":"算法思想：是双标志法的优化版。解决了双标志法的检查和上锁操作可能不能一气呵成导致多个进程同时进入临界区的问题。所以人们想到了","loc":{"start":{"line":65,"column":0},"end":{"line":65,"column":62}},"range":[1270,1332],"raw":"算法思想：是双标志法的优化版。解决了双标志法的检查和上锁操作可能不能一气呵成导致多个进程同时进入临界区的问题。所以人们想到了"},{"type":"Strong","children":[{"type":"Str","value":"先上锁后检查","loc":{"start":{"line":65,"column":64},"end":{"line":65,"column":70}},"range":[1334,1340],"raw":"先上锁后检查"}],"loc":{"start":{"line":65,"column":62},"end":{"line":65,"column":72}},"range":[1332,1342],"raw":"**先上锁后检查**"},{"type":"Str","value":"的方法。","loc":{"start":{"line":65,"column":72},"end":{"line":65,"column":76}},"range":[1342,1346],"raw":"的方法。"}],"loc":{"start":{"line":65,"column":0},"end":{"line":65,"column":76}},"range":[1270,1346],"raw":"算法思想：是双标志法的优化版。解决了双标志法的检查和上锁操作可能不能一气呵成导致多个进程同时进入临界区的问题。所以人们想到了**先上锁后检查**的方法。"},{"type":"CodeBlock","lang":"c","meta":null,"value":"int flags[2];\nflag[0] = false;\nflag[1] = false;\n// P0进程:\nflag[0] = true; //如果在这里发生了进程切换，切换到P1，会导致两个进程都卡在下面的while循环中\nwhile(flag[1]); \n// 访问临界区的代码 \nflag[0] = false;\n// 其他处理的代码","loc":{"start":{"line":67,"column":0},"end":{"line":77,"column":3}},"range":[1348,1530],"raw":"```c\nint flags[2];\nflag[0] = false;\nflag[1] = false;\n// P0进程:\nflag[0] = true; //如果在这里发生了进程切换，切换到P1，会导致两个进程都卡在下面的while循环中\nwhile(flag[1]); \n// 访问临界区的代码 \nflag[0] = false;\n// 其他处理的代码\n```"},{"type":"Paragraph","children":[{"type":"Str","value":"缺点：双标志后检查法虽然解决了“忙则等待”问题，但是又违背了“空闲让进”和“有限等待”的原则，会因为进程长期无法访问临界资源产生饥饿的现象。","loc":{"start":{"line":79,"column":0},"end":{"line":79,"column":70}},"range":[1532,1602],"raw":"缺点：双标志后检查法虽然解决了“忙则等待”问题，但是又违背了“空闲让进”和“有限等待”的原则，会因为进程长期无法访问临界资源产生饥饿的现象。"}],"loc":{"start":{"line":79,"column":0},"end":{"line":79,"column":70}},"range":[1532,1602],"raw":"缺点：双标志后检查法虽然解决了“忙则等待”问题，但是又违背了“空闲让进”和“有限等待”的原则，会因为进程长期无法访问临界资源产生饥饿的现象。"},{"type":"Header","depth":4,"children":[{"type":"Str","value":"Peterson方法","loc":{"start":{"line":81,"column":5},"end":{"line":81,"column":15}},"range":[1609,1619],"raw":"Peterson方法"}],"loc":{"start":{"line":81,"column":0},"end":{"line":81,"column":15}},"range":[1604,1619],"raw":"#### Peterson方法"},{"type":"Paragraph","children":[{"type":"Str","value":"算法思想：在双标志后检查法中，可能产生因为两个进程都想进入临界区而导致都无法进入的情况。如果两个进程都想进入临界区可以尝试主动让对方先进入临界区。","loc":{"start":{"line":83,"column":0},"end":{"line":83,"column":73}},"range":[1621,1694],"raw":"算法思想：在双标志后检查法中，可能产生因为两个进程都想进入临界区而导致都无法进入的情况。如果两个进程都想进入临界区可以尝试主动让对方先进入临界区。"}],"loc":{"start":{"line":83,"column":0},"end":{"line":83,"column":73}},"range":[1621,1694],"raw":"算法思想：在双标志后检查法中，可能产生因为两个进程都想进入临界区而导致都无法进入的情况。如果两个进程都想进入临界区可以尝试主动让对方先进入临界区。"},{"type":"CodeBlock","lang":"c","meta":null,"value":"int flags[2]; // 表明各个进程想进入临界区的意愿\nint turn = 0;\nflag[0] = false;\nflag[1] = false;\n// P0进程:\nflag[0] = true; //如果在这里发生了进程切换，切换到P1，会导致两个进程都卡在下面的while循环中\nturn = 1; // 主动让对方使用临界资源\nwhile(flag[1] && turn == 1); \n// 访问临界区的代码 \nflag[0] = false;\n// 其他处理的代码","loc":{"start":{"line":85,"column":0},"end":{"line":97,"column":3}},"range":[1696,1949],"raw":"```c\nint flags[2]; // 表明各个进程想进入临界区的意愿\nint turn = 0;\nflag[0] = false;\nflag[1] = false;\n// P0进程:\nflag[0] = true; //如果在这里发生了进程切换，切换到P1，会导致两个进程都卡在下面的while循环中\nturn = 1; // 主动让对方使用临界资源\nwhile(flag[1] && turn == 1); \n// 访问临界区的代码 \nflag[0] = false;\n// 其他处理的代码\n```"},{"type":"Paragraph","children":[{"type":"Str","value":"优点：解决了进程互斥的问题，遵循了“空闲让进”、“忙则等待”、“有限等待”三个原则，但是没有满足“让权等待”","loc":{"start":{"line":99,"column":0},"end":{"line":99,"column":54}},"range":[1951,2005],"raw":"优点：解决了进程互斥的问题，遵循了“空闲让进”、“忙则等待”、“有限等待”三个原则，但是没有满足“让权等待”"}],"loc":{"start":{"line":99,"column":0},"end":{"line":99,"column":54}},"range":[1951,2005],"raw":"优点：解决了进程互斥的问题，遵循了“空闲让进”、“忙则等待”、“有限等待”三个原则，但是没有满足“让权等待”"},{"type":"HorizontalRule","loc":{"start":{"line":101,"column":0},"end":{"line":101,"column":5}},"range":[2007,2012],"raw":"*****"},{"type":"Header","depth":3,"children":[{"type":"Str","value":"进程同步的硬件实现方法","loc":{"start":{"line":103,"column":4},"end":{"line":103,"column":15}},"range":[2018,2029],"raw":"进程同步的硬件实现方法"}],"loc":{"start":{"line":103,"column":0},"end":{"line":103,"column":15}},"range":[2014,2029],"raw":"### 进程同步的硬件实现方法"},{"type":"Header","depth":4,"children":[{"type":"Str","value":"中断屏蔽方法","loc":{"start":{"line":105,"column":5},"end":{"line":105,"column":11}},"range":[2036,2042],"raw":"中断屏蔽方法"}],"loc":{"start":{"line":105,"column":0},"end":{"line":105,"column":11}},"range":[2031,2042],"raw":"#### 中断屏蔽方法"},{"type":"Paragraph","children":[{"type":"Str","value":"利用“开/关中断指令”实现（与原语的实现思想相同，即在某进程开始访问临界区到结束访问为止，都不允许被中断，所以不会发生进程的切换，也不可能发生两个进程同时访问临界区的情况）。","loc":{"start":{"line":107,"column":0},"end":{"line":107,"column":87}},"range":[2044,2131],"raw":"利用“开/关中断指令”实现（与原语的实现思想相同，即在某进程开始访问临界区到结束访问为止，都不允许被中断，所以不会发生进程的切换，也不可能发生两个进程同时访问临界区的情况）。"}],"loc":{"start":{"line":107,"column":0},"end":{"line":107,"column":87}},"range":[2044,2131],"raw":"利用“开/关中断指令”实现（与原语的实现思想相同，即在某进程开始访问临界区到结束访问为止，都不允许被中断，所以不会发生进程的切换，也不可能发生两个进程同时访问临界区的情况）。"},{"type":"Paragraph","children":[{"type":"Str","value":"优点：简单、高效","loc":{"start":{"line":109,"column":0},"end":{"line":109,"column":8}},"range":[2133,2141],"raw":"优点：简单、高效"}],"loc":{"start":{"line":109,"column":0},"end":{"line":109,"column":8}},"range":[2133,2141],"raw":"优点：简单、高效"},{"type":"Paragraph","children":[{"type":"Str","value":"缺点：不适用于多处理机，只适用于操作系统内核，不适用于用户进程（","loc":{"start":{"line":111,"column":0},"end":{"line":111,"column":32}},"range":[2143,2175],"raw":"缺点：不适用于多处理机，只适用于操作系统内核，不适用于用户进程（"},{"type":"Strong","children":[{"type":"Str","value":"开关中断的指令只能在核心态下运行","loc":{"start":{"line":111,"column":34},"end":{"line":111,"column":50}},"range":[2177,2193],"raw":"开关中断的指令只能在核心态下运行"}],"loc":{"start":{"line":111,"column":32},"end":{"line":111,"column":52}},"range":[2175,2195],"raw":"**开关中断的指令只能在核心态下运行**"},{"type":"Str","value":"）。","loc":{"start":{"line":111,"column":52},"end":{"line":111,"column":54}},"range":[2195,2197],"raw":"）。"}],"loc":{"start":{"line":111,"column":0},"end":{"line":111,"column":54}},"range":[2143,2197],"raw":"缺点：不适用于多处理机，只适用于操作系统内核，不适用于用户进程（**开关中断的指令只能在核心态下运行**）。"},{"type":"Header","depth":4,"children":[{"type":"Str","value":"TestAndSet指令","loc":{"start":{"line":113,"column":5},"end":{"line":113,"column":17}},"range":[2204,2216],"raw":"TestAndSet指令"}],"loc":{"start":{"line":113,"column":0},"end":{"line":113,"column":17}},"range":[2199,2216],"raw":"#### TestAndSet指令"},{"type":"Paragraph","children":[{"type":"Str","value":"简称TS指令，也称为TestAndSetLock指令，或TSL指令。该指令是用硬件实现的，执行过程不允许被总段，只能一气呵成。","loc":{"start":{"line":115,"column":0},"end":{"line":115,"column":63}},"range":[2218,2281],"raw":"简称TS指令，也称为TestAndSetLock指令，或TSL指令。该指令是用硬件实现的，执行过程不允许被总段，只能一气呵成。"}],"loc":{"start":{"line":115,"column":0},"end":{"line":115,"column":63}},"range":[2218,2281],"raw":"简称TS指令，也称为TestAndSetLock指令，或TSL指令。该指令是用硬件实现的，执行过程不允许被总段，只能一气呵成。"},{"type":"CodeBlock","lang":"c","meta":null,"value":"// lock表示当前临界区是否被加锁\n// true表示枷锁 false表示未加锁\n// 真实情况下，下面的这个TestAndSet函数是用硬件实现的，不会被中断，是一气呵成的\nbool TestAndSet(bool *lock){\n    bool old = *lock;\n    *lock = true; // 无论之前是否加锁，都将锁设为true\n    return old; // 返回原来锁的状态\n}\n\nint main(){\n    // 使用TS实现互斥的算法逻辑\n\twhile(TestAndSet(&lock));\n    // 访问临界区的代码\n    lock = false; // 解锁\n    // 剩余的其他代码\n}","loc":{"start":{"line":117,"column":0},"end":{"line":134,"column":3}},"range":[2283,2620],"raw":"```c\n// lock表示当前临界区是否被加锁\n// true表示枷锁 false表示未加锁\n// 真实情况下，下面的这个TestAndSet函数是用硬件实现的，不会被中断，是一气呵成的\nbool TestAndSet(bool *lock){\n    bool old = *lock;\n    *lock = true; // 无论之前是否加锁，都将锁设为true\n    return old; // 返回原来锁的状态\n}\n\nint main(){\n    // 使用TS实现互斥的算法逻辑\n\twhile(TestAndSet(&lock));\n    // 访问临界区的代码\n    lock = false; // 解锁\n    // 剩余的其他代码\n}\n```"},{"type":"Paragraph","children":[{"type":"Str","value":"硬件实现的TSL操作是","loc":{"start":{"line":136,"column":0},"end":{"line":136,"column":11}},"range":[2622,2633],"raw":"硬件实现的TSL操作是"},{"type":"Strong","children":[{"type":"Str","value":"原子性","loc":{"start":{"line":136,"column":13},"end":{"line":136,"column":16}},"range":[2635,2638],"raw":"原子性"}],"loc":{"start":{"line":136,"column":11},"end":{"line":136,"column":18}},"range":[2633,2640],"raw":"**原子性**"},{"type":"Str","value":"的","loc":{"start":{"line":136,"column":18},"end":{"line":136,"column":19}},"range":[2640,2641],"raw":"的"}],"loc":{"start":{"line":136,"column":0},"end":{"line":136,"column":19}},"range":[2622,2641],"raw":"硬件实现的TSL操作是**原子性**的"},{"type":"Paragraph","children":[{"type":"Str","value":"优点：实现简单，不需要像软件实现方法那样检查是否会有逻辑漏洞","loc":{"start":{"line":138,"column":0},"end":{"line":138,"column":30}},"range":[2643,2673],"raw":"优点：实现简单，不需要像软件实现方法那样检查是否会有逻辑漏洞"}],"loc":{"start":{"line":138,"column":0},"end":{"line":138,"column":30}},"range":[2643,2673],"raw":"优点：实现简单，不需要像软件实现方法那样检查是否会有逻辑漏洞"},{"type":"Paragraph","children":[{"type":"Str","value":"缺点：即使无法进入临界区，也会一直占用CPU执行while循环，不满足“让权等待”原则","loc":{"start":{"line":140,"column":0},"end":{"line":140,"column":43}},"range":[2675,2718],"raw":"缺点：即使无法进入临界区，也会一直占用CPU执行while循环，不满足“让权等待”原则"}],"loc":{"start":{"line":140,"column":0},"end":{"line":140,"column":43}},"range":[2675,2718],"raw":"缺点：即使无法进入临界区，也会一直占用CPU执行while循环，不满足“让权等待”原则"},{"type":"Header","depth":4,"children":[{"type":"Str","value":"SWAP指令","loc":{"start":{"line":144,"column":5},"end":{"line":144,"column":11}},"range":[2727,2733],"raw":"SWAP指令"}],"loc":{"start":{"line":144,"column":0},"end":{"line":144,"column":11}},"range":[2722,2733],"raw":"#### SWAP指令"},{"type":"Paragraph","children":[{"type":"Str","value":"也称为Exchage指令或者简称XGHG指令，是靠硬件实现的，执行过程不允许被中断，只能一气呵成，其逻辑使用C描述如下：","loc":{"start":{"line":146,"column":0},"end":{"line":146,"column":60}},"range":[2735,2795],"raw":"也称为Exchage指令或者简称XGHG指令，是靠硬件实现的，执行过程不允许被中断，只能一气呵成，其逻辑使用C描述如下："}],"loc":{"start":{"line":146,"column":0},"end":{"line":146,"column":60}},"range":[2735,2795],"raw":"也称为Exchage指令或者简称XGHG指令，是靠硬件实现的，执行过程不允许被中断，只能一气呵成，其逻辑使用C描述如下："},{"type":"CodeBlock","lang":"c","meta":null,"value":"// 交换两个变量的值\nvoid Swap(bool *a, bool *b){\n    bool temp;\n    temp = *a;\n    *a = *b;\n    *b = temp;\n}\n// 使用Swap指令的算法逻辑\nint main(){\n    //lock表示临界区是否加锁\n    bool old = true;\n    while(old) Swap(&lock, &old);\n    //临界区代码\n    lock = false;\n\t//剩余代码\n}","loc":{"start":{"line":148,"column":0},"end":{"line":165,"column":3}},"range":[2797,3050],"raw":"```c\n// 交换两个变量的值\nvoid Swap(bool *a, bool *b){\n    bool temp;\n    temp = *a;\n    *a = *b;\n    *b = temp;\n}\n// 使用Swap指令的算法逻辑\nint main(){\n    //lock表示临界区是否加锁\n    bool old = true;\n    while(old) Swap(&lock, &old);\n    //临界区代码\n    lock = false;\n\t//剩余代码\n}\n```"},{"type":"Paragraph","children":[{"type":"Str","value":"逻辑上于TSL指令是一样的，所以优点和缺点也是相同的。","loc":{"start":{"line":167,"column":0},"end":{"line":167,"column":27}},"range":[3052,3079],"raw":"逻辑上于TSL指令是一样的，所以优点和缺点也是相同的。"}],"loc":{"start":{"line":167,"column":0},"end":{"line":167,"column":27}},"range":[3052,3079],"raw":"逻辑上于TSL指令是一样的，所以优点和缺点也是相同的。"}],"loc":{"start":{"line":1,"column":0},"end":{"line":167,"column":27}},"range":[0,3079],"raw":"---\ntitle: '进程同步和进程互斥'\ntags: ['操作系统','进程']\n---\n# 进程同步和进程互斥\n\n## 进程同步\n\n进程具有异步性的特征。各个并发的进程以各自独立、不可预知的速度向前推进。\n\n同步亦称直接制约关系，指为完成某种任务而建立的两个多个进程，这些进程因为需要在某些位置上协调它们的工作次序而产生的制约关系。\n\n*****\n\n## 进程互斥\n\n进程“并发”需要“共享”的支持。各个并发执行的进程不可避免地需要共享一些系统资源（比如内存、打印机、摄像头类地i/o设备）。\n\n临界资源：在系统中的某些资源可以提供给多个进程使用，但一个时间段内只允许一个进程访问该资源，这些资源被称为临界资源。\n\n### 对临界资源的互斥访问，在逻辑上可以分为四个部分\n\n1. 进入区：检查是否可以进入临界区。如果可以进入，应设置正在访问临界资源的标志（上锁），阻止其他的进程进入该临界区；如果有其他进程正在使用临界区，则需要等待该进程退出临界区之后才能进入临界区（忙则等待）；操作系统需要保证请求访问临界区的进程可以在**等待有限时间内进入临界区**（优先等待）；进程在不能进入临界区的时候，应该立即释放处理机，防止进程忙等待（让权等待）。\n2. 临界区（临界段）：访问临界资源的代码\n3. 退出区：负责解除正在访问临界资源的标志（解锁）\n4. 剩余区：其他处理\n\n### 进程互斥的软件实现方法\n\n#### 单标志法\n\n算法思想：两个进程在访问完临界区之后，把临界区的访问权限转交给另一个进程。每个进程进入临界区的权限只能由另一个进程赋予。\n\n```c\nint turn = 0;\nwhile(turn != Process);\n// 访问临界区的代码\nturn = AnotherProcess; // 将临界区的访问权限交给另一个进程\n// 其他的处理的代码\n```\n\n缺点：turn表示当前可以进入临界区的进程号，而且只有当前的进程访问了临界区之后，才会修改turn的值。也就述说对于临界区的访问一定是轮流的。如果当前允许访问的进程是P0，但是P0一直不访问临界区，那么虽然此时临界区是空闲的，P1也不能访问。\n\n#### 双标志法\n\n算法思想：设置一个布尔型数组flag[]，数组中各个元素用来标记各个进程的意愿。每个进程在进入临界区之前，把自身对应的标志位flag[i]置为true，然后开始访问临界区。\n\n```c\nint flags[2];\nflag[0] = false;\nflag[1] = false;\n// P0进程:\nwhile(flag[1]);\n// 如果这里放生了进程的切换，可能导致多个进程同时访问临界区\nflag[0] = true;\n// 访问临界区的代码\nflag[0] = false;\n// 其他处理的代码\n```\n\n缺点：由于进程之间的执行存在异步性，可能导致多个进程都会跳过等待的while循环，同时访问临界区。违背了临界区的“**忙则等待**”原则。\n\n#### 双标志后检查\n\n算法思想：是双标志法的优化版。解决了双标志法的检查和上锁操作可能不能一气呵成导致多个进程同时进入临界区的问题。所以人们想到了**先上锁后检查**的方法。\n\n```c\nint flags[2];\nflag[0] = false;\nflag[1] = false;\n// P0进程:\nflag[0] = true; //如果在这里发生了进程切换，切换到P1，会导致两个进程都卡在下面的while循环中\nwhile(flag[1]); \n// 访问临界区的代码 \nflag[0] = false;\n// 其他处理的代码\n```\n\n缺点：双标志后检查法虽然解决了“忙则等待”问题，但是又违背了“空闲让进”和“有限等待”的原则，会因为进程长期无法访问临界资源产生饥饿的现象。\n\n#### Peterson方法\n\n算法思想：在双标志后检查法中，可能产生因为两个进程都想进入临界区而导致都无法进入的情况。如果两个进程都想进入临界区可以尝试主动让对方先进入临界区。\n\n```c\nint flags[2]; // 表明各个进程想进入临界区的意愿\nint turn = 0;\nflag[0] = false;\nflag[1] = false;\n// P0进程:\nflag[0] = true; //如果在这里发生了进程切换，切换到P1，会导致两个进程都卡在下面的while循环中\nturn = 1; // 主动让对方使用临界资源\nwhile(flag[1] && turn == 1); \n// 访问临界区的代码 \nflag[0] = false;\n// 其他处理的代码\n```\n\n优点：解决了进程互斥的问题，遵循了“空闲让进”、“忙则等待”、“有限等待”三个原则，但是没有满足“让权等待”\n\n*****\n\n### 进程同步的硬件实现方法\n\n#### 中断屏蔽方法\n\n利用“开/关中断指令”实现（与原语的实现思想相同，即在某进程开始访问临界区到结束访问为止，都不允许被中断，所以不会发生进程的切换，也不可能发生两个进程同时访问临界区的情况）。\n\n优点：简单、高效\n\n缺点：不适用于多处理机，只适用于操作系统内核，不适用于用户进程（**开关中断的指令只能在核心态下运行**）。\n\n#### TestAndSet指令\n\n简称TS指令，也称为TestAndSetLock指令，或TSL指令。该指令是用硬件实现的，执行过程不允许被总段，只能一气呵成。\n\n```c\n// lock表示当前临界区是否被加锁\n// true表示枷锁 false表示未加锁\n// 真实情况下，下面的这个TestAndSet函数是用硬件实现的，不会被中断，是一气呵成的\nbool TestAndSet(bool *lock){\n    bool old = *lock;\n    *lock = true; // 无论之前是否加锁，都将锁设为true\n    return old; // 返回原来锁的状态\n}\n\nint main(){\n    // 使用TS实现互斥的算法逻辑\n\twhile(TestAndSet(&lock));\n    // 访问临界区的代码\n    lock = false; // 解锁\n    // 剩余的其他代码\n}\n```\n\n硬件实现的TSL操作是**原子性**的\n\n优点：实现简单，不需要像软件实现方法那样检查是否会有逻辑漏洞\n\n缺点：即使无法进入临界区，也会一直占用CPU执行while循环，不满足“让权等待”原则\n\n\n\n#### SWAP指令\n\n也称为Exchage指令或者简称XGHG指令，是靠硬件实现的，执行过程不允许被中断，只能一气呵成，其逻辑使用C描述如下：\n\n```c\n// 交换两个变量的值\nvoid Swap(bool *a, bool *b){\n    bool temp;\n    temp = *a;\n    *a = *b;\n    *b = temp;\n}\n// 使用Swap指令的算法逻辑\nint main(){\n    //lock表示临界区是否加锁\n    bool old = true;\n    while(old) Swap(&lock, &old);\n    //临界区代码\n    lock = false;\n\t//剩余代码\n}\n```\n\n逻辑上于TSL指令是一样的，所以优点和缺点也是相同的。"},"catalogue":{"title":"进程同步和进程互斥","json-path":"2020-08-14-进程同步.json","mdate":"2022-08-30T14:19:31.454Z","tags":["操作系统","进程"]}}