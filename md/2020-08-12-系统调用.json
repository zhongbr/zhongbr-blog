{"ast":{"type":"Document","children":[{"type":"Yaml","value":"title: '系统调用'\ntags: ['操作系统']","loc":{"start":{"line":1,"column":0},"end":{"line":4,"column":3}},"range":[0,36],"raw":"---\ntitle: '系统调用'\ntags: ['操作系统']\n---"},{"type":"Header","depth":1,"children":[{"type":"Str","value":"系统调用","loc":{"start":{"line":5,"column":2},"end":{"line":5,"column":6}},"range":[39,43],"raw":"系统调用"}],"loc":{"start":{"line":5,"column":0},"end":{"line":5,"column":6}},"range":[37,43],"raw":"# 系统调用"},{"type":"Paragraph","children":[{"type":"Str","value":"操作系统是计算机硬件和用户之间的接口，需要向上提供一些简易的服务。主要包括命令接口和程序接口。程序接口由一组","loc":{"start":{"line":7,"column":0},"end":{"line":7,"column":54}},"range":[45,99],"raw":"操作系统是计算机硬件和用户之间的接口，需要向上提供一些简易的服务。主要包括命令接口和程序接口。程序接口由一组"},{"type":"Strong","children":[{"type":"Str","value":"系统调用","loc":{"start":{"line":7,"column":56},"end":{"line":7,"column":60}},"range":[101,105],"raw":"系统调用"}],"loc":{"start":{"line":7,"column":54},"end":{"line":7,"column":62}},"range":[99,107],"raw":"**系统调用**"},{"type":"Str","value":"组成。","loc":{"start":{"line":7,"column":62},"end":{"line":7,"column":65}},"range":[107,110],"raw":"组成。"}],"loc":{"start":{"line":7,"column":0},"end":{"line":7,"column":65}},"range":[45,110],"raw":"操作系统是计算机硬件和用户之间的接口，需要向上提供一些简易的服务。主要包括命令接口和程序接口。程序接口由一组**系统调用**组成。"},{"type":"Paragraph","children":[{"type":"Str","value":"系统调用：操作系统提供给应用程序（编程人员）使用的接口，可以理解为共应用程序调用的特殊函数，应用程序可以发出系统调用请求来获得操作系统的服务。","loc":{"start":{"line":9,"column":0},"end":{"line":9,"column":71}},"range":[112,183],"raw":"系统调用：操作系统提供给应用程序（编程人员）使用的接口，可以理解为共应用程序调用的特殊函数，应用程序可以发出系统调用请求来获得操作系统的服务。"}],"loc":{"start":{"line":9,"column":0},"end":{"line":9,"column":71}},"range":[112,183],"raw":"系统调用：操作系统提供给应用程序（编程人员）使用的接口，可以理解为共应用程序调用的特殊函数，应用程序可以发出系统调用请求来获得操作系统的服务。"},{"type":"Paragraph","children":[{"type":"Str","value":"采用系统调用可以让操作系统更加方便地管理系统资源，保证操作系统的稳定性和安全性，防止用户非法操作。","loc":{"start":{"line":11,"column":0},"end":{"line":11,"column":49}},"range":[185,234],"raw":"采用系统调用可以让操作系统更加方便地管理系统资源，保证操作系统的稳定性和安全性，防止用户非法操作。"}],"loc":{"start":{"line":11,"column":0},"end":{"line":11,"column":49}},"range":[185,234],"raw":"采用系统调用可以让操作系统更加方便地管理系统资源，保证操作系统的稳定性和安全性，防止用户非法操作。"},{"type":"Header","depth":2,"children":[{"type":"Str","value":"按功能分类的系统调用","loc":{"start":{"line":13,"column":3},"end":{"line":13,"column":13}},"range":[239,249],"raw":"按功能分类的系统调用"}],"loc":{"start":{"line":13,"column":0},"end":{"line":13,"column":13}},"range":[236,249],"raw":"## 按功能分类的系统调用"},{"type":"Paragraph","children":[{"type":"Str","value":"凡是与资源有关的操作，会直接影响到其他进程的操作，一定需要操作系统的介入，即需要通过系统调用来实现。","loc":{"start":{"line":15,"column":0},"end":{"line":15,"column":50}},"range":[251,301],"raw":"凡是与资源有关的操作，会直接影响到其他进程的操作，一定需要操作系统的介入，即需要通过系统调用来实现。"}],"loc":{"start":{"line":15,"column":0},"end":{"line":15,"column":50}},"range":[251,301],"raw":"凡是与资源有关的操作，会直接影响到其他进程的操作，一定需要操作系统的介入，即需要通过系统调用来实现。"},{"type":"List","ordered":false,"start":null,"spread":false,"children":[{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"设备管理","loc":{"start":{"line":17,"column":2},"end":{"line":17,"column":6}},"range":[305,309],"raw":"设备管理"}],"loc":{"start":{"line":17,"column":2},"end":{"line":17,"column":6}},"range":[305,309],"raw":"设备管理"}],"loc":{"start":{"line":17,"column":0},"end":{"line":17,"column":6}},"range":[303,309],"raw":"- 设备管理"},{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"文件管理","loc":{"start":{"line":18,"column":2},"end":{"line":18,"column":6}},"range":[312,316],"raw":"文件管理"}],"loc":{"start":{"line":18,"column":2},"end":{"line":18,"column":6}},"range":[312,316],"raw":"文件管理"}],"loc":{"start":{"line":18,"column":0},"end":{"line":18,"column":6}},"range":[310,316],"raw":"- 文件管理"},{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"进程控制","loc":{"start":{"line":19,"column":2},"end":{"line":19,"column":6}},"range":[319,323],"raw":"进程控制"}],"loc":{"start":{"line":19,"column":2},"end":{"line":19,"column":6}},"range":[319,323],"raw":"进程控制"}],"loc":{"start":{"line":19,"column":0},"end":{"line":19,"column":6}},"range":[317,323],"raw":"- 进程控制"},{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"进程通信","loc":{"start":{"line":20,"column":2},"end":{"line":20,"column":6}},"range":[326,330],"raw":"进程通信"}],"loc":{"start":{"line":20,"column":2},"end":{"line":20,"column":6}},"range":[326,330],"raw":"进程通信"}],"loc":{"start":{"line":20,"column":0},"end":{"line":20,"column":6}},"range":[324,330],"raw":"- 进程通信"},{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"内存管理","loc":{"start":{"line":21,"column":2},"end":{"line":21,"column":6}},"range":[333,337],"raw":"内存管理"}],"loc":{"start":{"line":21,"column":2},"end":{"line":21,"column":6}},"range":[333,337],"raw":"内存管理"}],"loc":{"start":{"line":21,"column":0},"end":{"line":21,"column":6}},"range":[331,337],"raw":"- 内存管理"}],"loc":{"start":{"line":17,"column":0},"end":{"line":21,"column":6}},"range":[303,337],"raw":"- 设备管理\n- 文件管理\n- 进程控制\n- 进程通信\n- 内存管理"},{"type":"Header","depth":2,"children":[{"type":"Str","value":"系统调用和库函数的区别","loc":{"start":{"line":23,"column":3},"end":{"line":23,"column":14}},"range":[342,353],"raw":"系统调用和库函数的区别"}],"loc":{"start":{"line":23,"column":0},"end":{"line":23,"column":14}},"range":[339,353],"raw":"## 系统调用和库函数的区别"},{"type":"Paragraph","children":[{"type":"Str","value":"有些涉及特权指令操作的库函数是对操作系统提供的系统调用的封装，隐藏系统调用的一些不必要的细节。普通的库函数不需要使用系统调用，在用户态下就可以完成。","loc":{"start":{"line":25,"column":0},"end":{"line":25,"column":74}},"range":[355,429],"raw":"有些涉及特权指令操作的库函数是对操作系统提供的系统调用的封装，隐藏系统调用的一些不必要的细节。普通的库函数不需要使用系统调用，在用户态下就可以完成。"}],"loc":{"start":{"line":25,"column":0},"end":{"line":25,"column":74}},"range":[355,429],"raw":"有些涉及特权指令操作的库函数是对操作系统提供的系统调用的封装，隐藏系统调用的一些不必要的细节。普通的库函数不需要使用系统调用，在用户态下就可以完成。"},{"type":"Header","depth":2,"children":[{"type":"Str","value":"系统调用的过程","loc":{"start":{"line":27,"column":3},"end":{"line":27,"column":10}},"range":[434,441],"raw":"系统调用的过程"}],"loc":{"start":{"line":27,"column":0},"end":{"line":27,"column":10}},"range":[431,441],"raw":"## 系统调用的过程"},{"type":"Paragraph","children":[{"type":"Str","value":"传递系统调用参数 -> 执行陷入指令（用户态） -> 执行系统调用相应服务程序（核心态）-> 返回用户程序","loc":{"start":{"line":29,"column":0},"end":{"line":29,"column":53}},"range":[443,496],"raw":"传递系统调用参数 -> 执行陷入指令（用户态） -> 执行系统调用相应服务程序（核心态）-> 返回用户程序"}],"loc":{"start":{"line":29,"column":0},"end":{"line":29,"column":53}},"range":[443,496],"raw":"传递系统调用参数 -> 执行陷入指令（用户态） -> 执行系统调用相应服务程序（核心态）-> 返回用户程序"},{"type":"List","ordered":true,"start":1,"spread":false,"children":[{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"发出系统调用的陷入指令是在用户态下执行的，执行陷入指令之后立即引发一个内中断，从而CPU进入核心态","loc":{"start":{"line":31,"column":3},"end":{"line":31,"column":52}},"range":[501,550],"raw":"发出系统调用的陷入指令是在用户态下执行的，执行陷入指令之后立即引发一个内中断，从而CPU进入核心态"}],"loc":{"start":{"line":31,"column":3},"end":{"line":31,"column":52}},"range":[501,550],"raw":"发出系统调用的陷入指令是在用户态下执行的，执行陷入指令之后立即引发一个内中断，从而CPU进入核心态"}],"loc":{"start":{"line":31,"column":0},"end":{"line":31,"column":52}},"range":[498,550],"raw":"1. 发出系统调用的陷入指令是在用户态下执行的，执行陷入指令之后立即引发一个内中断，从而CPU进入核心态"},{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"发出系统调用请求时在用户态，而对系统调用的相应处理在核心态下进行","loc":{"start":{"line":32,"column":3},"end":{"line":32,"column":35}},"range":[554,586],"raw":"发出系统调用请求时在用户态，而对系统调用的相应处理在核心态下进行"}],"loc":{"start":{"line":32,"column":3},"end":{"line":32,"column":35}},"range":[554,586],"raw":"发出系统调用请求时在用户态，而对系统调用的相应处理在核心态下进行"}],"loc":{"start":{"line":32,"column":0},"end":{"line":32,"column":35}},"range":[551,586],"raw":"2. 发出系统调用请求时在用户态，而对系统调用的相应处理在核心态下进行"},{"type":"ListItem","spread":false,"checked":null,"children":[{"type":"Paragraph","children":[{"type":"Str","value":"陷入指令时唯一一个只能在用户态下执行而不能在核心态下执行的指令","loc":{"start":{"line":33,"column":3},"end":{"line":33,"column":34}},"range":[590,621],"raw":"陷入指令时唯一一个只能在用户态下执行而不能在核心态下执行的指令"}],"loc":{"start":{"line":33,"column":3},"end":{"line":33,"column":34}},"range":[590,621],"raw":"陷入指令时唯一一个只能在用户态下执行而不能在核心态下执行的指令"}],"loc":{"start":{"line":33,"column":0},"end":{"line":33,"column":34}},"range":[587,621],"raw":"3. 陷入指令时唯一一个只能在用户态下执行而不能在核心态下执行的指令"}],"loc":{"start":{"line":31,"column":0},"end":{"line":33,"column":34}},"range":[498,621],"raw":"1. 发出系统调用的陷入指令是在用户态下执行的，执行陷入指令之后立即引发一个内中断，从而CPU进入核心态\n2. 发出系统调用请求时在用户态，而对系统调用的相应处理在核心态下进行\n3. 陷入指令时唯一一个只能在用户态下执行而不能在核心态下执行的指令"}],"loc":{"start":{"line":1,"column":0},"end":{"line":34,"column":0}},"range":[0,622],"raw":"---\ntitle: '系统调用'\ntags: ['操作系统']\n---\n# 系统调用\n\n操作系统是计算机硬件和用户之间的接口，需要向上提供一些简易的服务。主要包括命令接口和程序接口。程序接口由一组**系统调用**组成。\n\n系统调用：操作系统提供给应用程序（编程人员）使用的接口，可以理解为共应用程序调用的特殊函数，应用程序可以发出系统调用请求来获得操作系统的服务。\n\n采用系统调用可以让操作系统更加方便地管理系统资源，保证操作系统的稳定性和安全性，防止用户非法操作。\n\n## 按功能分类的系统调用\n\n凡是与资源有关的操作，会直接影响到其他进程的操作，一定需要操作系统的介入，即需要通过系统调用来实现。\n\n- 设备管理\n- 文件管理\n- 进程控制\n- 进程通信\n- 内存管理\n\n## 系统调用和库函数的区别\n\n有些涉及特权指令操作的库函数是对操作系统提供的系统调用的封装，隐藏系统调用的一些不必要的细节。普通的库函数不需要使用系统调用，在用户态下就可以完成。\n\n## 系统调用的过程\n\n传递系统调用参数 -> 执行陷入指令（用户态） -> 执行系统调用相应服务程序（核心态）-> 返回用户程序\n\n1. 发出系统调用的陷入指令是在用户态下执行的，执行陷入指令之后立即引发一个内中断，从而CPU进入核心态\n2. 发出系统调用请求时在用户态，而对系统调用的相应处理在核心态下进行\n3. 陷入指令时唯一一个只能在用户态下执行而不能在核心态下执行的指令\n"},"catalogue":{"title":"系统调用","json-path":"2020-08-12-系统调用.json","mdate":"2022-08-30T14:19:31.453Z","tags":["操作系统"]}}